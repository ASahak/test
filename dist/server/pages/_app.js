module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = require('../ssr-module-cache.js');
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		var threw = true;
/******/ 		try {
/******/ 			modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 			threw = false;
/******/ 		} finally {
/******/ 			if(threw) delete installedModules[moduleId];
/******/ 		}
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ({

/***/ "../next-server/lib/router-context":
/*!**************************************************************!*\
  !*** external "next/dist/next-server/lib/router-context.js" ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("next/dist/next-server/lib/router-context.js");

/***/ }),

/***/ "../next-server/lib/router/utils/get-asset-path-from-route":
/*!**************************************************************************************!*\
  !*** external "next/dist/next-server/lib/router/utils/get-asset-path-from-route.js" ***!
  \**************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("next/dist/next-server/lib/router/utils/get-asset-path-from-route.js");

/***/ }),

/***/ "../next-server/lib/utils":
/*!*****************************************************!*\
  !*** external "next/dist/next-server/lib/utils.js" ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("next/dist/next-server/lib/utils.js");

/***/ }),

/***/ "./Components/Dumb/HeaderButton/index.js":
/*!***********************************************!*\
  !*** ./Components/Dumb/HeaderButton/index.js ***!
  \***********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ "react/jsx-dev-runtime");
/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var Components_Shared_UI__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! Components/Shared/UI */ "./Components/Shared/UI/index.js");
/* harmony import */ var reselect__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! reselect */ "reselect");
/* harmony import */ var reselect__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(reselect__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var react_redux__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react-redux */ "react-redux");
/* harmony import */ var react_redux__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(react_redux__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var hoc_withReduxSaga__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! hoc/withReduxSaga */ "./HOC/withReduxSaga.js");
/* harmony import */ var redux_injectors__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! redux-injectors */ "redux-injectors");
/* harmony import */ var redux_injectors__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(redux_injectors__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var store_reducers_base__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! store/reducers/base */ "./store/reducers/base.js");
/* harmony import */ var store_sagas_base__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! store/sagas/base */ "./store/sagas/base.js");
/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! next/router */ "next/router");
/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(next_router__WEBPACK_IMPORTED_MODULE_9__);

var _jsxFileName = "C:\\Users\\arthu\\OneDrive\\Desktop\\Important\\daser\\next\\sexjobs\\Components\\Dumb\\HeaderButton\\index.js";










const HeaderBtn = props => {
  Object(redux_injectors__WEBPACK_IMPORTED_MODULE_6__["useInjectReducer"])({
    key: "base",
    reducer: store_reducers_base__WEBPACK_IMPORTED_MODULE_7__["default"]
  });
  Object(redux_injectors__WEBPACK_IMPORTED_MODULE_6__["useInjectSaga"])({
    key: "base",
    saga: store_sagas_base__WEBPACK_IMPORTED_MODULE_8__["default"]
  });
  const router = Object(next_router__WEBPACK_IMPORTED_MODULE_9__["useRouter"])();

  const goToRoute = async () => {
    try {
      if (props.pageName) {
        await router.push(props.pageName === 'login' ? '/register' : '/login');
      } else {// todo do something else
      }
    } catch (err) {
      console.error(err.message);
    }
  };

  return /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])(Components_Shared_UI__WEBPACK_IMPORTED_MODULE_2__["Button"], {
    className: "ads-button",
    icon: !props.pageName ? {
      className: 'icon-plus',
      direction: 'left'
    } : {},
    size: 'md',
    attr: {
      'data-appear': !props.pageName
    },
    text: !props.pageName ? 'Plaats advertentie' : props.pageName === 'register' ? 'Login' : 'Register',
    typeButton: "primary",
    onClick: () => goToRoute()
  }, void 0, false, {
    fileName: _jsxFileName,
    lineNumber: 27,
    columnNumber: 13
  }, undefined);
};

const mapStateToProps = Object(reselect__WEBPACK_IMPORTED_MODULE_3__["createStructuredSelector"])({
  pageName: state => state.base.pageName
});

const mapDispatchToProps = _dispatch => {
  return {};
};

/* harmony default export */ __webpack_exports__["default"] = (Object(hoc_withReduxSaga__WEBPACK_IMPORTED_MODULE_5__["default"])(Object(react_redux__WEBPACK_IMPORTED_MODULE_4__["connect"])(mapStateToProps, mapDispatchToProps)(HeaderBtn)));

/***/ }),

/***/ "./Components/Shared/Footer/index.jsx":
/*!********************************************!*\
  !*** ./Components/Shared/Footer/index.jsx ***!
  \********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ "react/jsx-dev-runtime");
/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! prop-types */ "prop-types");
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _styles__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./styles */ "./Components/Shared/Footer/styles.js");
/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! next/link */ "./node_modules/next/link.js");
/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(next_link__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var reactstrap__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! reactstrap */ "reactstrap");
/* harmony import */ var reactstrap__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(reactstrap__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var Components_Shared_UI__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! Components/Shared/UI */ "./Components/Shared/UI/index.js");

var _jsxFileName = "C:\\Users\\arthu\\OneDrive\\Desktop\\Important\\daser\\next\\sexjobs\\Components\\Shared\\Footer\\index.jsx";







const Footer = props => {
  const styles = Object(_styles__WEBPACK_IMPORTED_MODULE_3__["default"])();
  return /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("footer", {
    children: /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])(reactstrap__WEBPACK_IMPORTED_MODULE_5__["Container"], {
      className: styles['main-container_footer'],
      children: [/*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("div", {
        children: [/*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("h4", {
          children: "Service"
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 17,
          columnNumber: 20
        }, undefined), /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])(next_link__WEBPACK_IMPORTED_MODULE_4___default.a, {
          href: '/',
          prefetch: false,
          children: /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("a", {
            children: "Contact"
          }, void 0, false, {
            fileName: _jsxFileName,
            lineNumber: 19,
            columnNumber: 25
          }, undefined)
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 18,
          columnNumber: 20
        }, undefined), /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])(next_link__WEBPACK_IMPORTED_MODULE_4___default.a, {
          href: '/',
          prefetch: false,
          children: /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("a", {
            children: "FAQ"
          }, void 0, false, {
            fileName: _jsxFileName,
            lineNumber: 22,
            columnNumber: 25
          }, undefined)
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 21,
          columnNumber: 20
        }, undefined), /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])(next_link__WEBPACK_IMPORTED_MODULE_4___default.a, {
          href: '/',
          prefetch: false,
          children: /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("a", {
            children: "Algemene voorwaarden"
          }, void 0, false, {
            fileName: _jsxFileName,
            lineNumber: 25,
            columnNumber: 25
          }, undefined)
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 24,
          columnNumber: 20
        }, undefined), /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])(next_link__WEBPACK_IMPORTED_MODULE_4___default.a, {
          href: '/',
          prefetch: false,
          children: /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("a", {
            children: "Privacy & cookies"
          }, void 0, false, {
            fileName: _jsxFileName,
            lineNumber: 28,
            columnNumber: 25
          }, undefined)
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 27,
          columnNumber: 20
        }, undefined)]
      }, void 0, true, {
        fileName: _jsxFileName,
        lineNumber: 16,
        columnNumber: 16
      }, undefined), /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("div", {
        children: [/*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("h4", {
          children: "Adverteren"
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 32,
          columnNumber: 20
        }, undefined), /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])(next_link__WEBPACK_IMPORTED_MODULE_4___default.a, {
          href: '/',
          prefetch: false,
          children: /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("a", {
            children: "Advertentieregels"
          }, void 0, false, {
            fileName: _jsxFileName,
            lineNumber: 34,
            columnNumber: 24
          }, undefined)
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 33,
          columnNumber: 20
        }, undefined), /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])(next_link__WEBPACK_IMPORTED_MODULE_4___default.a, {
          href: '/',
          prefetch: false,
          children: /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("a", {
            children: "Opvallen op Sexjobs"
          }, void 0, false, {
            fileName: _jsxFileName,
            lineNumber: 37,
            columnNumber: 24
          }, undefined)
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 36,
          columnNumber: 20
        }, undefined)]
      }, void 0, true, {
        fileName: _jsxFileName,
        lineNumber: 31,
        columnNumber: 16
      }, undefined), /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("div", {
        children: [/*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("h4", {
          children: "Raak betrokken"
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 41,
          columnNumber: 20
        }, undefined), /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])(next_link__WEBPACK_IMPORTED_MODULE_4___default.a, {
          href: '/',
          prefetch: false,
          children: /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("a", {
            children: "Vrienden van"
          }, void 0, false, {
            fileName: _jsxFileName,
            lineNumber: 43,
            columnNumber: 24
          }, undefined)
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 42,
          columnNumber: 20
        }, undefined), /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])(next_link__WEBPACK_IMPORTED_MODULE_4___default.a, {
          href: '/',
          prefetch: false,
          children: /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("a", {
            children: "Testpanel"
          }, void 0, false, {
            fileName: _jsxFileName,
            lineNumber: 46,
            columnNumber: 24
          }, undefined)
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 45,
          columnNumber: 20
        }, undefined), /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])(next_link__WEBPACK_IMPORTED_MODULE_4___default.a, {
          href: '/',
          prefetch: false,
          children: /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("a", {
            children: "Feedback forum"
          }, void 0, false, {
            fileName: _jsxFileName,
            lineNumber: 49,
            columnNumber: 24
          }, undefined)
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 48,
          columnNumber: 20
        }, undefined)]
      }, void 0, true, {
        fileName: _jsxFileName,
        lineNumber: 40,
        columnNumber: 16
      }, undefined), /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("div", {
        children: [/*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("h4", {
          children: "Belangrijke informatie"
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 53,
          columnNumber: 20
        }, undefined), /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])(next_link__WEBPACK_IMPORTED_MODULE_4___default.a, {
          href: '/',
          prefetch: false,
          children: /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("a", {
            children: "Stoppen met prostitutie"
          }, void 0, false, {
            fileName: _jsxFileName,
            lineNumber: 55,
            columnNumber: 24
          }, undefined)
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 54,
          columnNumber: 20
        }, undefined), /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])(next_link__WEBPACK_IMPORTED_MODULE_4___default.a, {
          href: '/',
          prefetch: false,
          children: /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("a", {
            children: "Veiligheid en Voorlichting"
          }, void 0, false, {
            fileName: _jsxFileName,
            lineNumber: 58,
            columnNumber: 24
          }, undefined)
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 57,
          columnNumber: 20
        }, undefined), /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])(next_link__WEBPACK_IMPORTED_MODULE_4___default.a, {
          href: '/',
          prefetch: false,
          children: /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("a", {
            children: "Gedragscode & disclaimer"
          }, void 0, false, {
            fileName: _jsxFileName,
            lineNumber: 61,
            columnNumber: 24
          }, undefined)
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 60,
          columnNumber: 20
        }, undefined)]
      }, void 0, true, {
        fileName: _jsxFileName,
        lineNumber: 52,
        columnNumber: 16
      }, undefined), /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("div", {
        children: [/*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("h4", {
          children: "Nieuwsbrief"
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 65,
          columnNumber: 20
        }, undefined), /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("p", {
          children: "Vul je e-mail adres in om onze nieuwsbrief te ontvangen:"
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 66,
          columnNumber: 20
        }, undefined), /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("form", {
          children: /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])(Components_Shared_UI__WEBPACK_IMPORTED_MODULE_6__["Input"], {
            icon: {
              className: 'icon-arrow-right',
              onClick: () => void 1
            },
            name: "email",
            type: "email",
            fullWidth: true,
            placeholder: "Email address",
            size: "md"
          }, void 0, false, {
            fileName: _jsxFileName,
            lineNumber: 68,
            columnNumber: 24
          }, undefined)
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 67,
          columnNumber: 20
        }, undefined), /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("p", {
          children: "We zullen je gegevens nooit delen."
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 76,
          columnNumber: 20
        }, undefined)]
      }, void 0, true, {
        fileName: _jsxFileName,
        lineNumber: 64,
        columnNumber: 16
      }, undefined)]
    }, void 0, true, {
      fileName: _jsxFileName,
      lineNumber: 15,
      columnNumber: 12
    }, undefined)
  }, void 0, false, {
    fileName: _jsxFileName,
    lineNumber: 14,
    columnNumber: 9
  }, undefined);
};

Footer.propTypes = {};
/* harmony default export */ __webpack_exports__["default"] = (Footer);

/***/ }),

/***/ "./Components/Shared/Footer/styles.js":
/*!********************************************!*\
  !*** ./Components/Shared/Footer/styles.js ***!
  \********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var react_jss__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react-jss */ "react-jss");
/* harmony import */ var react_jss__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jss__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! static/styles/jss/variables */ "./static/styles/jss/variables.js");
/* harmony import */ var static_styles_jss_mixins__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! static/styles/jss/mixins */ "./static/styles/jss/mixins.js");
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }




/* harmony default export */ __webpack_exports__["default"] = (Object(react_jss__WEBPACK_IMPORTED_MODULE_0__["createUseStyles"])({
  '@global': {
    'footer': {
      backgroundColor: static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$baseDark,
      borderTop: `2px solid ${static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$baseRed}`,
      padding: '30px 0 50px 0'
    }
  },
  'main-container_footer': _objectSpread(_objectSpread({
    display: 'flex',
    flexWrap: 'wrap',
    justifyContent: 'space-between'
  }, static_styles_jss_mixins__WEBPACK_IMPORTED_MODULE_2__["MediaQuery"].between({
    justifyContent: 'flex-start'
  }).sm_md), {}, {
    '& > div': _objectSpread(_objectSpread(_objectSpread(_objectSpread({
      width: '20%'
    }, static_styles_jss_mixins__WEBPACK_IMPORTED_MODULE_2__["MediaQuery"].between({
      width: '33.33%',
      '&:nth-child(5)': {
        order: 2
      },
      '&:nth-child(3)': {
        order: 3,
        marginTop: '20px'
      },
      '&:nth-child(4)': {
        order: 4,
        marginTop: '20px'
      }
    }).sm_md), static_styles_jss_mixins__WEBPACK_IMPORTED_MODULE_2__["MediaQuery"].between({
      width: '50%',
      '&:nth-child(3)': {
        marginTop: '20px'
      },
      '&:nth-child(4)': {
        marginTop: '20px'
      },
      '&:nth-child(5)': {
        width: '100%',
        marginTop: '20px'
      }
    }).xs_sm), static_styles_jss_mixins__WEBPACK_IMPORTED_MODULE_2__["MediaQuery"].down({
      marginTop: '20px',
      width: '100%'
    }).xs), {}, {
      '& form': {
        marginBottom: '16px'
      },
      '& h4': {
        fontSize: '16px',
        fontWeight: 'bold',
        color: '#fff',
        marginBottom: '10px'
      },
      '& > a, & > p': {
        display: 'block',
        marginBottom: '10px',
        fontSize: '13px',
        color: '#fff'
      }
    })
  })
}));

/***/ }),

/***/ "./Components/Shared/Header/elements/auth-panel/index.jsx":
/*!****************************************************************!*\
  !*** ./Components/Shared/Header/elements/auth-panel/index.jsx ***!
  \****************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ "react/jsx-dev-runtime");
/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! prop-types */ "prop-types");
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _styles__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./styles */ "./Components/Shared/Header/elements/auth-panel/styles.js");
/* harmony import */ var _logged__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./logged */ "./Components/Shared/Header/elements/auth-panel/logged/index.jsx");
/* harmony import */ var _not_logged__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./not-logged */ "./Components/Shared/Header/elements/auth-panel/not-logged/index.jsx");

var _jsxFileName = "C:\\Users\\arthu\\OneDrive\\Desktop\\Important\\daser\\next\\sexjobs\\Components\\Shared\\Header\\elements\\auth-panel\\index.jsx";






const AuthPanel = props => {
  const styles = Object(_styles__WEBPACK_IMPORTED_MODULE_3__["default"])();
  return /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("div", {
    className: styles['auth-wrapper'],
    children: props.isLogged ? /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])(_logged__WEBPACK_IMPORTED_MODULE_4__["default"], {}, void 0, false, {
      fileName: _jsxFileName,
      lineNumber: 12,
      columnNumber: 31
    }, undefined) : /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])(_not_logged__WEBPACK_IMPORTED_MODULE_5__["default"], {
      page: props.routePage
    }, void 0, false, {
      fileName: _jsxFileName,
      lineNumber: 12,
      columnNumber: 44
    }, undefined)
  }, void 0, false, {
    fileName: _jsxFileName,
    lineNumber: 11,
    columnNumber: 9
  }, undefined);
};

AuthPanel.propTypes = {
  routePage: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.string,
  isLogged: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.bool
};
/* harmony default export */ __webpack_exports__["default"] = (AuthPanel);

/***/ }),

/***/ "./Components/Shared/Header/elements/auth-panel/logged/index.jsx":
/*!***********************************************************************!*\
  !*** ./Components/Shared/Header/elements/auth-panel/logged/index.jsx ***!
  \***********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ "react/jsx-dev-runtime");
/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! prop-types */ "prop-types");
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _shopping_cart__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./shopping-cart */ "./Components/Shared/Header/elements/auth-panel/logged/shopping-cart.jsx");
/* harmony import */ var _notifications__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./notifications */ "./Components/Shared/Header/elements/auth-panel/logged/notifications.jsx");
/* harmony import */ var _user_avatar__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./user-avatar */ "./Components/Shared/Header/elements/auth-panel/logged/user-avatar.jsx");


var _jsxFileName = "C:\\Users\\arthu\\OneDrive\\Desktop\\Important\\daser\\next\\sexjobs\\Components\\Shared\\Header\\elements\\auth-panel\\logged\\index.jsx";






const Logged = props => {
  const {
    0: user,
    1: setUser
  } = Object(react__WEBPACK_IMPORTED_MODULE_1__["useState"])({
    // todo need to get from API via redux
    cartCount: 10,
    notifications: [{}, {}, {}],
    avatarSrc: ''
  });
  return /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["Fragment"], {
    children: [user.cartCount > 0 ? /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])(_shopping_cart__WEBPACK_IMPORTED_MODULE_3__["default"], {
      count: user.cartCount
    }, void 0, false, {
      fileName: _jsxFileName,
      lineNumber: 20,
      columnNumber: 35
    }, undefined) : '', /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])(_notifications__WEBPACK_IMPORTED_MODULE_4__["default"], {
      data: user.notifications
    }, void 0, false, {
      fileName: _jsxFileName,
      lineNumber: 21,
      columnNumber: 13
    }, undefined), /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])(_user_avatar__WEBPACK_IMPORTED_MODULE_5__["default"], {
      src: user.avatarSrc
    }, void 0, false, {
      fileName: _jsxFileName,
      lineNumber: 22,
      columnNumber: 13
    }, undefined)]
  }, void 0, true);
};

Logged.propTypes = {};
/* harmony default export */ __webpack_exports__["default"] = (Logged);

/***/ }),

/***/ "./Components/Shared/Header/elements/auth-panel/logged/notifications.jsx":
/*!*******************************************************************************!*\
  !*** ./Components/Shared/Header/elements/auth-panel/logged/notifications.jsx ***!
  \*******************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ "react/jsx-dev-runtime");
/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! prop-types */ "prop-types");
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _material_ui_core_Popover__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @material-ui/core/Popover */ "@material-ui/core/Popover");
/* harmony import */ var _material_ui_core_Popover__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_material_ui_core_Popover__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var Components_Shared_UI_makeStylesUI__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! Components/Shared/UI/makeStylesUI */ "./Components/Shared/UI/makeStylesUI.js");
/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! next/link */ "./node_modules/next/link.js");
/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(next_link__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var Components_Shared_UI__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! Components/Shared/UI */ "./Components/Shared/UI/index.js");

var _jsxFileName = "C:\\Users\\arthu\\OneDrive\\Desktop\\Important\\daser\\next\\sexjobs\\Components\\Shared\\Header\\elements\\auth-panel\\logged\\notifications.jsx";







const Notifications = props => {
  const _count = props.data.length > 9 ? '9+' : props.data.length;

  const classesDropDown = Object(Components_Shared_UI_makeStylesUI__WEBPACK_IMPORTED_MODULE_4__["useDropDownPopoverStyles"])({
    margin: '20px 0 0 62px',
    triangle: 'block',
    overflow: 'initial'
  });
  const {
    0: anchorEl,
    1: setAnchorEl
  } = Object(react__WEBPACK_IMPORTED_MODULE_1__["useState"])(null);
  const open = Boolean(anchorEl);
  const id = open ? 'simple-popover' : undefined;
  return /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("div", {
    className: `notifications-wrapper ${open ? 'notification-wrap-open' : ''}`,
    children: [/*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("span", {
      className: "icon-bell",
      onClick: event => setAnchorEl(event.currentTarget)
    }, void 0, false, {
      fileName: _jsxFileName,
      lineNumber: 24,
      columnNumber: 13
    }, undefined), _count ? /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("span", {
      className: "notifications-count",
      children: _count
    }, void 0, false, {
      fileName: _jsxFileName,
      lineNumber: 25,
      columnNumber: 24
    }, undefined) : '', /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])(_material_ui_core_Popover__WEBPACK_IMPORTED_MODULE_3___default.a, {
      classes: classesDropDown,
      id: id,
      open: open,
      anchorEl: anchorEl,
      PaperProps: {
        style: {
          width: '300px'
        }
      },
      onClose: () => setAnchorEl(null),
      anchorOrigin: {
        vertical: 'bottom',
        horizontal: 'left'
      },
      transformOrigin: {
        vertical: 'top',
        horizontal: 'right'
      },
      children: [/*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("ul", {
        className: "notification-dropdown_popover",
        children: [/*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("li", {
          className: "not-reed",
          children: [/*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("div", {
            className: "img-wrapper img_thumbnail",
            children: /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("img", {
              src: "/images/avatar.png",
              alt: "avatar"
            }, void 0, false, {
              fileName: _jsxFileName,
              lineNumber: 49,
              columnNumber: 29
            }, undefined)
          }, void 0, false, {
            fileName: _jsxFileName,
            lineNumber: 48,
            columnNumber: 25
          }, undefined), /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("div", {
            className: "right-side_description",
            children: [/*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("p", {
              children: ["Katinka invited you to participate in her advertisement", /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])(next_link__WEBPACK_IMPORTED_MODULE_5___default.a, {
                href: '/',
                prefetch: false,
                children: /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("a", {
                  children: "Potverdikkie lekker hoor dat neuken."
                }, void 0, false, {
                  fileName: _jsxFileName,
                  lineNumber: 55,
                  columnNumber: 37
                }, undefined)
              }, void 0, false, {
                fileName: _jsxFileName,
                lineNumber: 54,
                columnNumber: 33
              }, undefined), /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("span", {
                className: "date-notification",
                children: [/*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("i", {
                  className: "icon-clock"
                }, void 0, false, {
                  fileName: _jsxFileName,
                  lineNumber: 58,
                  columnNumber: 37
                }, undefined), "1d"]
              }, void 0, true, {
                fileName: _jsxFileName,
                lineNumber: 57,
                columnNumber: 33
              }, undefined)]
            }, void 0, true, {
              fileName: _jsxFileName,
              lineNumber: 52,
              columnNumber: 29
            }, undefined), /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("div", {
              className: "btns-wrapper",
              children: [/*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])(Components_Shared_UI__WEBPACK_IMPORTED_MODULE_6__["Button"], {
                icon: {
                  className: 'icon-blocked',
                  direction: 'left'
                },
                margin: [0, 10, 0, 0],
                width: 100,
                size: 'xs',
                text: "CTA",
                typeButton: "white-bg"
              }, void 0, false, {
                fileName: _jsxFileName,
                lineNumber: 63,
                columnNumber: 33
              }, undefined), /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])(Components_Shared_UI__WEBPACK_IMPORTED_MODULE_6__["Button"], {
                icon: {
                  className: 'icon-checkmark',
                  direction: 'left'
                } // margin={10}
                ,
                width: 100,
                size: 'xs',
                text: "Accept",
                typeButton: "primary"
              }, void 0, false, {
                fileName: _jsxFileName,
                lineNumber: 71,
                columnNumber: 33
              }, undefined)]
            }, void 0, true, {
              fileName: _jsxFileName,
              lineNumber: 62,
              columnNumber: 29
            }, undefined)]
          }, void 0, true, {
            fileName: _jsxFileName,
            lineNumber: 51,
            columnNumber: 25
          }, undefined)]
        }, void 0, true, {
          fileName: _jsxFileName,
          lineNumber: 47,
          columnNumber: 21
        }, undefined), /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("li", {
          children: [/*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("div", {
            className: "img-wrapper img_icon",
            children: [/*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("span", {
              children: "K"
            }, void 0, false, {
              fileName: _jsxFileName,
              lineNumber: 84,
              columnNumber: 29
            }, undefined), " "]
          }, void 0, true, {
            fileName: _jsxFileName,
            lineNumber: 83,
            columnNumber: 25
          }, undefined), /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("div", {
            className: "right-side_description",
            children: /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("p", {
              children: ["Epicurus in bonis sit voluptatem ipsam per se ipsam causam ista, quae dices. voluptatem", /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("span", {
                className: "date-notification",
                children: [/*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("i", {
                  className: "icon-clock"
                }, void 0, false, {
                  fileName: _jsxFileName,
                  lineNumber: 90,
                  columnNumber: 37
                }, undefined), "1d"]
              }, void 0, true, {
                fileName: _jsxFileName,
                lineNumber: 89,
                columnNumber: 33
              }, undefined)]
            }, void 0, true, {
              fileName: _jsxFileName,
              lineNumber: 87,
              columnNumber: 29
            }, undefined)
          }, void 0, false, {
            fileName: _jsxFileName,
            lineNumber: 86,
            columnNumber: 25
          }, undefined)]
        }, void 0, true, {
          fileName: _jsxFileName,
          lineNumber: 82,
          columnNumber: 21
        }, undefined), /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("li", {
          children: [/*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("div", {
            className: "img-wrapper img_icon",
            children: [/*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("span", {
              children: "K"
            }, void 0, false, {
              fileName: _jsxFileName,
              lineNumber: 98,
              columnNumber: 29
            }, undefined), " "]
          }, void 0, true, {
            fileName: _jsxFileName,
            lineNumber: 97,
            columnNumber: 25
          }, undefined), /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("div", {
            className: "right-side_description",
            children: [/*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("p", {
              children: ["Epicurus in bonis sit voluptatem ipsam per se ipsam causam ista, quae dices. voluptatem", /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])(next_link__WEBPACK_IMPORTED_MODULE_5___default.a, {
                href: '/',
                prefetch: false,
                children: /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("a", {
                  children: "'Advertisement title'."
                }, void 0, false, {
                  fileName: _jsxFileName,
                  lineNumber: 104,
                  columnNumber: 37
                }, undefined)
              }, void 0, false, {
                fileName: _jsxFileName,
                lineNumber: 103,
                columnNumber: 33
              }, undefined), /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("span", {
                className: "date-notification",
                children: [/*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("i", {
                  className: "icon-clock"
                }, void 0, false, {
                  fileName: _jsxFileName,
                  lineNumber: 107,
                  columnNumber: 37
                }, undefined), "1d"]
              }, void 0, true, {
                fileName: _jsxFileName,
                lineNumber: 106,
                columnNumber: 33
              }, undefined)]
            }, void 0, true, {
              fileName: _jsxFileName,
              lineNumber: 101,
              columnNumber: 29
            }, undefined), /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("div", {
              className: "btns-wrapper",
              children: /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])(Components_Shared_UI__WEBPACK_IMPORTED_MODULE_6__["Button"], {
                width: 50,
                size: 'xs',
                text: "CTA",
                typeButton: "white-bg"
              }, void 0, false, {
                fileName: _jsxFileName,
                lineNumber: 112,
                columnNumber: 33
              }, undefined)
            }, void 0, false, {
              fileName: _jsxFileName,
              lineNumber: 111,
              columnNumber: 29
            }, undefined)]
          }, void 0, true, {
            fileName: _jsxFileName,
            lineNumber: 100,
            columnNumber: 25
          }, undefined)]
        }, void 0, true, {
          fileName: _jsxFileName,
          lineNumber: 96,
          columnNumber: 21
        }, undefined)]
      }, void 0, true, {
        fileName: _jsxFileName,
        lineNumber: 46,
        columnNumber: 17
      }, undefined), /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])(next_link__WEBPACK_IMPORTED_MODULE_5___default.a, {
        href: '/',
        prefetch: false,
        children: /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("a", {
          className: "see-all-notifications_popover",
          children: "Alle notificaties bekijken"
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 123,
          columnNumber: 21
        }, undefined)
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 122,
        columnNumber: 17
      }, undefined)]
    }, void 0, true, {
      fileName: _jsxFileName,
      lineNumber: 26,
      columnNumber: 13
    }, undefined)]
  }, void 0, true, {
    fileName: _jsxFileName,
    lineNumber: 23,
    columnNumber: 9
  }, undefined);
};

Notifications.defaultProps = {
  data: []
};
Notifications.propTypes = {
  data: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.array
};
/* harmony default export */ __webpack_exports__["default"] = (/*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.memo(Notifications));

/***/ }),

/***/ "./Components/Shared/Header/elements/auth-panel/logged/shopping-cart.jsx":
/*!*******************************************************************************!*\
  !*** ./Components/Shared/Header/elements/auth-panel/logged/shopping-cart.jsx ***!
  \*******************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ "react/jsx-dev-runtime");
/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! prop-types */ "prop-types");
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! next/link */ "./node_modules/next/link.js");
/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(next_link__WEBPACK_IMPORTED_MODULE_3__);

var _jsxFileName = "C:\\Users\\arthu\\OneDrive\\Desktop\\Important\\daser\\next\\sexjobs\\Components\\Shared\\Header\\elements\\auth-panel\\logged\\shopping-cart.jsx";



const ShoppingCart = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.memo(props => {
  const _count = props.count > 9 ? '9+' : props.count;

  return /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])(next_link__WEBPACK_IMPORTED_MODULE_3___default.a, {
    href: "/cart",
    prefetch: false,
    children: /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("a", {
      className: "cart-wrapper",
      children: [/*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("span", {
        className: "icon-cart"
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 11,
        columnNumber: 17
      }, undefined), /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("span", {
        className: "cart-count",
        children: _count
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 12,
        columnNumber: 17
      }, undefined)]
    }, void 0, true, {
      fileName: _jsxFileName,
      lineNumber: 10,
      columnNumber: 13
    }, undefined)
  }, void 0, false, {
    fileName: _jsxFileName,
    lineNumber: 9,
    columnNumber: 9
  }, undefined);
}, (prevProps, nextProps) => nextProps.count === prevProps.count);
ShoppingCart.defaultProps = {
  count: 0
};
ShoppingCart.propTypes = {
  count: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.number
};
/* harmony default export */ __webpack_exports__["default"] = (ShoppingCart);

/***/ }),

/***/ "./Components/Shared/Header/elements/auth-panel/logged/user-avatar.jsx":
/*!*****************************************************************************!*\
  !*** ./Components/Shared/Header/elements/auth-panel/logged/user-avatar.jsx ***!
  \*****************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ "react/jsx-dev-runtime");
/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! prop-types */ "prop-types");
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var Components_Shared_UI_Image__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! Components/Shared/UI/Image */ "./Components/Shared/UI/Image/index.jsx");
/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! next/link */ "./node_modules/next/link.js");
/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(next_link__WEBPACK_IMPORTED_MODULE_4__);

var _jsxFileName = "C:\\Users\\arthu\\OneDrive\\Desktop\\Important\\daser\\next\\sexjobs\\Components\\Shared\\Header\\elements\\auth-panel\\logged\\user-avatar.jsx";





const UserAvatar = props => {
  return /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])(next_link__WEBPACK_IMPORTED_MODULE_4___default.a, {
    href: "/user-account",
    prefetch: false,
    children: /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("a", {
      className: "avatar-wrapper",
      children: /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])(Components_Shared_UI_Image__WEBPACK_IMPORTED_MODULE_3__["default"], {
        src: props.src,
        defaultSrc: "/images/avatar.png"
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 10,
        columnNumber: 17
      }, undefined)
    }, void 0, false, {
      fileName: _jsxFileName,
      lineNumber: 9,
      columnNumber: 13
    }, undefined)
  }, void 0, false, {
    fileName: _jsxFileName,
    lineNumber: 8,
    columnNumber: 9
  }, undefined);
};

UserAvatar.propTypes = {
  src: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.string
};
/* harmony default export */ __webpack_exports__["default"] = (/*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.memo(UserAvatar));

/***/ }),

/***/ "./Components/Shared/Header/elements/auth-panel/not-logged/index.jsx":
/*!***************************************************************************!*\
  !*** ./Components/Shared/Header/elements/auth-panel/not-logged/index.jsx ***!
  \***************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ "react/jsx-dev-runtime");
/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! prop-types */ "prop-types");
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _material_ui_core_Popover__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @material-ui/core/Popover */ "@material-ui/core/Popover");
/* harmony import */ var _material_ui_core_Popover__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_material_ui_core_Popover__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! next/link */ "./node_modules/next/link.js");
/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(next_link__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var Components_Shared_UI_makeStylesUI__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! Components/Shared/UI/makeStylesUI */ "./Components/Shared/UI/makeStylesUI.js");
/* harmony import */ var Components_Dumb_HeaderButton__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! Components/Dumb/HeaderButton */ "./Components/Dumb/HeaderButton/index.js");


var _jsxFileName = "C:\\Users\\arthu\\OneDrive\\Desktop\\Important\\daser\\next\\sexjobs\\Components\\Shared\\Header\\elements\\auth-panel\\not-logged\\index.jsx";






const languages = [{
  value: 'netherlands',
  title: 'Netherlands',
  img: '/images/flags/netherlands.jpg'
}, {
  value: 'english',
  title: 'English',
  img: '/images/flags/england.png'
}, {
  value: 'deutsch',
  title: 'Deutsch',
  img: '/images/flags/german.jpg'
}];

const NotLogged = props => {
  const {
    0: language,
    1: setLanguage
  } = Object(react__WEBPACK_IMPORTED_MODULE_1__["useState"])(languages[0]);
  const {
    0: anchorEl,
    1: setAnchorEl
  } = Object(react__WEBPACK_IMPORTED_MODULE_1__["useState"])(null);
  const classesDropDown = Object(Components_Shared_UI_makeStylesUI__WEBPACK_IMPORTED_MODULE_5__["useDropDownPopoverStyles"])({
    margin: '10px 0 0 -10px'
  });
  const open = Boolean(anchorEl);
  const id = open ? 'simple-popover' : undefined;
  const changeLanguage = Object(react__WEBPACK_IMPORTED_MODULE_1__["useCallback"])(e => {
    setLanguage(e);
  }, [language]);
  const languagesLi = Object(react__WEBPACK_IMPORTED_MODULE_1__["useMemo"])(() => languages.map(e => /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("li", {
    className: language.value === e.value ? 'active-language' : '',
    onClick: () => changeLanguage(e),
    children: [/*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("img", {
      src: e.img,
      alt: "avatar"
    }, void 0, false, {
      fileName: _jsxFileName,
      lineNumber: 30,
      columnNumber: 13
    }, undefined), e.title]
  }, e.value, true, {
    fileName: _jsxFileName,
    lineNumber: 29,
    columnNumber: 9
  }, undefined)), [language]);
  return /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["Fragment"], {
    children: [props.page ? /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("span", {
      className: "user-question",
      children: props.page === 'register' ? 'Already an account?' : 'Not Account yet?'
    }, void 0, false, {
      fileName: _jsxFileName,
      lineNumber: 37,
      columnNumber: 27
    }, undefined) : null, /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("div", {
      className: `language-wrap ${open ? 'language-wrap-open' : ''}`,
      children: [/*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("img", {
        alt: "avatar",
        onClick: event => setAnchorEl(event.currentTarget),
        src: language.img
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 39,
        columnNumber: 17
      }, undefined), /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])(_material_ui_core_Popover__WEBPACK_IMPORTED_MODULE_3___default.a, {
        classes: classesDropDown,
        id: id,
        open: open,
        anchorEl: anchorEl,
        onClose: () => setAnchorEl(null),
        PaperProps: {
          style: {
            width: '130px'
          }
        },
        anchorOrigin: {
          vertical: 'bottom',
          horizontal: 'left'
        },
        transformOrigin: {
          vertical: 'top',
          horizontal: 'left'
        },
        children: /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("ul", {
          className: "language-dropdown_popover",
          children: languagesLi
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 60,
          columnNumber: 21
        }, undefined)
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 40,
        columnNumber: 17
      }, undefined)]
    }, void 0, true, {
      fileName: _jsxFileName,
      lineNumber: 38,
      columnNumber: 13
    }, undefined), !props.page ? /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])(next_link__WEBPACK_IMPORTED_MODULE_4___default.a, {
      href: "/login",
      prefetch: false,
      children: /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("a", {
        className: "user_icon",
        children: /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("span", {
          className: "icon-user"
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 67,
          columnNumber: 21
        }, undefined)
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 66,
        columnNumber: 17
      }, undefined)
    }, void 0, false, {
      fileName: _jsxFileName,
      lineNumber: 65,
      columnNumber: 28
    }, undefined) : '', /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])(Components_Dumb_HeaderButton__WEBPACK_IMPORTED_MODULE_6__["default"], {}, void 0, false, {
      fileName: _jsxFileName,
      lineNumber: 70,
      columnNumber: 13
    }, undefined)]
  }, void 0, true);
};

NotLogged.defaultProps = {
  page: ''
};
NotLogged.propTypes = {
  page: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.string
};
/* harmony default export */ __webpack_exports__["default"] = (NotLogged);

/***/ }),

/***/ "./Components/Shared/Header/elements/auth-panel/styles.js":
/*!****************************************************************!*\
  !*** ./Components/Shared/Header/elements/auth-panel/styles.js ***!
  \****************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var react_jss__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react-jss */ "react-jss");
/* harmony import */ var react_jss__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jss__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! static/styles/jss/variables */ "./static/styles/jss/variables.js");
/* harmony import */ var static_styles_jss_mixins__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! static/styles/jss/mixins */ "./static/styles/jss/mixins.js");
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }




/* harmony default export */ __webpack_exports__["default"] = (Object(react_jss__WEBPACK_IMPORTED_MODULE_0__["createUseStyles"])({
  'count_extend': {
    position: 'absolute',
    top: '-9px',
    right: '-9px',
    background: static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$baseRed,
    fontSize: '10px',
    lineHeight: '13px',
    width: '15px',
    height: '15px',
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center',
    borderRadius: '2px'
  },
  '@global': {
    '.language-dropdown_popover': {
      padding: 0,
      listStyleType: 'none',
      margin: 0,
      '& > li': {
        padding: '7px 10px',
        display: 'flex',
        alignItems: 'center',
        cursor: 'pointer',
        fontSize: '13px',
        '&.active-language': {
          backgroundColor: '#3378d1',
          color: '#fff',
          fontWeight: '600',
          '& img': {
            borderColor: '#fff'
          }
        },
        '& img': {
          marginRight: '10px',
          width: '22px',
          height: '22px',
          objectFit: 'cover',
          border: '2px solid #ccc',
          borderRadius: '50%'
        }
      }
    },
    '.see-all-notifications_popover': {
      color: '#3378D1',
      fontSize: '13px',
      fontWeight: 600,
      padding: '13px',
      display: 'block',
      textAlign: 'center'
    },
    '.notification-dropdown_popover': {
      listStyleType: 'none',
      padding: '0',
      margin: '0',
      '& li': {
        padding: '10px 25px 10px 10px',
        display: 'flex',
        borderBottom: '1px solid #C7C7C7',
        position: 'relative',
        '&.not-reed': {
          fontWeight: 900,
          '& .right-side_description > p': {
            position: 'relative',
            '&::after': {
              content: '""',
              position: 'absolute',
              right: '-15px',
              width: '10px',
              height: '10px',
              background: '#3378D1',
              borderRadius: '50%',
              top: '0',
              bottom: '0',
              margin: 'auto'
            }
          }
        },
        '& .img-wrapper': {
          width: '50px',
          '& img': {
            width: '36px',
            height: '36px'
          },
          '&.img_thumbnail': {
            objectFit: 'cover',
            borderRadius: '3px'
          },
          '&.img_icon': {
            '& span': {
              width: '36px',
              height: '36px',
              color: '#fff',
              borderRadius: '50%',
              backgroundColor: '#0B0E2A',
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center',
              fontWeight: '900'
            }
          }
        },
        '& .right-side_description': {
          width: 'calc(100% - 50px)',
          '& > p': {
            fontSize: '13px',
            color: '#5D5D5D',
            marginBottom: '8px',
            '& > a': {
              paddingLeft: '7px',
              wordBreak: 'break-all'
            },
            '& .date-notification': {
              fontSize: '11px',
              color: '#B4B4B4',
              '& i': {
                margin: '0 3px 0 5px'
              }
            }
          },
          '& .btns-wrapper': {
            display: 'flex'
          }
        }
      }
    }
  },
  'auth-wrapper': {
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'flex-end',
    '& .avatar-wrapper': {
      '& img': {
        width: '36px',
        height: '36px',
        objectFit: 'cover',
        borderRadius: '50%'
      }
    },
    '& .cart-wrapper': _objectSpread(_objectSpread({
      color: '#fff',
      position: 'relative',
      display: 'inline-flex',
      fontSize: '20px'
    }, static_styles_jss_mixins__WEBPACK_IMPORTED_MODULE_2__["MediaQuery"].down({
      fontSize: '18px'
    }).xss), {}, {
      '& .cart-count': {
        extend: 'count_extend'
      }
    }),
    '& .notifications-wrapper': _objectSpread({
      display: 'inline-flex',
      margin: '0 25px',
      color: '#fff',
      position: 'relative',
      cursor: 'pointer',
      fontSize: '20px',
      '&.notification-wrap-open': {
        '&::after': {
          content: '""',
          position: 'absolute',
          top: '50%',
          transform: 'translate(-50%, -50%)',
          left: '50%',
          width: 'calc(100% + 15px)',
          height: 'calc(100% + 15px)',
          background: static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$iconActiveBG,
          zIndex: '-1',
          borderRadius: '50%'
        }
      },
      '& .notifications-count': {
        extend: 'count_extend'
      }
    }, static_styles_jss_mixins__WEBPACK_IMPORTED_MODULE_2__["MediaQuery"].down({
      fontSize: '18px',
      margin: '0 15px'
    }).xss),
    '& .user-question': _objectSpread(_objectSpread({
      color: '#FFFFFF',
      fontSize: '13px',
      marginRight: '20px'
    }, static_styles_jss_mixins__WEBPACK_IMPORTED_MODULE_2__["MediaQuery"].down({
      fontSize: '12px'
    }).sm), static_styles_jss_mixins__WEBPACK_IMPORTED_MODULE_2__["MediaQuery"].down({
      display: 'none'
    }).xss),
    '& .language-wrap': _objectSpread(_objectSpread(_objectSpread({
      margin: '0 20px 0 0'
    }, static_styles_jss_mixins__WEBPACK_IMPORTED_MODULE_2__["MediaQuery"].between({
      margin: '0 10px 0 0'
    }).md_lg), static_styles_jss_mixins__WEBPACK_IMPORTED_MODULE_2__["MediaQuery"].down({
      marginRight: '10px'
    }).xs), {}, {
      '& img': {
        cursor: 'pointer',
        width: '22px',
        height: '22px',
        objectFit: 'cover',
        border: '2px solid #fff',
        borderRadius: '50%'
      },
      '&.language-wrap-open': {
        position: 'relative',
        display: 'flex',
        '&::after': {
          content: '""',
          position: 'absolute',
          top: '50%',
          transform: 'translate(-50%, -50%)',
          left: '50%',
          width: 'calc(100% + 15px)',
          height: 'calc(100% + 15px)',
          background: static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$iconActiveBG,
          zIndex: '-1',
          borderRadius: '50%'
        }
      }
    }),
    '& .user_icon': _objectSpread(_objectSpread(_objectSpread({
      color: '#fff',
      margin: '0 20px 0 0',
      display: 'flex',
      alignItems: 'center',
      textDecoration: 'none'
    }, static_styles_jss_mixins__WEBPACK_IMPORTED_MODULE_2__["MediaQuery"].between({
      margin: '0 10px 0 0'
    }).md_lg), static_styles_jss_mixins__WEBPACK_IMPORTED_MODULE_2__["MediaQuery"].down({
      marginRight: '0'
    }).xs), {}, {
      '& span': {
        fontSize: '20px'
      }
    }),
    '& .ads-button': _objectSpread(_objectSpread(_objectSpread({}, static_styles_jss_mixins__WEBPACK_IMPORTED_MODULE_2__["MediaQuery"].down({
      '&[data-appear=\"true\"]': {
        display: 'none'
      }
    }).sm), static_styles_jss_mixins__WEBPACK_IMPORTED_MODULE_2__["MediaQuery"].between({
      paddingLeft: '10px',
      paddingRight: '10px'
    }).md_lg), {}, {
      '& > i': {
        fontSize: '9px'
      }
    })
  }
}));

/***/ }),

/***/ "./Components/Shared/Header/elements/search/index.jsx":
/*!************************************************************!*\
  !*** ./Components/Shared/Header/elements/search/index.jsx ***!
  \************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ "react/jsx-dev-runtime");
/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! prop-types */ "prop-types");
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _styles__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./styles */ "./Components/Shared/Header/elements/search/styles.js");
/* harmony import */ var Components_Shared_UI__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! Components/Shared/UI */ "./Components/Shared/UI/index.js");

var _jsxFileName = "C:\\Users\\arthu\\OneDrive\\Desktop\\Important\\daser\\next\\sexjobs\\Components\\Shared\\Header\\elements\\search\\index.jsx";





const Search = props => {
  const {
    0: formHeight,
    1: setFormHeight
  } = Object(react__WEBPACK_IMPORTED_MODULE_1__["useState"])(0);
  const styles = Object(_styles__WEBPACK_IMPORTED_MODULE_3__["default"])({
    formHeight: formHeight
  });
  const formRef = Object(react__WEBPACK_IMPORTED_MODULE_1__["useRef"])();
  const {
    0: category,
    1: setCategory
  } = Object(react__WEBPACK_IMPORTED_MODULE_1__["useState"])('*');
  const categories = [{
    title: 'Alle categorieën',
    value: '*'
  }, {
    title: 'Events',
    value: 'events'
  }, {
    title: 'Dames van plazier',
    value: 'plaizer'
  }, {
    title: 'Message',
    value: 'message'
  }, {
    title: 'SM',
    value: 'sm'
  }];
  Object(react__WEBPACK_IMPORTED_MODULE_1__["useEffect"])(() => {
    if (formRef.current) setFormHeight(formRef.current.getBoundingClientRect().height);
  }, [formRef.current, props.openMobile]);
  return /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("div", {
    className: `${styles['search-wrapper']} ${props.openMobile ? 'opened_mobile' : ''}`,
    children: /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("form", {
      ref: formRef,
      className: "main-search-form",
      children: [/*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])(Components_Shared_UI__WEBPACK_IMPORTED_MODULE_4__["Input"], {
        className: "search-input",
        name: "location",
        type: "text" // value={88}
        ,
        fullWidth: true,
        placeholder: "Waar ben je naar op zoek?",
        size: "md"
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 33,
        columnNumber: 17
      }, undefined), /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])(Components_Shared_UI__WEBPACK_IMPORTED_MODULE_4__["Select"], {
        className: "search-select",
        disabled: false,
        disableScrollLock: false,
        width: '225',
        placeholder: "Alle categorie\xEBn",
        value: category,
        paperMarginTop: 4 // margin={[0, 10]}
        ,
        theme: 'light',
        handleChange: e => setCategory(e.target.value),
        options: categories,
        size: 'md'
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 41,
        columnNumber: 17
      }, undefined), /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])(Components_Shared_UI__WEBPACK_IMPORTED_MODULE_4__["Button"], {
        className: "search-button",
        icon: {
          className: 'icon-search',
          direction: 'left'
        } // margin={10}
        ,
        size: 'md',
        text: "Zoek",
        typeButton: "cta"
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 55,
        columnNumber: 17
      }, undefined)]
    }, void 0, true, {
      fileName: _jsxFileName,
      lineNumber: 32,
      columnNumber: 13
    }, undefined)
  }, void 0, false, {
    fileName: _jsxFileName,
    lineNumber: 31,
    columnNumber: 9
  }, undefined);
};

Search.propTypes = {
  openMobile: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.bool
};
/* harmony default export */ __webpack_exports__["default"] = (Search);

/***/ }),

/***/ "./Components/Shared/Header/elements/search/styles.js":
/*!************************************************************!*\
  !*** ./Components/Shared/Header/elements/search/styles.js ***!
  \************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var react_jss__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react-jss */ "react-jss");
/* harmony import */ var react_jss__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jss__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! static/styles/jss/variables */ "./static/styles/jss/variables.js");
/* harmony import */ var static_styles_jss_mixins__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! static/styles/jss/mixins */ "./static/styles/jss/mixins.js");
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }




/* harmony default export */ __webpack_exports__["default"] = (Object(react_jss__WEBPACK_IMPORTED_MODULE_0__["createUseStyles"])({
  'search-wrapper': _objectSpread(_objectSpread(_objectSpread({
    '-webkit-perspective': 1000,
    '-webkit-backface-visibility': 'hidden'
  }, static_styles_jss_mixins__WEBPACK_IMPORTED_MODULE_2__["MediaQuery"].down({
    marginTop: '20px'
  }).md), static_styles_jss_mixins__WEBPACK_IMPORTED_MODULE_2__["MediaQuery"].down({
    height: '0',
    transition: '.2s ease-in-out',
    overflow: 'hidden',
    marginTop: '0',
    zIndex: '-1',
    visibility: 'hidden',
    opacity: '0',
    '&.opened_mobile': {
      opacity: '1',
      zIndex: '1',
      visibility: 'visible',
      marginTop: '20px',
      height: props => props.formHeight
    }
  }).xs), {}, {
    '& .main-search-form': _objectSpread(_objectSpread({
      position: 'relative',
      display: 'flex',
      alignItems: 'center'
    }, static_styles_jss_mixins__WEBPACK_IMPORTED_MODULE_2__["MediaQuery"].down({
      flexDirection: 'column'
    }).xs), {}, {
      '& .search-input': {
        width: 'calc(100% - 225px) !important',
        '& input': _objectSpread({}, static_styles_jss_mixins__WEBPACK_IMPORTED_MODULE_2__["MediaQuery"].up({
          borderTopRightRadius: '0px',
          borderBottomRightRadius: '0px'
        }).xs)
      },
      '& .search-select': _objectSpread(_objectSpread({}, static_styles_jss_mixins__WEBPACK_IMPORTED_MODULE_2__["MediaQuery"].down({
        width: '100%',
        marginTop: '8px !important'
      }).xs), {}, {
        '& > div': _objectSpread(_objectSpread({
          borderLeft: '1px solid #D8D8D8'
        }, static_styles_jss_mixins__WEBPACK_IMPORTED_MODULE_2__["MediaQuery"].up({
          borderRadius: `0 ${static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$input.$radius} ${static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$input.$radius} 0`
        }).xs), {}, {
          '& .MuiSvgIcon-root': _objectSpread({
            top: 'calc(50% - 12px)',
            right: '4px',
            fontSize: '24px'
          }, static_styles_jss_mixins__WEBPACK_IMPORTED_MODULE_2__["MediaQuery"].up({
            right: '90px'
          }).xs)
        }),
        '& .MuiSelect-root': _objectSpread(_objectSpread({
          '& > div': {
            overflow: 'hidden'
          }
        }, static_styles_jss_mixins__WEBPACK_IMPORTED_MODULE_2__["MediaQuery"].up({
          paddingRight: '110px !important'
        }).xs), {}, {
          '&:hover': {
            boxShadow: 'none'
          }
        }),
        '&.select-opened': {
          '& > div.Mui-focused': {
            boxShadow: 'none !important',
            '& .MuiSelect-root': {
              boxShadow: 'none !important'
            }
          }
        }
      }),
      '& .search-button': _objectSpread(_objectSpread({
        zIndex: '222',
        right: '0'
      }, static_styles_jss_mixins__WEBPACK_IMPORTED_MODULE_2__["MediaQuery"].down({
        width: '100%',
        marginTop: '8px !important',
        marginRight: 'auto !important'
      }).xs), static_styles_jss_mixins__WEBPACK_IMPORTED_MODULE_2__["MediaQuery"].up({
        borderTopLeftRadius: 0,
        borderBottomLeftRadius: 0,
        position: 'absolute'
      }).xs)
    })
  })
}));

/***/ }),

/***/ "./Components/Shared/Header/index.jsx":
/*!********************************************!*\
  !*** ./Components/Shared/Header/index.jsx ***!
  \********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ "react/jsx-dev-runtime");
/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! prop-types */ "prop-types");
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _styles__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./styles */ "./Components/Shared/Header/styles.js");
/* harmony import */ var reactstrap__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! reactstrap */ "reactstrap");
/* harmony import */ var reactstrap__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(reactstrap__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _elements_search__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./elements/search */ "./Components/Shared/Header/elements/search/index.jsx");
/* harmony import */ var _elements_auth_panel__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./elements/auth-panel */ "./Components/Shared/Header/elements/auth-panel/index.jsx");
/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! next/link */ "./node_modules/next/link.js");
/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(next_link__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! next/router */ "next/router");
/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(next_router__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var hooks_use_scroll__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! hooks/use-scroll */ "./Hooks/use-scroll.js");
/* harmony import */ var hooks_use_media_device__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! hooks/use-media-device */ "./Hooks/use-media-device.js");
/* harmony import */ var react_redux__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! react-redux */ "react-redux");
/* harmony import */ var react_redux__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(react_redux__WEBPACK_IMPORTED_MODULE_11__);
/* harmony import */ var hoc_withReduxSaga__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! hoc/withReduxSaga */ "./HOC/withReduxSaga.js");
/* harmony import */ var store_actions__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! store/actions */ "./store/actions/index.js");
/* harmony import */ var reselect__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! reselect */ "reselect");
/* harmony import */ var reselect__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(reselect__WEBPACK_IMPORTED_MODULE_14__);
/* harmony import */ var store_reducers_base__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! store/reducers/base */ "./store/reducers/base.js");
/* harmony import */ var store_sagas_base__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! store/sagas/base */ "./store/sagas/base.js");
/* harmony import */ var redux_injectors__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! redux-injectors */ "redux-injectors");
/* harmony import */ var redux_injectors__WEBPACK_IMPORTED_MODULE_17___default = /*#__PURE__*/__webpack_require__.n(redux_injectors__WEBPACK_IMPORTED_MODULE_17__);

var _jsxFileName = "C:\\Users\\arthu\\OneDrive\\Desktop\\Important\\daser\\next\\sexjobs\\Components\\Shared\\Header\\index.jsx";


















const Header = props => {
  Object(redux_injectors__WEBPACK_IMPORTED_MODULE_17__["useInjectReducer"])({
    key: "base",
    reducer: store_reducers_base__WEBPACK_IMPORTED_MODULE_15__["default"]
  });
  Object(redux_injectors__WEBPACK_IMPORTED_MODULE_17__["useInjectSaga"])({
    key: "base",
    saga: store_sagas_base__WEBPACK_IMPORTED_MODULE_16__["default"]
  });
  const {
    deviceType,
    deviceSize,
    windowWidth
  } = Object(hooks_use_media_device__WEBPACK_IMPORTED_MODULE_10__["default"])();
  const {
    scrollDir,
    scrollY
  } = Object(hooks_use_scroll__WEBPACK_IMPORTED_MODULE_9__["useScrollDirection"])();
  const router = Object(next_router__WEBPACK_IMPORTED_MODULE_8__["useRouter"])();
  const headerRef = Object(react__WEBPACK_IMPORTED_MODULE_1__["useRef"])();
  const styles = Object(_styles__WEBPACK_IMPORTED_MODULE_3__["default"])();
  const {
    0: searchMobileToggle,
    1: setSearchMobileToggle
  } = Object(react__WEBPACK_IMPORTED_MODULE_1__["useState"])(false);
  const {
    0: headerHeight,
    1: setHeaderHeight
  } = Object(react__WEBPACK_IMPORTED_MODULE_1__["useState"])(0);
  const {
    0: isLogged,
    1: setIsLogged
  } = Object(react__WEBPACK_IMPORTED_MODULE_1__["useState"])(false); // Need to use as prop instead of state

  const toggleSearchBar = () => {
    setSearchMobileToggle(!searchMobileToggle);
  };

  Object(react__WEBPACK_IMPORTED_MODULE_1__["useEffect"])(() => {
    const handleRouteChange = (url, {
      shallow
    }) => {
      if (url === '/login') props.setPageName('login');else if (url === '/register') props.setPageName('register');else props.setPageName('');
      setSearchMobileToggle(false);
    };

    router.events.on('routeChangeComplete', handleRouteChange);
    return () => {
      router.events.off('routeChangeComplete', handleRouteChange);
    };
  }, []);
  Object(react__WEBPACK_IMPORTED_MODULE_1__["useEffect"])(() => {
    if ( true && headerRef.current) {
      const _height = headerRef.current.getBoundingClientRect().height;
      setHeaderHeight(_height);
      document.body.style.paddingTop = _height + 'px';
      headerRef.current.style.maxWidth = headerRef.current.parentNode.getBoundingClientRect().width + 'px';
    }
  }, [headerRef.current, props.pageName, windowWidth]);
  Object(react__WEBPACK_IMPORTED_MODULE_1__["useEffect"])(() => {
    if ( true && !props.pageName) {
      const isOpenMobile = searchMobileToggle ? headerRef.current.querySelector('form').getBoundingClientRect().height + 16
      /*MarginTop - absolute margin*/
      : 0;

      if (deviceType === 'mobile' && scrollDir) {
        if (scrollY > headerHeight + isOpenMobile && scrollDir === 'down') {
          headerRef.current.style.top = -headerHeight - isOpenMobile + 'px';
        }

        if (scrollY > headerHeight + isOpenMobile && scrollDir === 'up') {
          headerRef.current.style.position = 'fixed';
          headerRef.current.style.top = '0px';
        }

        if (scrollY === 0) headerRef.current.style.position = 'absolute';
      }
    }
  }, [scrollDir, scrollY, deviceType, headerRef.current, headerHeight, searchMobileToggle, props.pageName]);
  Object(react__WEBPACK_IMPORTED_MODULE_1__["useEffect"])(() => {
    if (router.pathname === '/login') props.setPageName('login');else if (router.pathname === '/register') props.setPageName('register');else props.setPageName('');
  }, [router]);
  return /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("header", {
    ref: headerRef,
    children: /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])(reactstrap__WEBPACK_IMPORTED_MODULE_4__["Container"], {
      children: /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])(reactstrap__WEBPACK_IMPORTED_MODULE_4__["Row"], {
        children: [/*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])(reactstrap__WEBPACK_IMPORTED_MODULE_4__["Col"], {
          xs: props.pageName ? 4 : 6,
          sm: 6,
          md: 6,
          lg: props.pageName ? 6 : 3,
          children: /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("div", {
            className: styles['logo-wrapper'],
            suppressHydrationWarning: true,
            children: [!props.pageName ? /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("span", {
              className: "icon-menu toggle-categories_menu",
              onClick: () => props.toggleMobileCategoriesMenu(true)
            }, void 0, false, {
              fileName: _jsxFileName,
              lineNumber: 89,
              columnNumber: 48
            }, undefined) : null, /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])(next_link__WEBPACK_IMPORTED_MODULE_7___default.a, {
              href: "/",
              prefetch: false,
              children: /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("a", {
                children: /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("img", {
                  alt: "logo",
                  src: "/images/logo2.svg"
                }, void 0, false, {
                  fileName: _jsxFileName,
                  lineNumber: 92,
                  columnNumber: 37
                }, undefined)
              }, void 0, false, {
                fileName: _jsxFileName,
                lineNumber: 91,
                columnNumber: 33
              }, undefined)
            }, void 0, false, {
              fileName: _jsxFileName,
              lineNumber: 90,
              columnNumber: 29
            }, undefined)]
          }, void 0, true, {
            fileName: _jsxFileName,
            lineNumber: 88,
            columnNumber: 25
          }, undefined)
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 87,
          columnNumber: 21
        }, undefined), !props.pageName ? /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])(reactstrap__WEBPACK_IMPORTED_MODULE_4__["Col"], {
          xs: {
            order: 'last',
            size: 12
          },
          lg: {
            order: 0,
            size: 6
          },
          children: /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])(_elements_search__WEBPACK_IMPORTED_MODULE_5__["default"], {
            openMobile: searchMobileToggle
          }, void 0, false, {
            fileName: _jsxFileName,
            lineNumber: 98,
            columnNumber: 25
          }, undefined)
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 97,
          columnNumber: 40
        }, undefined) : '', /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])(reactstrap__WEBPACK_IMPORTED_MODULE_4__["Col"], {
          xs: props.pageName ? 8 : 6,
          sm: 6,
          md: 6,
          lg: props.pageName ? 6 : 3,
          children: /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("div", {
            className: styles['mobile-toggle_search-bar'],
            suppressHydrationWarning: true,
            children: [!props.pageName && (deviceSize === 'xs' || deviceSize === 'xss') ? /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("span", {
              className: `icon-search ${searchMobileToggle ? 'opened-search-icon' : ''}`,
              onClick: toggleSearchBar
            }, void 0, false, {
              fileName: _jsxFileName,
              lineNumber: 102,
              columnNumber: 97
            }, undefined) : null, /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])(_elements_auth_panel__WEBPACK_IMPORTED_MODULE_6__["default"], {
              isLogged: isLogged,
              routePage: props.pageName
            }, void 0, false, {
              fileName: _jsxFileName,
              lineNumber: 103,
              columnNumber: 29
            }, undefined)]
          }, void 0, true, {
            fileName: _jsxFileName,
            lineNumber: 101,
            columnNumber: 25
          }, undefined)
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 100,
          columnNumber: 21
        }, undefined)]
      }, void 0, true, {
        fileName: _jsxFileName,
        lineNumber: 86,
        columnNumber: 17
      }, undefined)
    }, void 0, false, {
      fileName: _jsxFileName,
      lineNumber: 85,
      columnNumber: 13
    }, undefined)
  }, void 0, false, {
    fileName: _jsxFileName,
    lineNumber: 84,
    columnNumber: 9
  }, undefined);
};

Header.propTypes = {
  pageName: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.string,
  setPageName: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.func,
  toggleMobileCategoriesMenu: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.func
};
const mapStateToProps = Object(reselect__WEBPACK_IMPORTED_MODULE_14__["createStructuredSelector"])({
  categoriesMobileToggle: state => state.base.categoriesMobileToggle,
  pageName: state => state.base.pageName
});

const mapDispatchToProps = dispatch => {
  return {
    setPageName: value => {
      return dispatch(Object(store_actions__WEBPACK_IMPORTED_MODULE_13__["setPageName"])(value));
    },
    toggleMobileCategoriesMenu: value => {
      return dispatch(Object(store_actions__WEBPACK_IMPORTED_MODULE_13__["toggleCategoriesMenuMobile"])(value));
    }
  };
};

/* harmony default export */ __webpack_exports__["default"] = (Object(hoc_withReduxSaga__WEBPACK_IMPORTED_MODULE_12__["default"])(Object(react_redux__WEBPACK_IMPORTED_MODULE_11__["connect"])(mapStateToProps, mapDispatchToProps)(Header)));

/***/ }),

/***/ "./Components/Shared/Header/styles.js":
/*!********************************************!*\
  !*** ./Components/Shared/Header/styles.js ***!
  \********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var react_jss__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react-jss */ "react-jss");
/* harmony import */ var react_jss__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jss__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! static/styles/jss/variables */ "./static/styles/jss/variables.js");
/* harmony import */ var static_styles_jss_mixins__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! static/styles/jss/mixins */ "./static/styles/jss/mixins.js");
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }




/* harmony default export */ __webpack_exports__["default"] = (Object(react_jss__WEBPACK_IMPORTED_MODULE_0__["createUseStyles"])({
  '@global': {
    'header': _objectSpread(_objectSpread(_objectSpread({}, static_styles_jss_mixins__WEBPACK_IMPORTED_MODULE_2__["MediaQuery"].down({
      overflow: 'hidden'
    }).xs), static_styles_jss_mixins__WEBPACK_IMPORTED_MODULE_2__["MediaQuery"].up({
      position: 'fixed'
    }).sm), {}, {
      top: '0',
      position: 'absolute',
      transition: 'top 0.3s',
      zIndex: '999',
      left: '0',
      width: '100%',
      padding: '17px 0',
      background: 'linear-gradient(180deg, #0558A8 0%, #003F8F 100%)',
      borderBottom: `2px solid ${static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$baseRed}`,
      '& .row': {
        alignItems: 'center'
      }
    })
  },
  'mobile-toggle_search-bar': _objectSpread({
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'flex-end',
    '& > span': {
      fontSize: '20px',
      color: '#fff',
      marginRight: '15px',
      cursor: 'pointer',
      '&.opened-search-icon': {
        position: 'relative',
        '&::after': {
          content: '""',
          position: 'absolute',
          top: '50%',
          transform: 'translate(-50%, -50%)',
          left: '50%',
          width: 'calc(100% + 15px)',
          height: 'calc(100% + 15px)',
          background: static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$iconActiveBG,
          zIndex: '-1',
          borderRadius: '50%'
        }
      }
    }
  }, static_styles_jss_mixins__WEBPACK_IMPORTED_MODULE_2__["MediaQuery"].down({
    '& > span': {
      marginRight: '10px'
    }
  }).xss),
  'logo-wrapper': _objectSpread(_objectSpread(_objectSpread({
    display: 'flex',
    alignItems: 'center',
    '& .toggle-categories_menu': {
      display: 'none'
    }
  }, static_styles_jss_mixins__WEBPACK_IMPORTED_MODULE_2__["MediaQuery"].down({
    '& .toggle-categories_menu': {
      marginRight: '15px'
    }
  }).xs), static_styles_jss_mixins__WEBPACK_IMPORTED_MODULE_2__["MediaQuery"].down({
    '& .toggle-categories_menu': {
      display: 'block',
      fontSize: '20px',
      color: '#fff',
      cursor: 'pointer',
      marginRight: '10px'
    }
  }).sm), {}, {
    '& > a': {
      display: 'block',
      '& img': _objectSpread(_objectSpread({
        width: '180px',
        height: '47px'
      }, static_styles_jss_mixins__WEBPACK_IMPORTED_MODULE_2__["MediaQuery"].between({
        width: '133px',
        height: '38px'
      }).xss_xs), static_styles_jss_mixins__WEBPACK_IMPORTED_MODULE_2__["MediaQuery"].down({
        width: '101px',
        height: '27px'
      }).xss)
    }
  })
}));

/***/ }),

/***/ "./Components/Shared/UI/Button/index.jsx":
/*!***********************************************!*\
  !*** ./Components/Shared/UI/Button/index.jsx ***!
  \***********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ "react/jsx-dev-runtime");
/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! prop-types */ "prop-types");
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _styles__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./styles */ "./Components/Shared/UI/Button/styles.js");
/* harmony import */ var utils_handlers__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! utils/handlers */ "./utils/handlers.js");

var _jsxFileName = "C:\\Users\\arthu\\OneDrive\\Desktop\\Important\\daser\\next\\sexjobs\\Components\\Shared\\UI\\Button\\index.jsx";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }





const canUseDOM = false;
react__WEBPACK_IMPORTED_MODULE_1___default.a.useLayoutEffect = canUseDOM ? react__WEBPACK_IMPORTED_MODULE_1__["useLayoutEffect"] : react__WEBPACK_IMPORTED_MODULE_1__["useEffect"];

const Button = props => {
  const buttonRef = Object(react__WEBPACK_IMPORTED_MODULE_1__["useRef"])();
  const styles = Object(_styles__WEBPACK_IMPORTED_MODULE_3__["default"])();
  Object(react__WEBPACK_IMPORTED_MODULE_1__["useEffect"])(() => {
    if (props.attr && buttonRef.current) {
      Object.keys(props.attr).map(name => {
        buttonRef.current.setAttribute(name, props.attr[name]);
      });
    }
  }, [props.attr]); // Get position of main Wrapper

  const generateMarginDiv = Object(react__WEBPACK_IMPORTED_MODULE_1__["useCallback"])(() => Object(utils_handlers__WEBPACK_IMPORTED_MODULE_4__["UiGenerateMargin"])(props.margin, props.direction), [props.direction, props.margin]);
  const inlineStyles = Object(react__WEBPACK_IMPORTED_MODULE_1__["useMemo"])(() => {
    return _objectSpread(_objectSpread(_objectSpread(_objectSpread({
      border: props.border,
      background: props.background,
      color: props.color,
      fontSize: props.fontSize + 'px'
    }, !props.fullWidth && props.width && {
      width: props.width + 'px'
    }), props.fullWidth && {
      width: `calc(100% - ${Object(utils_handlers__WEBPACK_IMPORTED_MODULE_4__["UIGetMarginLeftRight"])(props.margin)}px)`,
      display: 'flex'
    }), generateMarginDiv()), props.customStyles);
  }, [props.direction, props.margin, props.border, props.color, props.fontSize, props.fullWidth, props.width, props.customStyles, props.background]);
  const icon = Object(react__WEBPACK_IMPORTED_MODULE_1__["useMemo"])(() => {
    if (props.icon && props.icon.loading) return /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("i", {
      className: 'loading-icon'
    }, void 0, false, {
      fileName: _jsxFileName,
      lineNumber: 47,
      columnNumber: 54
    }, undefined);
    if (props.icon && !props.icon.hasOwnProperty('loading')) return /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("i", {
      className: props.icon.className
    }, void 0, false, {
      fileName: _jsxFileName,
      lineNumber: 48,
      columnNumber: 73
    }, undefined);
  }, [props.icon]);
  const generateClassName = Object(react__WEBPACK_IMPORTED_MODULE_1__["useMemo"])(() => {
    return `${props.icon ? 'custom-icon-dir-' + (props.icon.direction || 'right') : ''} ${styles['btn-global']} ${styles['btn-' + props.size]} ${props.hover || ''} ${styles['btn-' + props.typeButton]} ${props.className}`;
  }, [props.icon, props.size, props.hover, props.typeButton, props.className]);
  return /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("button", {
    ref: props.refBind || buttonRef,
    className: generateClassName,
    style: inlineStyles,
    onClick: props.onClick,
    type: props.type,
    disabled: props.disabled,
    children: [props.text, icon]
  }, void 0, true, {
    fileName: _jsxFileName,
    lineNumber: 56,
    columnNumber: 9
  }, undefined);
};

Button.defaultProps = {
  size: 'md',
  type: 'button',
  fullWidth: false,
  fontSize: 13,
  margin: 0,
  disabled: false,
  customStyles: {},
  typeButton: 'default',
  className: ''
};
Button.propTypes = {
  className: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.string,
  typeButton: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.string,
  direction: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.string,
  attr: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.object,
  icon: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.object,
  disabled: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.bool,
  background: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.string,
  border: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.string,
  hover: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.string,
  fullWidth: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.bool,
  size: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.string,
  type: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.string,
  width: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.number,
  fontSize: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.number,
  margin: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.oneOfType([prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.array, prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.number]),
  text: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.string,
  customStyles: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.object,
  refBind: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.object,
  onClick: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.func
};
/* harmony default export */ __webpack_exports__["default"] = (/*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.memo(Button));

/***/ }),

/***/ "./Components/Shared/UI/Button/styles.js":
/*!***********************************************!*\
  !*** ./Components/Shared/UI/Button/styles.js ***!
  \***********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var react_jss__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react-jss */ "react-jss");
/* harmony import */ var react_jss__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jss__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! static/styles/jss/variables */ "./static/styles/jss/variables.js");
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }



/* harmony default export */ __webpack_exports__["default"] = (Object(react_jss__WEBPACK_IMPORTED_MODULE_0__["createUseStyles"])({
  '@keyframes spin': {
    from: {
      transform: 'rotate(0deg)'
    },
    to: {
      transform: 'rotate(360deg)'
    }
  },
  'btn-global': {
    whiteSpace: 'nowrap',
    boxSizing: 'border-box',
    display: 'flex',
    alignItems: 'center',
    cursor: 'pointer',
    outline: 'none',
    color: '#fff',
    backgroundColor: static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$baseColor,
    border: '2px solid red',
    borderRadius: static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$button.$radius,
    justifyContent: 'center',
    margin: 0,
    padding: static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$button.$padding,
    transition: '.1s',
    '&.custom-icon-dir-right': {
      '& i[class^=\"icon-\"], & .loading-icon': {
        marginLeft: '7px'
      }
    },
    '&.custom-icon-dir-left': {
      flexDirection: 'row-reverse',
      '& i[class^=\"icon-\"], & .loading-icon': {
        marginRight: '7px'
      }
    },
    '& .loading-icon': {
      width: '13px',
      height: '13px',
      boxSizing: 'border-box',
      border: '1px solid #f3f3f3',
      borderRadius: '50%',
      borderRightColor: '#555',
      animation: '$spin 1s linear infinite'
    }
  },
  'btn-default': {
    backgroundColor: static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$button.$default.$bg,
    border: static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$button.$default.$border,
    color: static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$button.$default.$color,
    '&:hover': _objectSpread({}, static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$button.$default.$hover),
    '&:disabled': _objectSpread({
      pointerEvents: 'none'
    }, static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$button.$default.$disabled)
  },
  'btn-cta': {
    background: static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$button.$cta.$bg,
    border: static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$button.$cta.$border,
    color: static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$button.$cta.$color,
    '&:hover': _objectSpread({}, static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$button.$cta.$hover),
    '&:disabled': _objectSpread({
      pointerEvents: 'none'
    }, static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$button.$cta.$disabled)
  },
  'btn-primary': {
    backgroundColor: static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$button.$primary.$bg,
    border: static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$button.$primary.$border,
    color: static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$button.$primary.$color,
    '&:hover': _objectSpread({}, static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$button.$primary.$hover),
    '&:disabled': _objectSpread({
      pointerEvents: 'none'
    }, static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$button.$primary.$disabled)
  },
  'btn-alt': {
    backgroundColor: static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$button.$alt.$bg,
    border: static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$button.$alt.$border,
    color: static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$button.$alt.$color,
    '&:hover': _objectSpread({}, static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$button.$alt.$hover),
    '&:disabled': _objectSpread({
      pointerEvents: 'none'
    }, static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$button.$alt.$disabled)
  },
  'btn-white-bg': {
    backgroundColor: static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$button.$whiteBG.$bg,
    border: static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$button.$whiteBG.$border,
    color: static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$button.$whiteBG.$color,
    '&:hover': _objectSpread({}, static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$button.$whiteBG.$hover),
    '&:disabled': _objectSpread({
      pointerEvents: 'none'
    }, static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$button.$whiteBG.$disabled)
  },
  'btn-alert': {
    backgroundColor: static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$button.$alert.$bg,
    border: static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$button.$alert.$border,
    color: static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$button.$alert.$color,
    '&:hover': _objectSpread({}, static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$button.$alert.$hover),
    '&:disabled': _objectSpread({
      pointerEvents: 'none'
    }, static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$button.$alert.$disabled)
  },
  'hover-from-transparent': {
    '&:hover': {
      backgroundColor: static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$baseColor + ' !important',
      color: '#fff !important'
    }
  },
  'btn-md': {
    padding: static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$button.$md.$padding
  },
  'btn-sm': {
    padding: static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$button.$sm.$padding
  },
  'btn-xs': {
    padding: static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$button.$xs.$padding
  }
}));

/***/ }),

/***/ "./Components/Shared/UI/DatePicker/elements/actions.jsx":
/*!**************************************************************!*\
  !*** ./Components/Shared/UI/DatePicker/elements/actions.jsx ***!
  \**************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ "react/jsx-dev-runtime");
/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! prop-types */ "prop-types");
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_2__);


var _jsxFileName = "C:\\Users\\arthu\\OneDrive\\Desktop\\Important\\daser\\next\\sexjobs\\Components\\Shared\\UI\\DatePicker\\elements\\actions.jsx";



const Actions = props => {
  return /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["Fragment"], {
    children: [/*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("button", {
      onClick: props.onClick,
      children: "Cancel"
    }, void 0, false, {
      fileName: _jsxFileName,
      lineNumber: 7,
      columnNumber: 13
    }, undefined), /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("button", {
      onClick: props.onSelect,
      className: props.disableSelect ? 'disable-select' : '',
      children: "Select"
    }, void 0, false, {
      fileName: _jsxFileName,
      lineNumber: 8,
      columnNumber: 13
    }, undefined)]
  }, void 0, true);
};

Actions.propTypes = {
  disableSelect: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.bool
};
/* harmony default export */ __webpack_exports__["default"] = (Actions);

/***/ }),

/***/ "./Components/Shared/UI/DatePicker/index.jsx":
/*!***************************************************!*\
  !*** ./Components/Shared/UI/DatePicker/index.jsx ***!
  \***************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ "react/jsx-dev-runtime");
/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react-dom */ "react-dom");
/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react_dom__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! prop-types */ "prop-types");
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _styles__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./styles */ "./Components/Shared/UI/DatePicker/styles.js");
/* harmony import */ var utils_handlers__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! utils/handlers */ "./utils/handlers.js");
/* harmony import */ var hooks_use_media_device__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! hooks/use-media-device */ "./Hooks/use-media-device.js");
/* harmony import */ var _date_io_date_fns__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @date-io/date-fns */ "@date-io/date-fns");
/* harmony import */ var _date_io_date_fns__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(_date_io_date_fns__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! date-fns */ "date-fns");
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(date_fns__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var _material_ui_pickers__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @material-ui/pickers */ "@material-ui/pickers");
/* harmony import */ var _material_ui_pickers__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(_material_ui_pickers__WEBPACK_IMPORTED_MODULE_9__);
/* harmony import */ var _material_ui_core__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @material-ui/core */ "@material-ui/core");
/* harmony import */ var _material_ui_core__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(_material_ui_core__WEBPACK_IMPORTED_MODULE_10__);
/* harmony import */ var _makeStylesUI__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../makeStylesUI */ "./Components/Shared/UI/makeStylesUI.js");
/* harmony import */ var _elements_actions__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./elements/actions */ "./Components/Shared/UI/DatePicker/elements/actions.jsx");
/* harmony import */ var static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! static/styles/jss/variables */ "./static/styles/jss/variables.js");

var _jsxFileName = "C:\\Users\\arthu\\OneDrive\\Desktop\\Important\\daser\\next\\sexjobs\\Components\\Shared\\UI\\DatePicker\\index.jsx";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }














const canUseDOM = false;
react__WEBPACK_IMPORTED_MODULE_1___default.a.useLayoutEffect = canUseDOM ? react__WEBPACK_IMPORTED_MODULE_1__["useLayoutEffect"] : react__WEBPACK_IMPORTED_MODULE_1__["useEffect"];

const convertDateToDays = date => {
  if (Object(date_fns__WEBPACK_IMPORTED_MODULE_8__["isYesterday"])(date)) return 'Yesterday';
  if (Object(date_fns__WEBPACK_IMPORTED_MODULE_8__["isToday"])(date)) return 'Today';
  if (Object(date_fns__WEBPACK_IMPORTED_MODULE_8__["isTomorrow"])(date)) return 'Tomorrow';else return null;
};

const DatePicker = props => {
  const {
    deviceType
  } = Object(hooks_use_media_device__WEBPACK_IMPORTED_MODULE_6__["default"])();
  const {
    0: isMobile,
    1: setIsMobile
  } = Object(react__WEBPACK_IMPORTED_MODULE_1__["useState"])(false);
  const {
    0: disablePrevBtn,
    1: setDisablePrevBtn
  } = Object(react__WEBPACK_IMPORTED_MODULE_1__["useState"])(false);
  const {
    0: selectedDate,
    1: setSelectedDate
  } = Object(react__WEBPACK_IMPORTED_MODULE_1__["useState"])({
    changed: null,
    selected: null
  });
  const {
    0: datePickerOwnError,
    1: setDatePickerOwnError
  } = Object(react__WEBPACK_IMPORTED_MODULE_1__["useState"])(null);
  const {
    0: marginBottom,
    1: setMarginBottom
  } = Object(react__WEBPACK_IMPORTED_MODULE_1__["useState"])('0px');
  const {
    0: isOpen,
    1: setIsOpen
  } = Object(react__WEBPACK_IMPORTED_MODULE_1__["useState"])(false);
  const parentRef = Object(react__WEBPACK_IMPORTED_MODULE_1__["useRef"])();
  const errorRef = Object(react__WEBPACK_IMPORTED_MODULE_1__["useRef"])();
  const bottomWrapRef = Object(react__WEBPACK_IMPORTED_MODULE_1__["useRef"])();
  const inputWrapperRef = Object(react__WEBPACK_IMPORTED_MODULE_1__["useRef"])();
  const styles = Object(_styles__WEBPACK_IMPORTED_MODULE_4__["default"])(); // Get position of main Wrapper

  const generateMarginDiv = Object(react__WEBPACK_IMPORTED_MODULE_1__["useCallback"])(() => Object(utils_handlers__WEBPACK_IMPORTED_MODULE_5__["UiGenerateMargin"])(props.margin, props.direction), [props.direction, props.margin]);
  const currentDate = Object(react__WEBPACK_IMPORTED_MODULE_1__["useCallback"])(() => {
    return selectedDate.selected || props.value || new Date();
  }, [selectedDate, props.value]);
  Object(react__WEBPACK_IMPORTED_MODULE_1__["useEffect"])(() => {
    if (selectedDate.selected) {
      datePickerOwnError && setDatePickerOwnError(null);
    }
  }, [selectedDate.selected]);
  const sharedPropsOfClasses = Object(react__WEBPACK_IMPORTED_MODULE_1__["useMemo"])(() => {
    const backgroundColor = props.theme === 'dark' ? static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_13__["default"].$input.$theme.$dark : static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_13__["default"].$input.$theme.$light;
    const boxShadow = props.theme === 'dark' ? static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_13__["default"].$select.$dark.$borderColor + ' 0px 0px 0px 1px inset' : 'none';
    return {
      backgroundColor,
      boxShadow,
      marginBottom: marginBottom,
      isDark: props.theme === 'dark',
      valueColor: props.theme === 'dark' ? static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_13__["default"].$datepicker.$dark.$textColor : static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_13__["default"].$datepicker.$textColor,
      actionsColor: props.theme === 'dark' ? static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_13__["default"].$datepicker.$dark.$actionsColor : static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_13__["default"].$datepicker.$actionsColor,
      weekColor: props.theme === 'dark' ? static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_13__["default"].$datepicker.$dark.$weekColor : static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_13__["default"].$datepicker.$weekColor,
      placeholderColor: props.theme === 'dark' ? static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_13__["default"].$select.$dark.$emptyTextColor : static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_13__["default"].$select.$emptyTextColor,
      size: props.size,
      isOpened: isOpen,
      iconColor: props.theme === 'dark' ? static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_13__["default"].$input.$theme.$darkColor : '#000',
      dayNearly: convertDateToDays(currentDate())
    };
  }, [isOpen, props.size, props.theme, currentDate, marginBottom, selectedDate, props.value]);
  const classesDatePaper = Object(_makeStylesUI__WEBPACK_IMPORTED_MODULE_11__["usePickerPaperStyles"])(sharedPropsOfClasses);
  const classesLabel = Object(_makeStylesUI__WEBPACK_IMPORTED_MODULE_11__["useLabelStyles"])(_objectSpread(_objectSpread({}, sharedPropsOfClasses), {}, {
    color: props.label && props.label.color || '#fff'
  }));
  const classesDatePicker = Object(_makeStylesUI__WEBPACK_IMPORTED_MODULE_11__["useDatePickerStyles"])(sharedPropsOfClasses);
  Object(react__WEBPACK_IMPORTED_MODULE_1__["useEffect"])(() => {
    // Detect if device is Mobile
    if (deviceType === 'mobile') {
      setIsMobile(true);
    } else setIsMobile(false);
  }, [deviceType]);
  Object(react__WEBPACK_IMPORTED_MODULE_1__["useEffect"])(() => {
    // Calculate Margin Bottom
    const bottomElementHeight = errorRef.current ? errorRef.current.offsetHeight + 2 : bottomWrapRef.current ? bottomWrapRef.current.offsetHeight + 2 : 0;
    setMarginBottom(bottomElementHeight
    /*marginTopBottom*/
    + 'px');
  }, [props.required, props.errors, errorRef.current, props.helperText, bottomWrapRef.current, datePickerOwnError]);
  Object(react__WEBPACK_IMPORTED_MODULE_1__["useEffect"])(() => {
    // Disable the prev/next buttons
    const date = currentDate();

    if (Object(date_fns__WEBPACK_IMPORTED_MODULE_8__["isToday"])(date) || Object(date_fns__WEBPACK_IMPORTED_MODULE_8__["isPast"])(date) && props.shouldDisablePastDate) {
      setDisablePrevBtn(true);
    } else setDisablePrevBtn(false);
  }, [selectedDate, currentDate, props.value, props.shouldDisablePastDate]);

  const handleDateChange = date => {
    setSelectedDate({
      selected: selectedDate.selected,
      changed: date
    });
  };

  const inlineStylesParent = Object(react__WEBPACK_IMPORTED_MODULE_1__["useMemo"])(() => {
    // Set inline styles on the main Wrapper
    return _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, generateMarginDiv()), {}, {
      width: props.fullWidth ? `calc(100% - ${Object(utils_handlers__WEBPACK_IMPORTED_MODULE_5__["UIGetMarginLeftRight"])(props.margin)}px)` : props.width
    }, props.label && {
      display: 'flex',
      flexDirection: 'column'
    }), !props.label && {
      display: 'block'
    }), props.customStylesDiv);
  }, [props.customStylesDiv, props.label, props.fullWidth, props.direction, props.width, props.margin]);

  const setBottomActions = container => {
    // The DatePicker doesn't have cancel or ok button for mobile that is why we should make by custom
    const cancelPicker = () => {
      setIsOpen(false);
    };

    const selectPicker = () => {
      if (!selectedDate.changed) {
        setSelectedDate({
          selected: props.value || new Date(),
          changed: null
        });
      } else {
        setSelectedDate({
          selected: selectedDate.changed,
          changed: selectedDate.changed
        });
      }

      setIsOpen(false);
    };

    if (isOpen && container) {
      const actionsWrap = document.createElement('DIV');
      actionsWrap.className = 'datepicker-actions-wrap';
      container.appendChild(actionsWrap);
      react_dom__WEBPACK_IMPORTED_MODULE_2___default.a.render( /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])(_elements_actions__WEBPACK_IMPORTED_MODULE_12__["default"], {
        onClick: () => cancelPicker(),
        onSelect: () => selectPicker()
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 160,
        columnNumber: 17
      }, undefined), container.querySelector('.datepicker-actions-wrap'));
    }
  };

  const generateClassNameParent = Object(react__WEBPACK_IMPORTED_MODULE_1__["useMemo"])(() => {
    return `${styles[props.theme ? 'theme-' + props.theme : '']} ${'wrapper-' + props.size} ${styles['input-wrap']} ${props.errors ? 'error-field' : ''}`;
  }, [props.errors, props.theme, props.size]);
  const arrows = Object(react__WEBPACK_IMPORTED_MODULE_1__["useMemo"])(() => {
    const changeDirection = dir => {
      const date = Object(date_fns__WEBPACK_IMPORTED_MODULE_8__["addDays"])(currentDate(), dir === 'prev' ? -1 : 1);
      if (!Object(date_fns__WEBPACK_IMPORTED_MODULE_8__["isToday"])(date) && Object(date_fns__WEBPACK_IMPORTED_MODULE_8__["isPast"])(date) && props.shouldDisablePastDate && dir !== 'next') return;
      setSelectedDate({
        selected: date,
        changed: date
      });
    };

    return /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("div", {
      className: 'arrows-slide-datepicker',
      children: [/*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("svg", {
        onClick: () => changeDirection('prev'),
        className: `left-icon ${disablePrevBtn ? 'disable-btn' : ''}`,
        focusable: "false",
        viewBox: "0 0 24 24",
        "aria-hidden": "true",
        children: /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("path", {
          d: "M7 10l5 5 5-5z"
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 183,
          columnNumber: 21
        }, undefined)
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 182,
        columnNumber: 17
      }, undefined), /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("svg", {
        onClick: () => changeDirection('next'),
        className: 'right-icon',
        focusable: "false",
        viewBox: "0 0 24 24",
        "aria-hidden": "true",
        children: /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("path", {
          d: "M7 10l5 5 5-5z"
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 186,
          columnNumber: 21
        }, undefined)
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 185,
        columnNumber: 17
      }, undefined)]
    }, void 0, true, {
      fileName: _jsxFileName,
      lineNumber: 181,
      columnNumber: 13
    }, undefined);
  }, [currentDate, disablePrevBtn, selectedDate.selected, props.value, props.options]);
  const bottomWrap = Object(react__WEBPACK_IMPORTED_MODULE_1__["useMemo"])(() => {
    if ((props.helperText || props.required) && !props.errors && !datePickerOwnError) {
      const text = props.helperText || (props.required ? 'Required *' : '');
      return /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("div", {
        className: styles['bottom-wrap'],
        ref: bottomWrapRef,
        children: text && /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("p", {
          className: "helper-text",
          children: text
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 197,
          columnNumber: 30
        }, undefined)
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 196,
        columnNumber: 17
      }, undefined);
    } else if (props.errors || datePickerOwnError) return /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("span", {
      ref: errorRef,
      className: styles['error-line'],
      children: props.errors || datePickerOwnError
    }, void 0, false, {
      fileName: _jsxFileName,
      lineNumber: 201,
      columnNumber: 13
    }, undefined);
  }, [props.helperText, props.errors, errorRef, datePickerOwnError]);
  return /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("div", {
    style: inlineStylesParent,
    className: generateClassNameParent,
    ref: parentRef,
    children: /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])(_material_ui_pickers__WEBPACK_IMPORTED_MODULE_9__["MuiPickersUtilsProvider"], {
      utils: _date_io_date_fns__WEBPACK_IMPORTED_MODULE_7___default.a,
      children: /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("div", {
        ref: inputWrapperRef,
        className: 'input-element-wrapper',
        style: props.customStylesInput,
        children: [/*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])(_material_ui_pickers__WEBPACK_IMPORTED_MODULE_9__["KeyboardDatePicker"], {
          InputAdornmentProps: {
            position: "start"
          },
          keyboardIcon: /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("span", {
            className: 'icon-calendar'
          }, void 0, false, {
            fileName: _jsxFileName,
            lineNumber: 213,
            columnNumber: 39
          }, undefined),
          classes: classesDatePicker,
          onError: err => err && setDatePickerOwnError(err),
          InputLabelProps: {
            disableAnimation: true,
            variant: 'filled',
            focused: false,
            shrink: true,
            classes: classesLabel
          },
          placeholder: props.format,
          disableToolbar: true,
          KeyboardButtonProps: {
            onFocus: e => {
              setIsOpen(true);
            },
            'aria-label': 'change date'
          },
          PopoverProps: {
            key: selectedDate.changed,
            anchorOrigin: {
              vertical: "bottom",
              horizontal: "left"
            },
            transformOrigin: {
              vertical: "top",
              horizontal: "left"
            },
            getContentAnchorEl: null,
            classes: classesDatePaper,
            className: isMobile ? 'mobile-mode_datePicker' : '',
            disableRestoreFocus: true,
            onEnter: e => setBottomActions(e),
            onClose: () => {
              setIsOpen(false);
            }
          },
          InputProps: {
            endAdornment: props.slideByArrows ? /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])(_material_ui_core__WEBPACK_IMPORTED_MODULE_10__["InputAdornment"], {
              position: "end",
              children: arrows
            }, void 0, false, {
              fileName: _jsxFileName,
              lineNumber: 251,
              columnNumber: 66
            }, undefined) : null,
            onFocus: () => {
              setIsOpen(true);
            }
          },
          disablePast: props.shouldDisablePastDate,
          fullWidth: true,
          disabled: props.disabled,
          open: isOpen,
          inputVariant: "filled",
          variant: 'inline',
          format: props.format,
          margin: "normal",
          label: props.label && props.label.title + (props.required ? ' *' : ''),
          value: currentDate(),
          onChange: handleDateChange
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 211,
          columnNumber: 21
        }, undefined), bottomWrap]
      }, void 0, true, {
        fileName: _jsxFileName,
        lineNumber: 210,
        columnNumber: 17
      }, undefined)
    }, void 0, false, {
      fileName: _jsxFileName,
      lineNumber: 209,
      columnNumber: 13
    }, undefined)
  }, void 0, false, {
    fileName: _jsxFileName,
    lineNumber: 206,
    columnNumber: 9
  }, undefined);
};

DatePicker.defaultProps = {
  size: 'md',
  type: 'text',
  fullWidth: false,
  margin: 0,
  required: false,
  theme: 'light',
  customStylesInput: {},
  customStylesDiv: {},
  format: 'MM/dd/yyyy',
  width: 310,
  shouldDisablePastDate: true,
  slideByArrows: false
};
DatePicker.propTypes = {
  format: prop_types__WEBPACK_IMPORTED_MODULE_3___default.a.string,
  required: prop_types__WEBPACK_IMPORTED_MODULE_3___default.a.bool,
  disabled: prop_types__WEBPACK_IMPORTED_MODULE_3___default.a.bool,
  slideByArrows: prop_types__WEBPACK_IMPORTED_MODULE_3___default.a.bool,
  theme: prop_types__WEBPACK_IMPORTED_MODULE_3___default.a.string,
  helperText: prop_types__WEBPACK_IMPORTED_MODULE_3___default.a.string,
  direction: prop_types__WEBPACK_IMPORTED_MODULE_3___default.a.string,
  fullWidth: prop_types__WEBPACK_IMPORTED_MODULE_3___default.a.bool,
  size: prop_types__WEBPACK_IMPORTED_MODULE_3___default.a.string,
  refBind: prop_types__WEBPACK_IMPORTED_MODULE_3___default.a.any,
  label: prop_types__WEBPACK_IMPORTED_MODULE_3___default.a.object,
  width: prop_types__WEBPACK_IMPORTED_MODULE_3___default.a.oneOfType([prop_types__WEBPACK_IMPORTED_MODULE_3___default.a.string, prop_types__WEBPACK_IMPORTED_MODULE_3___default.a.number]),
  errors: prop_types__WEBPACK_IMPORTED_MODULE_3___default.a.string,
  change: prop_types__WEBPACK_IMPORTED_MODULE_3___default.a.func,
  customStylesDiv: prop_types__WEBPACK_IMPORTED_MODULE_3___default.a.object,
  customStylesInput: prop_types__WEBPACK_IMPORTED_MODULE_3___default.a.object,
  shouldDisablePastDate: prop_types__WEBPACK_IMPORTED_MODULE_3___default.a.bool,
  margin: prop_types__WEBPACK_IMPORTED_MODULE_3___default.a.oneOfType([prop_types__WEBPACK_IMPORTED_MODULE_3___default.a.array, prop_types__WEBPACK_IMPORTED_MODULE_3___default.a.number]),
  value: prop_types__WEBPACK_IMPORTED_MODULE_3___default.a.oneOfType([prop_types__WEBPACK_IMPORTED_MODULE_3___default.a.string, prop_types__WEBPACK_IMPORTED_MODULE_3___default.a.object])
};
/* harmony default export */ __webpack_exports__["default"] = (/*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.memo(DatePicker));

/***/ }),

/***/ "./Components/Shared/UI/DatePicker/styles.js":
/*!***************************************************!*\
  !*** ./Components/Shared/UI/DatePicker/styles.js ***!
  \***************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var react_jss__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react-jss */ "react-jss");
/* harmony import */ var react_jss__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jss__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! static/styles/jss/variables */ "./static/styles/jss/variables.js");


/* harmony default export */ __webpack_exports__["default"] = (Object(react_jss__WEBPACK_IMPORTED_MODULE_0__["createUseStyles"])({
  'input-wrap': {
    userSelect: 'none',
    '& .input-element-wrapper': {
      position: 'relative',
      fontFamily: 'Arial',
      '& .MuiFormHelperText-root': {
        display: 'none'
      }
    },
    '&.wrapper-md': {
      '& .arrows-slide-datepicker': {
        '& svg': {
          width: '30px'
        }
      }
    },
    '&.wrapper-sm': {
      '& .arrows-slide-datepicker': {
        '& svg': {
          width: '25px'
        }
      }
    },
    '&.wrapper-xsm': {
      '& .arrows-slide-datepicker': {
        '& svg': {
          width: '20px'
        }
      }
    }
  },
  'bottom-wrap': {
    lineHeight: '14px',
    position: 'absolute',
    bottom: '0px',
    fontSize: '11px',
    color: '#C7C7C7',
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'space-between',
    width: '100%',
    '& .helper-text': {
      margin: '0px'
    }
  },
  'error-line': {
    fontFamily: 'Arial',
    position: 'absolute',
    left: '0',
    bottom: '0px',
    display: 'inline-block',
    transition: 'all 400ms cubic-bezier(0.175, 0.885, 0.32, 1.275)',
    fontSize: '11px',
    lineHeight: '14px',
    color: static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$danger,
    width: '100%'
  },
  'theme-light': {},
  'theme-dark': {}
}));

/***/ }),

/***/ "./Components/Shared/UI/Dialog/index.jsx":
/*!***********************************************!*\
  !*** ./Components/Shared/UI/Dialog/index.jsx ***!
  \***********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ "react/jsx-dev-runtime");
/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! prop-types */ "prop-types");
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _styles__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./styles */ "./Components/Shared/UI/Dialog/styles.js");
/* harmony import */ var _material_ui_core_Dialog__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @material-ui/core/Dialog */ "@material-ui/core/Dialog");
/* harmony import */ var _material_ui_core_Dialog__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_material_ui_core_Dialog__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _material_ui_core_DialogActions__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @material-ui/core/DialogActions */ "@material-ui/core/DialogActions");
/* harmony import */ var _material_ui_core_DialogActions__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_material_ui_core_DialogActions__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _material_ui_core_DialogContent__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @material-ui/core/DialogContent */ "@material-ui/core/DialogContent");
/* harmony import */ var _material_ui_core_DialogContent__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_material_ui_core_DialogContent__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var _material_ui_core_DialogTitle__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @material-ui/core/DialogTitle */ "@material-ui/core/DialogTitle");
/* harmony import */ var _material_ui_core_DialogTitle__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(_material_ui_core_DialogTitle__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var _makeStylesUI__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../makeStylesUI */ "./Components/Shared/UI/makeStylesUI.js");

var _jsxFileName = "C:\\Users\\arthu\\OneDrive\\Desktop\\Important\\daser\\next\\sexjobs\\Components\\Shared\\UI\\Dialog\\index.jsx";









const SimpleDialog = props => {
  const styles = Object(_styles__WEBPACK_IMPORTED_MODULE_3__["default"])();
  const classesDialog = Object(_makeStylesUI__WEBPACK_IMPORTED_MODULE_8__["useDialogStyles"])();
  return /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])(_material_ui_core_Dialog__WEBPACK_IMPORTED_MODULE_4___default.a, {
    classes: classesDialog,
    open: props.open,
    onClose: props.onClose,
    "aria-labelledby": "alert-dialog-title",
    "aria-describedby": "alert-dialog-description",
    fullWidth: props.fullWidth,
    maxWidth: props.maxWidth,
    children: [props.title ? /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])(_material_ui_core_DialogTitle__WEBPACK_IMPORTED_MODULE_7___default.a, {
      id: "alert-dialog-title",
      children: props.title
    }, void 0, false, {
      fileName: _jsxFileName,
      lineNumber: 26,
      columnNumber: 28
    }, undefined) : null, /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])(_material_ui_core_DialogContent__WEBPACK_IMPORTED_MODULE_6___default.a, {
      children: props.children
    }, void 0, false, {
      fileName: _jsxFileName,
      lineNumber: 27,
      columnNumber: 13
    }, undefined), props.actions ? /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])(_material_ui_core_DialogActions__WEBPACK_IMPORTED_MODULE_5___default.a, {
      "data-vertical": props.actionsVertical,
      children: [props.actions.cancel ? /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("button", {
        onClick: props.onClose,
        children: props.actions.cancel
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 31,
        columnNumber: 41
      }, undefined) : null, props.actions.ok ? /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("button", {
        onClick: props.onOk,
        disabled: props.disableOkBtn,
        children: props.actions.ok
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 34,
        columnNumber: 37
      }, undefined) : null]
    }, void 0, true, {
      fileName: _jsxFileName,
      lineNumber: 30,
      columnNumber: 30
    }, undefined) : null]
  }, void 0, true, {
    fileName: _jsxFileName,
    lineNumber: 17,
    columnNumber: 9
  }, undefined);
};

SimpleDialog.defaultProps = {
  open: false,
  fullWidth: false,
  maxWidth: 'xs',
  actionsVertical: false,
  disableOkBtn: false
};
SimpleDialog.propTypes = {
  actionsVertical: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.bool,
  open: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.bool,
  disableOkBtn: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.bool,
  maxWidth: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.string,
  fullWidth: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.bool,
  onClose: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.func,
  onOk: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.func,
  title: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.string,
  actions: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.shape({
    cancel: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.string,
    ok: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.string
  })
};
/* harmony default export */ __webpack_exports__["default"] = (/*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.memo(SimpleDialog));

/***/ }),

/***/ "./Components/Shared/UI/Dialog/styles.js":
/*!***********************************************!*\
  !*** ./Components/Shared/UI/Dialog/styles.js ***!
  \***********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var react_jss__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react-jss */ "react-jss");
/* harmony import */ var react_jss__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jss__WEBPACK_IMPORTED_MODULE_0__);

/* harmony default export */ __webpack_exports__["default"] = (Object(react_jss__WEBPACK_IMPORTED_MODULE_0__["createUseStyles"])({}));

/***/ }),

/***/ "./Components/Shared/UI/Image/index.jsx":
/*!**********************************************!*\
  !*** ./Components/Shared/UI/Image/index.jsx ***!
  \**********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ "react/jsx-dev-runtime");
/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var hooks_use_image__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! hooks/use-image */ "./Hooks/use-image.js");
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! prop-types */ "prop-types");
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_3__);

var _jsxFileName = "C:\\Users\\arthu\\OneDrive\\Desktop\\Important\\daser\\next\\sexjobs\\Components\\Shared\\UI\\Image\\index.jsx";




const Image = ({
  src,
  alt = "",
  defaultSrc
}) => {
  const {
    loaded,
    error
  } = Object(hooks_use_image__WEBPACK_IMPORTED_MODULE_2__["default"])({
    src: src || defaultSrc
  });
  const {
    0: srcAvatar,
    1: setSrcAvatar
  } = Object(react__WEBPACK_IMPORTED_MODULE_1__["useState"])(null);
  const {
    0: srcDefault,
    1: setSrcDefault
  } = Object(react__WEBPACK_IMPORTED_MODULE_1__["useState"])(false);
  Object(react__WEBPACK_IMPORTED_MODULE_1__["useEffect"])(() => {
    if (loaded) {
      if (!src) setSrcDefault(true);
      setSrcAvatar(src || defaultSrc);
    }

    if (error) {
      setSrcAvatar('/images/notFound.png');
    }
  }, [loaded, src, error]);
  return /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("img", {
    className: `${!loaded && !error ? 'till-loading' : ''} ${error ? 'not-found' : ''} ${srcDefault ? 'default-avatar' : ''}`,
    src: srcAvatar || '/images/loading.gif',
    alt: alt || 'dynamic-image-hok'
  }, void 0, false, {
    fileName: _jsxFileName,
    lineNumber: 20,
    columnNumber: 9
  }, undefined);
};

Image.propTypes = {
  src: prop_types__WEBPACK_IMPORTED_MODULE_3___default.a.string.isRequired,
  alt: prop_types__WEBPACK_IMPORTED_MODULE_3___default.a.string,
  defaultSrc: prop_types__WEBPACK_IMPORTED_MODULE_3___default.a.string
};
/* harmony default export */ __webpack_exports__["default"] = (/*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.memo(Image));

/***/ }),

/***/ "./Components/Shared/UI/Input/index.jsx":
/*!**********************************************!*\
  !*** ./Components/Shared/UI/Input/index.jsx ***!
  \**********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ "react/jsx-dev-runtime");
/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! prop-types */ "prop-types");
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _styles__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./styles */ "./Components/Shared/UI/Input/styles.js");
/* harmony import */ var static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! static/styles/jss/variables */ "./static/styles/jss/variables.js");
/* harmony import */ var _material_ui_core_TextField__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @material-ui/core/TextField */ "@material-ui/core/TextField");
/* harmony import */ var _material_ui_core_TextField__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_material_ui_core_TextField__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var utils_handlers__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! utils/handlers */ "./utils/handlers.js");

var _jsxFileName = "C:\\Users\\arthu\\OneDrive\\Desktop\\Important\\daser\\next\\sexjobs\\Components\\Shared\\UI\\Input\\index.jsx";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }







const canUseDOM = false;
react__WEBPACK_IMPORTED_MODULE_1___default.a.useLayoutEffect = canUseDOM ? react__WEBPACK_IMPORTED_MODULE_1__["useLayoutEffect"] : react__WEBPACK_IMPORTED_MODULE_1__["useEffect"];

const Input = props => {
  const {
    0: inputStyleProps,
    1: setInputStyleProps
  } = Object(react__WEBPACK_IMPORTED_MODULE_1__["useState"])({});
  const {
    0: inputRef,
    1: setInputRef
  } = Object(react__WEBPACK_IMPORTED_MODULE_1__["useState"])(null);
  const {
    0: limitCount,
    1: setLimitCount
  } = Object(react__WEBPACK_IMPORTED_MODULE_1__["useState"])(0);
  const {
    0: icon,
    1: setIcon
  } = Object(react__WEBPACK_IMPORTED_MODULE_1__["useState"])({});
  const {
    0: passwordTypeToggle,
    1: setPasswordTypeToggle
  } = Object(react__WEBPACK_IMPORTED_MODULE_1__["useState"])(false);
  const styles = Object(_styles__WEBPACK_IMPORTED_MODULE_3__["default"])(inputStyleProps, {
    link: true
  });
  const parentRef = Object(react__WEBPACK_IMPORTED_MODULE_1__["useRef"])();
  const errorRef = Object(react__WEBPACK_IMPORTED_MODULE_1__["useRef"])();
  const bottomWrapRef = Object(react__WEBPACK_IMPORTED_MODULE_1__["useRef"])();
  const labelRef = Object(react__WEBPACK_IMPORTED_MODULE_1__["useRef"])();
  const inputWrapperRef = Object(react__WEBPACK_IMPORTED_MODULE_1__["useRef"])();
  Object(react__WEBPACK_IMPORTED_MODULE_1__["useLayoutEffect"])(() => {
    // Set Inline Styles and send to JSS
    setInputStyleProps(_objectSpread(_objectSpread({}, inputStyleProps), {}, {
      backgroundColor: [props.customStylesInput.background, '!important'],
      border: props.customStylesInput.border,
      labelColor: props.label && props.label.color || static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_4__["default"].$input.$baseColor,
      iconTop: calculateIconPosition() - static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_4__["default"].$input.$iconSize / 2 + 'px',
      marginBottom: calculateMarginBottom()
    }));
  }, [props.customStylesInput, props.errors, props.label, labelRef.current, errorRef.current, bottomWrapRef.current, icon, props.textArea, props.helperText, props.maxCounter, props.transparentInput, props.required]);
  Object(react__WEBPACK_IMPORTED_MODULE_1__["useEffect"])(() => {
    // Find and Set ref of Input/Textarea element
    if (parentRef.current) {
      setInputRef(parentRef.current.querySelector(props.textArea ? 'textarea' : 'input'));
    }
  }, [parentRef.current, props]);
  Object(react__WEBPACK_IMPORTED_MODULE_1__["useEffect"])(() => {
    // Set/Remove events
    if (parentRef.current && inputRef) {
      setAttributes();

      for (let event = 0; event < props.events.length; event++) {
        // Add Event Listeners
        inputRef.addEventListener(props.events[event], props['on' + props.events[event].replace(props.events[event].charAt(0), props.events[event].charAt(0).toUpperCase())]);
      }
    }

    return () => {
      if (parentRef.current && inputRef) {
        // Remove Event Listeners
        for (let event = 0; event < props.events.length; event++) {
          inputRef.removeEventListener(props.events[event], props['on' + props.events[event].replace(props.events[event].charAt(0), props.events[event].charAt(0).toUpperCase())]);
        }
      }
    };
  }, [props.events, inputRef]);
  Object(react__WEBPACK_IMPORTED_MODULE_1__["useEffect"])(() => {
    // Value Override
    if (inputRef && !!props.value) {
      inputRef.value = props.value;
    }
  }, [props.value, inputRef]);
  Object(react__WEBPACK_IMPORTED_MODULE_1__["useEffect"])(() => {
    if (parentRef.current) setAttributes();
  }, [props.attr, inputRef]);
  Object(react__WEBPACK_IMPORTED_MODULE_1__["useEffect"])(() => {
    if (props.value) {
      setLimitCount(String(props.value).length);
    }

    if (props.maxCounter && inputRef) {
      inputRef.setAttribute('maxlength', props.maxCounter);
      inputRef.addEventListener('keyup', counterCalculator);
    }

    return () => {
      inputRef && inputRef.removeEventListener('keyup', counterCalculator);
    };
  }, [props.maxCounter, props.value, inputRef]);
  Object(react__WEBPACK_IMPORTED_MODULE_1__["useEffect"])(() => {
    // Set Icon
    if (props.readonly) {
      setIcon({
        className: 'icon-lock'
      });
    } else if (props.errors) {
      setIcon({
        className: 'error-icon icon-warning'
      });
    } else if (props.type === 'password' && props.passwordEye) {
      setIcon({
        className: 'icon-eye toggle-password' + (passwordTypeToggle ? ' icon-eye-blocked' : ''),
        onClick: togglePassword
      });
    } else if (props.icon) {
      setIcon(_objectSpread({
        className: props.icon.className + (props.icon.onClick ? ' clickable' : '')
      }, props.icon.onClick && {
        onClick: props.icon.onClick
      }));
    } else {
      setIcon({});
    }
  }, [props.passwordEye, props.type, props.icon, props.errors, passwordTypeToggle, props.readonly]);
  const togglePassword = Object(react__WEBPACK_IMPORTED_MODULE_1__["useCallback"])(() => {
    // Toggle Password Eye Icon
    setPasswordTypeToggle(!passwordTypeToggle);
  }, [props.passwordEye, passwordTypeToggle]);
  const calculateMarginBottom = Object(react__WEBPACK_IMPORTED_MODULE_1__["useCallback"])(() => {
    // Calculate Margin Bottom
    const bottomElementHeight = errorRef.current ? errorRef.current.offsetHeight + 2 : bottomWrapRef.current ? bottomWrapRef.current.offsetHeight + 2 : 0;
    return bottomElementHeight
    /*marginTopBottom*/
    - (props.transparentInput ? static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_4__["default"].$input.$transparentInput.$errorDefaultHeight - 4 : 0) + 'px';
  }, [props.required, props.errors, props.transparentInput, errorRef.current, props.helperText, props.maxCounter, bottomWrapRef.current]);
  const calculateIconPosition = Object(react__WEBPACK_IMPORTED_MODULE_1__["useCallback"])(() => {
    // Calculate Icon's position
    if (inputRef) {
      return inputRef.offsetTop + (props.textArea ? 12
      /*TextArea's middle padding*/
      : inputRef.offsetHeight / 2);
    }
  }, [props.errors, inputRef, props.label, icon, props.textArea, props.transparentInput]);
  const setAttributes = Object(react__WEBPACK_IMPORTED_MODULE_1__["useCallback"])(() => {
    // Set all attributes
    if (props.attr && inputRef) {
      Object.keys(props.attr).map(name => {
        inputRef.setAttribute(name, props.attr[name]);
      });
    }
  }, [props.attr, props.textArea, inputRef]);
  const counterCalculator = Object(react__WEBPACK_IMPORTED_MODULE_1__["useCallback"])(() => {
    // Count the limited characters
    setLimitCount(inputRef.value.length);
  }, [inputRef]); // Get position of main Wrapper

  const generateMarginDiv = Object(react__WEBPACK_IMPORTED_MODULE_1__["useCallback"])(() => Object(utils_handlers__WEBPACK_IMPORTED_MODULE_6__["UiGenerateMargin"])(props.margin, props.direction), [props.direction, props.margin]);
  const inlineStylesParent = Object(react__WEBPACK_IMPORTED_MODULE_1__["useMemo"])(() => {
    // Set inline styles on the main Wrapper
    return _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, generateMarginDiv()), {}, {
      width: props.fullWidth ? `calc(100% - ${Object(utils_handlers__WEBPACK_IMPORTED_MODULE_6__["UIGetMarginLeftRight"])(props.margin)}px)` : props.width
    }, props.label && {
      display: 'flex',
      flexDirection: 'column'
    }), !props.label && {
      display: 'block'
    }), props.customStylesDiv);
  }, [props.customStylesDiv, props.label, props.fullWidth, props.direction, props.width, props.margin]);
  const icons = Object(react__WEBPACK_IMPORTED_MODULE_1__["useMemo"])(() => {
    if (icon.className) return /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("i", {
      className: `${icon.className} input-icon`,
      onClick: icon.onClick
    }, void 0, false, {
      fileName: _jsxFileName,
      lineNumber: 175,
      columnNumber: 13
    }, undefined);
  }, [props.icon, icon]);
  const generateClassNameParent = Object(react__WEBPACK_IMPORTED_MODULE_1__["useMemo"])(() => {
    return `${props.className} ${props.likeMaterialInput ? 'material-input-wrapper' : ''} ${props.transparentInput ? styles['transparent-input-wrap'] : ''} ${styles[props.theme ? 'theme-' + props.theme : '']} ${styles['input-wrap']} ${icon.className ? styles['with-icon'] : ''} ${props.errors ? 'error-field' : ''} ${props.type === "checkbox" ? styles['wrap-with-checkbox'] : props.type === "radio" ? styles['wrap-with-radio'] : ''}`;
  }, [props.type, props.errors, props.theme, props.transparentInput, props.className, icon]);
  const label = Object(react__WEBPACK_IMPORTED_MODULE_1__["useMemo"])(() => {
    if (props.label) {
      const textLabel = props.label.title + (props.required ? ' *' : '');

      if ((props.type === 'radio' || props.type === 'checkbox') && inputRef && inputWrapperRef.current && labelRef.current) {
        labelRef.current.innerHTML = textLabel;
        inputWrapperRef.current.innerHTML = '';
        const checkBoxWrap = document.createElement('SPAN');
        checkBoxWrap.className = 'checkbox-wrap';
        inputWrapperRef.current.appendChild(inputRef);
        inputWrapperRef.current.appendChild(checkBoxWrap);
        labelRef.current.appendChild(inputWrapperRef.current);
      }

      return /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("label", {
        ref: labelRef,
        htmlFor: props.type === "checkbox" ? props.name : null,
        className: 'label-' + props.size,
        children: textLabel
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 196,
        columnNumber: 17
      }, undefined);
    }
  }, [props.required, props.label, inputWrapperRef.current, inputRef]);
  const bottomWrap = Object(react__WEBPACK_IMPORTED_MODULE_1__["useMemo"])(() => {
    if ((props.maxCounter || props.helperText || props.required) && !props.errors) {
      const text = props.helperText || (props.required ? 'Required *' : '');
      return /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("div", {
        className: "bottom-wrap",
        ref: bottomWrapRef,
        children: [text && /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("p", {
          className: "helper-text",
          children: text
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 210,
          columnNumber: 30
        }, undefined), props.maxCounter && /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("span", {
          className: "counter",
          children: [limitCount, "/", props.maxCounter]
        }, void 0, true, {
          fileName: _jsxFileName,
          lineNumber: 211,
          columnNumber: 42
        }, undefined)]
      }, void 0, true, {
        fileName: _jsxFileName,
        lineNumber: 209,
        columnNumber: 17
      }, undefined);
    } else if (props.errors) return /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("span", {
      ref: errorRef,
      className: 'error-line',
      children: props.errors
    }, void 0, false, {
      fileName: _jsxFileName,
      lineNumber: 215,
      columnNumber: 13
    }, undefined);
  }, [props.helperText, props.errors, props.maxCounter, errorRef, limitCount, props.required]);
  return /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("div", {
    style: inlineStylesParent,
    className: generateClassNameParent,
    ref: parentRef,
    children: [label, /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("div", {
      ref: inputWrapperRef,
      className: 'input-element-wrapper',
      children: [props.textArea ? /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("textarea", {
        name: props.name,
        cols: props.textArea.cols || 30,
        rows: props.textArea.rows || 5,
        className: 'textarea-' + props.size,
        style: props.customStylesInput,
        ref: props.refBind,
        placeholder: props.placeholder || 'Input text...',
        readOnly: props.readonly,
        tabIndex: props.readonly ? -1 : 0
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 225,
        columnNumber: 35
      }, undefined) : props.likeMaterialInput ? /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])(_material_ui_core_TextField__WEBPACK_IMPORTED_MODULE_5___default.a, {
        readOnly: props.readonly,
        disabled: props.disabled,
        placeholder: props.placeholder || '',
        className: 'input-' + props.size,
        ref: props.refBind,
        type: props.type,
        name: props.name,
        style: props.customStylesInput
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 235,
        columnNumber: 58
      }, undefined) : /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("input", {
        tabIndex: props.readonly ? -1 : 0,
        readOnly: props.readonly,
        style: props.customStylesInput,
        name: props.name,
        className: 'input-' + props.size,
        ref: props.refBind,
        type: passwordTypeToggle && 'text' || props.type,
        id: props.type === "checkbox" ? props.name : props.id,
        disabled: props.disabled,
        placeholder: props.placeholder || ''
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 244,
        columnNumber: 22
      }, undefined), icons]
    }, void 0, true, {
      fileName: _jsxFileName,
      lineNumber: 224,
      columnNumber: 13
    }, undefined), bottomWrap]
  }, void 0, true, {
    fileName: _jsxFileName,
    lineNumber: 220,
    columnNumber: 9
  }, undefined);
};

Input.defaultProps = {
  size: 'md',
  type: 'text',
  fullWidth: false,
  events: [],
  margin: 0,
  required: false,
  readonly: false,
  transparentInput: false,
  theme: 'light',
  customStylesInput: {},
  customStylesDiv: {},
  className: ''
};
Input.propTypes = {
  className: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.string,
  theme: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.string,
  readonly: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.bool,
  likeMaterialInput: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.bool,
  transparentInput: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.bool,
  helperText: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.string,
  direction: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.string,
  textArea: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.object,
  required: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.bool,
  passwordEye: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.bool,
  fullWidth: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.bool,
  maxCounter: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.number,
  size: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.string,
  id: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.string,
  refBind: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.any,
  name: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.string,
  label: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.object,
  type: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.string,
  width: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.oneOfType([prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.string, prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.number]),
  errors: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.string,
  disabled: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.bool,
  events: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.array,
  icon: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.object,
  customStylesDiv: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.object,
  customStylesInput: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.object,
  margin: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.oneOfType([prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.array, prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.number]),
  attr: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.object,
  value: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.oneOfType([prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.string, prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.number]),
  placeholder: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.string
};
/* harmony default export */ __webpack_exports__["default"] = (/*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.memo(Input));

/***/ }),

/***/ "./Components/Shared/UI/Input/styles.js":
/*!**********************************************!*\
  !*** ./Components/Shared/UI/Input/styles.js ***!
  \**********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var react_jss__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react-jss */ "react-jss");
/* harmony import */ var react_jss__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jss__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! static/styles/jss/variables */ "./static/styles/jss/variables.js");
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }



/* harmony default export */ __webpack_exports__["default"] = (Object(react_jss__WEBPACK_IMPORTED_MODULE_0__["createUseStyles"])({
  'input-styles_extend': {
    fontFamily: 'Arial',
    boxSizing: 'border-box',
    width: '100%',
    transition: 'all 400ms cubic-bezier(0.04, 1.1, 1, 0.99)',
    position: 'relative',
    borderRadius: static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$input.$radius,
    border: 'none',
    zIndex: 2,
    display: 'flex',
    '&:hover': _objectSpread({}, static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$input.$hover),
    '&:focus': _objectSpread({}, static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$input.$focus),
    '&::-webkit-input-placeholder': {
      color: static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$input.$placeholderColor
    },
    '&:read-only': {
      backgroundColor: static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$input.$readOnly,
      pointerEvents: 'none'
    }
  },
  'radio-checkbox_extend': {
    '& label': {
      paddingBottom: '0 !important',
      marginBottom: '0 !important',
      fontSize: static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$input.$fontSize,
      display: 'inline-flex',
      flexDirection: 'row-reverse',
      alignItems: 'center',
      cursor: 'pointer',
      '& .checkbox-wrap': {
        display: 'flex',
        marginRight: '13px'
      }
    },
    '& input': {
      opacity: '0',
      position: 'absolute',
      zIndex: '-1'
    },
    marginBottom: static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$input.$marginBottom,
    display: 'flex',
    flexDirection: 'row-reverse !important',
    alignItems: 'center',
    '& label.label-md': {
      '& .checkbox-wrap': {
        width: '18px !important',
        height: '18px'
      }
    },
    '& label.label-sm': {
      '& .checkbox-wrap': {
        width: '14px !important',
        height: '14px'
      }
    }
  },
  'input-wrap': {
    userSelect: 'none',
    '&.material-input-wrapper': {
      '& .MuiFormControl-root': {
        width: '100%'
      },
      '& .MuiInputBase-root': {
        fontSize: '15px'
      },
      '& .MuiInputBase-root.Mui-disabled': {
        backgroundColor: 'rgba(0,0,0,0.04)',
        '&::before': {
          borderBottom: '1px solid rgba(0, 0, 0, 0.42)'
        }
      },
      '& .MuiInput-underline:not(.Mui-disabled):after': {
        borderBottom: '2px solid #3378D1'
      },
      '& .MuiInput-underline:not(.Mui-disabled):before': {
        borderBottom: '2px solid #D8D8D8'
      },
      '& .MuiInput-underline:hover:not(.Mui-disabled):before': {
        borderBottom: '2px solid #D8D8D8'
      }
    },
    position: 'relative',
    width: 'fit-content',
    minWidth: 'fit-content',
    fontFamily: 'Arial',
    height: 'fit-content',
    '& label': {
      fontWeight: '600',
      paddingBottom: '7px',
      color: props => props.labelColor
    },
    '& .input-icon': {
      position: 'absolute',
      right: '7px',
      zIndex: '22',
      fontSize: static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$input.$iconSize + 'px',
      top: props => props.iconTop
    },
    '& .error-line': {
      fontFamily: 'Arial',
      position: 'absolute',
      left: '0',
      bottom: '0px',
      display: 'inline-block',
      transition: 'all 400ms cubic-bezier(0.175, 0.885, 0.32, 1.275)',
      fontSize: '11px',
      lineHeight: '14px',
      color: static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$danger,
      width: '100%'
    },
    // Helper Text
    '& .bottom-wrap': {
      lineHeight: '14px',
      position: 'absolute',
      bottom: '0px',
      fontSize: '11px',
      color: '#C7C7C7',
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'space-between',
      width: '100%',
      '& .helper-text': {
        margin: '0px'
      },
      '& .counter': {
        marginLeft: 'auto'
      }
    },
    '&:not(.material-input-wrapper)': {
      '& .input-element-wrapper:hover input': _objectSpread({}, static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$input.$hover),
      // Input
      '& input': {
        extend: 'input-styles_extend',
        marginBottom: props => props.marginBottom,
        backgroundColor: props => props.backgroundColor,
        border: props => props.border
      },
      '& input[type=\"number\"]::-webkit-outer-spin-button, & input[type=\"number\"]::-webkit-inner-spin-button': {
        '-webkit-appearance': 'none',
        margin: '10px'
      },
      '& input[type=\"number\"]': {
        '-moz-appearance': 'textfield'
      },
      '& input[type=\"checkbox\"], & input[type=\"radio\"]': {
        width: 'auto !important',
        cursor: 'pointer',
        margin: '0',
        minWidth: 'fit-content !important',
        padding: '0 !important'
      },
      '& input:disabled': {
        backgroundColor: static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$input.$disabledColor
      },
      '& input[type=\"color\"]': {
        // todo need to know if we will have an input color or no?
        padding: static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$input.$padding
      }
    },
    '& input.input-md': {
      padding: static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$input.$md.$padding,
      fontSize: static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$input.$md.$fontSize + 'px'
    },
    '& input.input-sm': {
      fontSize: static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$input.$sm.$fontSize + 'px',
      padding: static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$input.$sm.$padding
    },
    '& input.input-xsm': {
      padding: static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$input.$xsm.$padding,
      fontSize: static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$input.$xsm.$fontSize + 'px'
    },
    //textarea
    '& textarea': {
      extend: 'input-styles_extend',
      marginBottom: props => props.marginBottom,
      backgroundColor: props => props.backgroundColor,
      border: props => props.border,
      resize: 'none',
      '&::-webkit-scrollbar': {
        width: '5px',
        backgroundColor: 'rgb(196 50 50 / 0%)'
      },
      '&::-webkit-scrollbar-track': {
        '-webkit-box-shadow': 'rgb(108 81 81 / 30%) 0px 0px 6px inset',
        borderRadius: '4px',
        margin: '1px'
      },
      '&::-webkit-scrollbar-thumb': {
        borderRadius: '10px',
        '-webkit-box-shadow': 'rgb(212 134 134 / 30%) 0px 0px 6px inset'
      }
    },
    '& textarea:disabled': {
      backgroundColor: static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$input.$disabledColor
    },
    '& textarea.textarea-md': {
      padding: static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$input.$md.$padding,
      fontSize: static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$input.$md.$fontSize + 'px'
    },
    '& textarea.textarea-xsm': {
      padding: static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$input.$xsm.$padding,
      fontSize: static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$input.$xsm.$fontSize + 'px'
    },
    '& textarea.textarea-sm': {
      fontSize: static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$input.$sm.$fontSize + 'px',
      padding: static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$input.$sm.$padding
    },
    '& label.label-md': {
      fontSize: static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$input.$md.$fontSize + 'px'
    },
    '& label.label-sm': {
      fontSize: static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$input.$sm.$fontSize + 'px'
    },
    '& label.label-xsm': {
      fontSize: static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$input.$xsm.$fontSize + 'px'
    },
    '&.error-field': {
      '& label': {
        color: static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$danger + ' !important'
      },
      '& .input-element-wrapper input, & .input-element-wrapper textarea': {
        marginBottom: props => props.marginBottom,
        boxShadow: '0 0 1px 1px ' + static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$danger + ' inset !important',
        paddingRight: '25px !important'
      },
      '& i.error-icon': {
        color: static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$danger + ' !important'
      }
    }
  },
  'with-icon': {
    '& input, & textarea': {
      paddingRight: '25px !important'
    },
    '& i[class^=\"icon-\"]': {
      '&.toggle-password': {
        cursor: 'pointer'
      },
      '&.clickable': {
        cursor: 'pointer'
      },
      color: static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$input.$iconColor
    }
  },
  'wrap-with-checkbox': {
    '&:not(.material-input-wrapper)': {
      extend: 'radio-checkbox_extend',
      '& .checkbox-wrap': {
        position: 'relative',
        '&::before': {
          display: 'none',
          content: '""',
          left: '5px',
          top: '0px',
          width: '6px',
          height: '12px',
          border: 'solid white',
          borderWidth: '0 2px 2px 0',
          '-webkit-transform': 'rotate(45deg)',
          '-ms-transform': 'rotate(45deg)',
          transform: 'rotate(45deg)',
          position: 'absolute',
          zIndex: '2'
        },
        '&::after': {
          content: '""',
          position: 'absolute',
          border: '2px solid ' + static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$input.$checkbox.$borderColor,
          width: '100%',
          height: '100%',
          boxSizing: 'border-box',
          borderRadius: static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$input.$radius
        }
      }
    }
  },
  'wrap-with-radio': {
    '&:not(.material-input-wrapper)': {
      extend: 'radio-checkbox_extend',
      '& .checkbox-wrap': {
        position: 'relative',
        display: 'inline-flex',
        alignItems: 'center',
        justifyContent: 'center',
        '&::before': {
          content: '""',
          border: '2px solid ' + static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$input.$checkbox.$borderColor,
          width: '100%',
          height: '100%',
          borderRadius: '50%',
          boxSizing: 'border-box'
        },
        '&::after': {
          display: 'none',
          content: '""',
          position: 'absolute',
          width: '10px',
          height: '10px',
          borderRadius: '50%',
          boxSizing: 'border-box'
        }
      }
    }
  },
  'theme-light': {
    '&:not(.material-input-wrapper)': {
      '& textarea': {
        '&::-webkit-scrollbar-track': {
          backgroundColor: '#EFEFEF'
        },
        '&::-webkit-scrollbar-thumb': {
          backgroundColor: 'rgb(199, 199, 199)'
        }
      },
      '& input, & textarea': {
        backgroundColor: static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$input.$theme.$light
      },
      // CheckBox
      '& input[type=\"checkbox\"]:checked + .checkbox-wrap::before': {
        display: 'block'
      },
      '& input[type=\"checkbox\"]:checked + .checkbox-wrap::after': {
        backgroundColor: static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$input.$checkbox.$onLightBG,
        borderColor: static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$input.$checkbox.$onLightBG
      },
      // Radio
      '& input[type=\"radio\"]:checked + .checkbox-wrap::before': {
        borderColor: static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$input.$checkbox.$onLightBG
      },
      '& input[type=\"radio\"]:checked + .checkbox-wrap::after': {
        display: 'block',
        backgroundColor: static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$input.$checkbox.$onLightBG
      }
    }
  },
  'theme-dark': {
    '&:not(.material-input-wrapper)': {
      '& textarea': {
        '&::-webkit-scrollbar-track': {
          backgroundColor: '#07224D'
        },
        '&::-webkit-scrollbar-thumb': {
          backgroundColor: '#98A4B3'
        }
      },
      '& input, & textarea': {
        backgroundColor: static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$input.$theme.$dark,
        color: static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$input.$theme.$darkColor
      },
      '& .input-icon': {
        color: static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$input.$theme.$darkColor + '!important'
      },
      // CheckBox
      '& input[type=\"checkbox\"]:checked + .checkbox-wrap::before': {
        display: 'block',
        borderColor: static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$baseColor
      },
      '& input[type=\"checkbox\"]:checked + .checkbox-wrap::after': {
        backgroundColor: static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$input.$checkbox.$onDarkBG,
        borderColor: static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$input.$checkbox.$onDarkBG
      },
      // Radio
      '& input[type=\"radio\"]:checked + .checkbox-wrap::before': {
        borderColor: static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$input.$checkbox.$onDarkBG
      },
      '& input[type=\"radio\"]:checked + .checkbox-wrap::after': {
        display: 'block',
        backgroundColor: static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$input.$checkbox.$onDarkBG
      }
    }
  },
  'transparent-input-wrap': {
    '&:not(.material-input-wrapper)': {
      flexDirection: 'row !important',
      alignItems: 'center',
      borderBottom: '2px solid ' + static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$input.$transparentInput.$borderColor,
      padding: '4px 0',
      height: 'auto',
      '& .input-icon': {
        color: static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$input.$theme.$darkColor + '!important'
      },
      '& .bottom-wrap': {
        left: '100px',
        width: 'calc(100% - 100px)',
        bottom: '0px',
        '& p.helper-text': {
          textOverflow: 'ellipsis',
          overflow: 'hidden',
          whiteSpace: 'nowrap'
        },
        '& p.helper-text + .counter': {
          marginLeft: '10px'
        }
      },
      '&.error-field': {
        borderBottom: '2px solid ' + static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$danger,
        transition: 'all 400ms cubic-bezier(0.175, 0.885, 0.32, 1.275) 0s',
        paddingBottom: props => props.marginBottom,
        '& .error-line': {
          bottom: '0px',
          left: '100px',
          width: 'calc(100% - 100px)'
        },
        '& .input-element-wrapper input, & .input-element-wrapper textarea': {
          boxShadow: 'none !important'
        }
      },
      '& label': {
        padding: '0px !important',
        width: '100px',
        textOverflow: 'ellipsis',
        whiteSpace: 'nowrap',
        overflow: 'hidden'
      },
      '& .input-element-wrapper': {
        width: 'calc(100% - 100px)',
        '& textarea, & input': {
          width: '100%',
          border: 'none !important',
          background: 'none !important',
          margin: '0 !important',
          paddingLeft: '0 !important'
        },
        '&:hover input, &:hover textarea': {
          boxShadow: 'none !important'
        },
        '& input:focus, & textarea:focus': {
          boxShadow: 'none !important'
        }
      }
    }
  }
}));

/***/ }),

/***/ "./Components/Shared/UI/InputLikeSelectScroll/index.jsx":
/*!**************************************************************!*\
  !*** ./Components/Shared/UI/InputLikeSelectScroll/index.jsx ***!
  \**************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ "react/jsx-dev-runtime");
/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! prop-types */ "prop-types");
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _styles__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./styles */ "./Components/Shared/UI/InputLikeSelectScroll/styles.js");
/* harmony import */ var utils_handlers__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! utils/handlers */ "./utils/handlers.js");
/* harmony import */ var static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! static/styles/jss/variables */ "./static/styles/jss/variables.js");

var _jsxFileName = "C:\\Users\\arthu\\OneDrive\\Desktop\\Important\\daser\\next\\sexjobs\\Components\\Shared\\UI\\InputLikeSelectScroll\\index.jsx";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }






const canUseDOM = false;
react__WEBPACK_IMPORTED_MODULE_1___default.a.useLayoutEffect = canUseDOM ? react__WEBPACK_IMPORTED_MODULE_1__["useLayoutEffect"] : react__WEBPACK_IMPORTED_MODULE_1__["useEffect"];

const InputLikeSelectWithScroll = props => {
  const {
    0: inputStyleProps,
    1: setInputStyleProps
  } = Object(react__WEBPACK_IMPORTED_MODULE_1__["useState"])({});
  const {
    0: disablePrevBtn,
    1: setDisablePrevBtn
  } = Object(react__WEBPACK_IMPORTED_MODULE_1__["useState"])({
    left: false,
    right: false
  });
  const parentRef = Object(react__WEBPACK_IMPORTED_MODULE_1__["useRef"])();
  const errorRef = Object(react__WEBPACK_IMPORTED_MODULE_1__["useRef"])();
  const bottomWrapRef = Object(react__WEBPACK_IMPORTED_MODULE_1__["useRef"])();
  const inputWrapperRef = Object(react__WEBPACK_IMPORTED_MODULE_1__["useRef"])();
  const styles = Object(_styles__WEBPACK_IMPORTED_MODULE_3__["default"])(inputStyleProps, {
    link: true
  });
  Object(react__WEBPACK_IMPORTED_MODULE_1__["useEffect"])(() => {
    const findIndexCurrent = props.options.findIndex(e => e.value === props.value);
    setDisablePrevBtn({
      left: findIndexCurrent <= 0,
      right: findIndexCurrent === props.options.length - 1
    });
  }, [props.value, props.options]);
  Object(react__WEBPACK_IMPORTED_MODULE_1__["useLayoutEffect"])(() => {
    // Set Inline Styles and send to JSS
    setInputStyleProps(_objectSpread(_objectSpread({}, inputStyleProps), {}, {
      disabledColor: props.theme === 'dark' ? '#0a29559e' : '#ffffffa8',
      fontSize: static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_5__["default"].$input['$' + props.size].$fontSize,
      padding: static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_5__["default"].$input['$' + (props.size || 'md')].$padding,
      textColor: props.theme === 'dark' ? static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_5__["default"].$select.$dark.$textColor : static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_5__["default"].$select.$textColor,
      iconColor: props.theme === 'dark' ? static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_5__["default"].$input.$theme.$darkColor : '#000',
      backgroundColor: props.customStylesInput.background,
      labelColor: props.label && props.label.color || static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_5__["default"].$input.$baseColor,
      marginBottom: calculateMarginBottom(),
      placeholderColor: props.theme === 'dark' ? static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_5__["default"].$select.$dark.$emptyTextColor : static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_5__["default"].$select.$emptyTextColor
    }));
  }, [props.size, props.theme, props.customStylesInput, props.errors, props.label, errorRef.current, bottomWrapRef.current, props.helperText, props.required]);
  const calculateMarginBottom = Object(react__WEBPACK_IMPORTED_MODULE_1__["useCallback"])(() => {
    // Calculate Margin Bottom
    const bottomElementHeight = errorRef.current ? errorRef.current.offsetHeight + 2 : bottomWrapRef.current ? bottomWrapRef.current.offsetHeight + 2 : 0;
    return bottomElementHeight
    /*marginTopBottom*/
    + 'px';
  }, [props.required, props.errors, errorRef.current, props.helperText, bottomWrapRef.current]); // Get position of main Wrapper

  const generateMarginDiv = Object(react__WEBPACK_IMPORTED_MODULE_1__["useCallback"])(() => Object(utils_handlers__WEBPACK_IMPORTED_MODULE_4__["UiGenerateMargin"])(props.margin, props.direction), [props.direction, props.margin]);
  const inlineStylesParent = Object(react__WEBPACK_IMPORTED_MODULE_1__["useMemo"])(() => {
    // Set inline styles on the main Wrapper
    return _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, generateMarginDiv()), {}, {
      width: props.fullWidth ? `calc(100% - ${Object(utils_handlers__WEBPACK_IMPORTED_MODULE_4__["UIGetMarginLeftRight"])(props.margin)}px)` : props.width
    }, props.label && {
      display: 'flex',
      flexDirection: 'column'
    }), !props.label && {
      display: 'block'
    }), props.customStylesDiv);
  }, [props.customStylesDiv, props.label, props.fullWidth, props.direction, props.width, props.margin]);
  const label = Object(react__WEBPACK_IMPORTED_MODULE_1__["useMemo"])(() => {
    if (props.label) {
      const textLabel = props.label.title + (props.required ? ' *' : '');
      return /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("label", {
        className: 'label-' + props.size,
        children: textLabel
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 87,
        columnNumber: 17
      }, undefined);
    }
  }, [props.label, props.required]);
  const generateClassNameParent = Object(react__WEBPACK_IMPORTED_MODULE_1__["useMemo"])(() => {
    return `${styles[props.theme ? 'theme-' + props.theme : '']} ${'wrapper-' + props.size} ${styles['input-wrap']} ${props.errors ? 'error-field' : ''}`;
  }, [props.errors, props.theme, props.size]);
  const arrows = Object(react__WEBPACK_IMPORTED_MODULE_1__["useMemo"])(() => {
    const changeDirection = dir => {
      let index;
      const findIndexCurrent = props.options.findIndex(e => e.value === props.value);

      if (findIndexCurrent > -1) {
        if (dir === 'prev') {
          index = !!findIndexCurrent ? findIndexCurrent - 1 : 0;
        } else {
          index = findIndexCurrent === props.options.length - 1 ? findIndexCurrent : findIndexCurrent + 1;
        }
      }

      props.change(props.options[index || 0].value);
    };

    return /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("div", {
      className: 'arrows-scroll-select',
      children: [/*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("svg", {
        onClick: () => changeDirection('prev'),
        className: `left-icon ${disablePrevBtn.left ? 'disable-left' : ''}`,
        focusable: "false",
        viewBox: "0 0 24 24",
        "aria-hidden": "true",
        children: /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("path", {
          d: "M7 10l5 5 5-5z"
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 112,
          columnNumber: 21
        }, undefined)
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 111,
        columnNumber: 17
      }, undefined), /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("svg", {
        onClick: () => changeDirection('next'),
        className: `right-icon ${disablePrevBtn.right ? 'disable-right' : ''}`,
        focusable: "false",
        viewBox: "0 0 24 24",
        "aria-hidden": "true",
        children: /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("path", {
          d: "M7 10l5 5 5-5z"
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 115,
          columnNumber: 21
        }, undefined)
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 114,
        columnNumber: 17
      }, undefined)]
    }, void 0, true, {
      fileName: _jsxFileName,
      lineNumber: 110,
      columnNumber: 13
    }, undefined);
  }, [props.value, props.options, disablePrevBtn]);
  const bottomWrap = Object(react__WEBPACK_IMPORTED_MODULE_1__["useMemo"])(() => {
    if ((props.helperText || props.required) && !props.errors) {
      const text = props.helperText || (props.required ? 'Required *' : '');
      return /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("div", {
        className: "bottom-wrap",
        ref: bottomWrapRef,
        children: text && /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("p", {
          className: "helper-text",
          children: text
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 126,
          columnNumber: 30
        }, undefined)
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 125,
        columnNumber: 17
      }, undefined);
    } else if (props.errors) return /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("span", {
      ref: errorRef,
      className: 'error-line',
      children: props.errors
    }, void 0, false, {
      fileName: _jsxFileName,
      lineNumber: 130,
      columnNumber: 13
    }, undefined);
  }, [props.helperText, props.errors, errorRef]);
  const options = Object(react__WEBPACK_IMPORTED_MODULE_1__["useMemo"])(() => {
    return props.options.map(span => {
      return /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("span", {
        className: `${span.value === props.value ? 'active-option' : ''} every-option`,
        children: span.title
      }, span.value, false, {
        fileName: _jsxFileName,
        lineNumber: 137,
        columnNumber: 17
      }, undefined);
    });
  }, [props.value, props.options]);
  return /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("div", {
    style: inlineStylesParent,
    className: generateClassNameParent,
    ref: parentRef,
    children: [label, /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("div", {
      ref: inputWrapperRef,
      className: 'input-element-wrapper',
      style: props.customStylesInput,
      "data-disabled": props.disabled,
      children: [!props.value ? /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("span", {
        className: 'placeholder-option',
        children: props.placeholder
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 148,
        columnNumber: 33
      }, undefined) : null, options, arrows]
    }, void 0, true, {
      fileName: _jsxFileName,
      lineNumber: 147,
      columnNumber: 13
    }, undefined), bottomWrap]
  }, void 0, true, {
    fileName: _jsxFileName,
    lineNumber: 143,
    columnNumber: 9
  }, undefined);
};

InputLikeSelectWithScroll.defaultProps = {
  size: 'md',
  type: 'text',
  fullWidth: false,
  margin: 0,
  required: false,
  theme: 'light',
  customStylesInput: {},
  customStylesDiv: {},
  options: []
};
InputLikeSelectWithScroll.propTypes = {
  required: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.bool,
  disabled: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.bool,
  options: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.array,
  theme: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.string,
  helperText: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.string,
  direction: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.string,
  fullWidth: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.bool,
  size: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.string,
  refBind: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.any,
  label: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.object,
  width: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.oneOfType([prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.string, prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.number]),
  errors: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.string,
  change: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.func,
  customStylesDiv: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.object,
  customStylesInput: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.object,
  margin: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.oneOfType([prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.array, prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.number]),
  value: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.oneOfType([prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.string, prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.number]),
  placeholder: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.string
};
/* harmony default export */ __webpack_exports__["default"] = (/*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.memo(InputLikeSelectWithScroll));

/***/ }),

/***/ "./Components/Shared/UI/InputLikeSelectScroll/styles.js":
/*!**************************************************************!*\
  !*** ./Components/Shared/UI/InputLikeSelectScroll/styles.js ***!
  \**************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var react_jss__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react-jss */ "react-jss");
/* harmony import */ var react_jss__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jss__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! static/styles/jss/variables */ "./static/styles/jss/variables.js");
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }



/* harmony default export */ __webpack_exports__["default"] = (Object(react_jss__WEBPACK_IMPORTED_MODULE_0__["createUseStyles"])({
  'input-styles_extend': {
    fontFamily: 'Arial',
    boxSizing: 'border-box',
    width: '100%',
    transition: 'all 400ms cubic-bezier(0.04, 1.1, 1, 0.99)',
    position: 'relative',
    borderRadius: static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$input.$radius,
    border: 'none',
    zIndex: 2,
    fontSize: static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$input.$fontSize + 'px',
    display: 'flex',
    '&:hover': _objectSpread({}, static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$input.$hover),
    '&:focus': _objectSpread({}, static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$input.$focus),
    '&::-webkit-input-placeholder': {
      color: static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$input.$placeholderColor
    } // '&:read-only': {
    //     backgroundColor: variables.$input.$readOnly,
    //     pointerEvents: 'none',
    // }

  },
  'input-wrap': {
    userSelect: 'none',
    position: 'relative',
    width: 'fit-content',
    minWidth: 'fit-content',
    fontFamily: 'Arial',
    height: 'fit-content',
    '& label': {
      fontWeight: '600',
      paddingBottom: '7px',
      color: props => props.labelColor
    },
    '& .error-line': {
      fontFamily: 'Arial',
      position: 'absolute',
      left: '0',
      bottom: '0px',
      display: 'inline-block',
      transition: 'all 400ms cubic-bezier(0.175, 0.885, 0.32, 1.275)',
      fontSize: '11px',
      lineHeight: '14px',
      color: static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$danger,
      width: '100%'
    },
    // Helper Text
    '& .bottom-wrap': {
      lineHeight: '14px',
      position: 'absolute',
      bottom: '0px',
      fontSize: '11px',
      color: '#C7C7C7',
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'space-between',
      width: '100%',
      '& .helper-text': {
        margin: '0px'
      },
      '& .counter': {
        marginLeft: 'auto'
      }
    },
    // Input
    '& .input-element-wrapper': {
      flexWrap: 'nowrap',
      extend: 'input-styles_extend',
      padding: props => props.padding,
      marginBottom: props => props.marginBottom,
      backgroundColor: props => props.backgroundColor,
      border: props => props.border,
      overflow: 'hidden',
      '&[data-disabled=\"true\"]': {
        position: 'relative',
        '&::after': {
          content: '""',
          display: 'block',
          border: '0',
          position: 'absolute',
          width: '100%',
          height: '100%',
          background: props => props.disabledColor,
          zIndex: '22',
          left: '0',
          top: '0',
          transform: 'scale(1)'
        }
      },
      '& .placeholder-option': {
        color: props => props.placeholderColor,
        fontSize: props => props.fontSize
      },
      '& > .every-option': {
        display: 'block',
        width: '100%',
        flexShrink: '0',
        position: 'absolute',
        transform: 'translateX(10px)',
        fontSize: props => props.fontSize,
        opacity: '0',
        color: props => props.textColor,
        '&.active-option': {
          transition: '.4s',
          opacity: '1',
          position: 'relative',
          transform: 'translateX(0px)'
        }
      },
      '&:hover': _objectSpread({}, static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$input.$hover),
      // '& input:disabled': {
      //     backgroundColor: variables.$input.$disabledColor,
      // },
      '&.input-md': {
        padding: static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$input.$md.$padding,
        fontSize: static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$input.$md.$fontSize + 'px'
      },
      '&.input-sm': {
        fontSize: static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$input.$sm.$fontSize + 'px',
        padding: static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$input.$sm.$padding
      },
      '&.input-xsm': {
        padding: static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$input.$xsm.$padding,
        fontSize: static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$input.$xsm.$fontSize + 'px'
      },
      '& .arrows-scroll-select': {
        display: 'flex',
        alignItems: 'center',
        position: 'absolute',
        right: '0px',
        paddingRight: '4px',
        top: '0',
        bottom: '0',
        backgroundColor: props => props.backgroundColor,
        margin: 'auto',
        '& svg': {
          cursor: 'pointer',
          fill: props => props.iconColor,
          '&.left-icon': {
            transform: 'rotate(90deg)',
            '&.disable-left': {
              cursor: 'not-allowed',
              opacity: '0.5'
            }
          },
          '&.right-icon': {
            transform: 'rotate(-90deg)',
            '&.disable-right': {
              cursor: 'not-allowed',
              opacity: '0.5'
            }
          }
        }
      }
    },
    '&.wrapper-md': {
      '& .arrows-scroll-select': {
        '& svg': {
          width: '30px'
        }
      }
    },
    '&.wrapper-sm': {
      '& .arrows-scroll-select': {
        '& svg': {
          width: '25px'
        }
      }
    },
    '&.wrapper-xsm': {
      '& .arrows-scroll-select': {
        '& svg': {
          width: '20px'
        }
      }
    },
    '& label.label-md': {
      fontSize: static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$input.$md.$fontSize + 'px'
    },
    '& label.label-sm': {
      fontSize: static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$input.$sm.$fontSize + 'px'
    },
    '& label.label-xsm': {
      fontSize: static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$input.$xsm.$fontSize + 'px'
    },
    '&.error-field': {
      '& label': {
        color: static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$danger + ' !important'
      },
      '& .input-element-wrapper': {
        marginBottom: props => props.marginBottom,
        boxShadow: '0 0 1px 1px ' + static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$danger + ' inset !important',
        paddingRight: '25px !important'
      }
    }
  },
  'theme-light': {
    '& .input-element-wrapper': {
      backgroundColor: static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$input.$theme.$light,
      '& .arrows-scroll-select': {
        backgroundColor: static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$input.$theme.$light
      }
    }
  },
  'theme-dark': {
    '& .input-element-wrapper': {
      backgroundColor: static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$input.$theme.$dark,
      color: static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$input.$theme.$darkColor,
      '& .arrows-scroll-select': {
        backgroundColor: static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$input.$theme.$dark
      }
    },
    '& .input-icon': {
      color: static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$input.$theme.$darkColor + '!important'
    }
  }
}));

/***/ }),

/***/ "./Components/Shared/UI/InputRange/index.jsx":
/*!***************************************************!*\
  !*** ./Components/Shared/UI/InputRange/index.jsx ***!
  \***************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ "react/jsx-dev-runtime");
/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! prop-types */ "prop-types");
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _styles__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./styles */ "./Components/Shared/UI/InputRange/styles.js");
/* harmony import */ var _material_ui_core_Slider__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @material-ui/core/Slider */ "@material-ui/core/Slider");
/* harmony import */ var _material_ui_core_Slider__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_material_ui_core_Slider__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _material_ui_core_InputLabel__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @material-ui/core/InputLabel */ "@material-ui/core/InputLabel");
/* harmony import */ var _material_ui_core_InputLabel__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_material_ui_core_InputLabel__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _material_ui_core_FormControl__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @material-ui/core/FormControl */ "@material-ui/core/FormControl");
/* harmony import */ var _material_ui_core_FormControl__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_material_ui_core_FormControl__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var _makeStylesUI__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../makeStylesUI */ "./Components/Shared/UI/makeStylesUI.js");
/* harmony import */ var utils_handlers__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! utils/handlers */ "./utils/handlers.js");

var _jsxFileName = "C:\\Users\\arthu\\OneDrive\\Desktop\\Important\\daser\\next\\sexjobs\\Components\\Shared\\UI\\InputRange\\index.jsx";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }










const InputRange = props => {
  const {
    0: marginBottom,
    1: setMarginBottom
  } = Object(react__WEBPACK_IMPORTED_MODULE_1__["useState"])('0px');
  const defaultValue = props.value.length === 1 ? props.value[0] : props.value;
  const {
    0: value,
    1: setValue
  } = Object(react__WEBPACK_IMPORTED_MODULE_1__["useState"])(defaultValue);
  const styles = Object(_styles__WEBPACK_IMPORTED_MODULE_3__["default"])();
  const errorRef = Object(react__WEBPACK_IMPORTED_MODULE_1__["useRef"])();
  const bottomWrapRef = Object(react__WEBPACK_IMPORTED_MODULE_1__["useRef"])();

  const handleChange = (event, newValue) => {
    let value = typeof newValue === 'number' ? [newValue] : newValue;
    const maxIndex = value.length;

    if (maxIndex === 1) {
      if (props.min && newValue <= props.min) {
        newValue = props.min;
      } else if (props.max && newValue >= props.max) {
        newValue = props.max;
      }
    } else {
      if (props.min && newValue[0] <= props.min) {
        newValue[0] = props.min;
      }

      if (props.max && newValue[1] >= props.max) {
        newValue[1] = props.max;
      }
    }

    setValue(newValue);
  };

  const resetSlider = () => {
    setValue(defaultValue);
  }; // Get position of main Wrapper


  const generateMarginDiv = Object(react__WEBPACK_IMPORTED_MODULE_1__["useCallback"])(() => Object(utils_handlers__WEBPACK_IMPORTED_MODULE_8__["UiGenerateMargin"])(props.margin, props.direction), [props.direction, props.margin]);
  const convertNaturalSize = Object(react__WEBPACK_IMPORTED_MODULE_1__["useCallback"])((prop, what) => {
    if (isNaN(+prop)) return prop;else return prop + what;
  }, [props.width]);
  const sharedPropsOfClasses = Object(react__WEBPACK_IMPORTED_MODULE_1__["useMemo"])(() => {
    return {
      marginBottom: marginBottom,
      size: props.size
    };
  }, [props.size, marginBottom, props.value]);
  const LabelProps = Object(react__WEBPACK_IMPORTED_MODULE_1__["useMemo"])(() => _objectSpread({
    disableAnimation: true,
    variant: 'filled',
    focused: false,
    shrink: false
  }, props.error && {
    error: props.error
  }), [props]);
  const topActions = Object(react__WEBPACK_IMPORTED_MODULE_1__["useMemo"])(() => {
    let rangeValue;

    const _value = typeof value === 'number' ? [value] : value;

    if (_value[0] >= 0 && !_value[1]) rangeValue = _value[0] === 0 ? '...' : _value[0] + ' ' + props.sizeOption;else rangeValue = _value[0] === 0 && _value[1] === 0 ? '...' : _value[0] + ' ' + props.sizeOption + ' - ' + _value[1] + ' ' + props.sizeOption;
    return /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("div", {
      className: styles['value-badge-wrapper'],
      children: [/*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("span", {
        className: "value-badge",
        children: rangeValue
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 73,
        columnNumber: 17
      }, undefined), _value.some(e => e > 0) && /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("span", {
        className: "reset-icon icon-bin",
        onClick: resetSlider
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 74,
        columnNumber: 47
      }, undefined)]
    }, void 0, true, {
      fileName: _jsxFileName,
      lineNumber: 72,
      columnNumber: 13
    }, undefined);
  }, [value]);
  const bottomWrap = Object(react__WEBPACK_IMPORTED_MODULE_1__["useMemo"])(() => {
    if ((props.helperText || props.required) && !props.errors) {
      const text = props.helperText || (props.required ? 'Required *' : '');
      return /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("div", {
        className: styles['bottom-wrap'],
        ref: bottomWrapRef,
        children: text && /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("p", {
          className: "helper-text",
          children: text
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 84,
          columnNumber: 30
        }, undefined)
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 83,
        columnNumber: 17
      }, undefined);
    } else if (props.errors) return /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("span", {
      ref: errorRef,
      className: styles['error-line'],
      children: props.errors
    }, void 0, false, {
      fileName: _jsxFileName,
      lineNumber: 88,
      columnNumber: 13
    }, undefined);
  }, [props.helperText, props.errors, errorRef]);
  const classesRangeSlider = Object(_makeStylesUI__WEBPACK_IMPORTED_MODULE_7__["useRangeSliderStyles"])(_objectSpread({}, sharedPropsOfClasses));
  const classesFormControl = Object(_makeStylesUI__WEBPACK_IMPORTED_MODULE_7__["useFormControlStyles"])(_objectSpread(_objectSpread({}, sharedPropsOfClasses), {}, {
    width: props.fullWidth ? `calc(100% - ${Object(utils_handlers__WEBPACK_IMPORTED_MODULE_8__["UIGetMarginLeftRight"])(props.margin)}px)` : convertNaturalSize(props.width, 'px'),
    size: props.size
  }));
  const classesLabel = Object(_makeStylesUI__WEBPACK_IMPORTED_MODULE_7__["useLabelStyles"])(_objectSpread(_objectSpread({}, sharedPropsOfClasses), {}, {
    color: props.label && props.label.color || '#fff'
  }));
  Object(react__WEBPACK_IMPORTED_MODULE_1__["useEffect"])(() => {
    // Calculate Margin Bottom
    const bottomElementHeight = errorRef.current ? errorRef.current.offsetHeight + 2 : bottomWrapRef.current ? bottomWrapRef.current.offsetHeight + 2 : 0;
    setMarginBottom(bottomElementHeight
    /*marginTopBottom*/
    + 'px');
  }, [props.required, props.errors, errorRef.current, props.helperText, bottomWrapRef.current]);
  return /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])(_material_ui_core_FormControl__WEBPACK_IMPORTED_MODULE_6___default.a, {
    classes: {
      root: classesFormControl.root
    },
    style: _objectSpread({}, generateMarginDiv()),
    children: [props.label && /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])(_material_ui_core_InputLabel__WEBPACK_IMPORTED_MODULE_5___default.a, _objectSpread(_objectSpread({
      classes: classesLabel
    }, LabelProps), {}, {
      children: props.label.title + (props.required ? ' *' : '')
    }), void 0, false, {
      fileName: _jsxFileName,
      lineNumber: 115,
      columnNumber: 29
    }, undefined), /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("div", {
      className: `${styles['input-slider']}`,
      "data-disabled": props.disabled,
      children: [/*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])(_material_ui_core_Slider__WEBPACK_IMPORTED_MODULE_4___default.a, {
        disabled: props.disabled,
        classes: classesRangeSlider,
        value: value,
        defaultValue: defaultValue,
        onChange: handleChange,
        valueLabelDisplay: "off",
        "aria-labelledby": "range-slider"
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 120,
        columnNumber: 17
      }, undefined), topActions, bottomWrap]
    }, void 0, true, {
      fileName: _jsxFileName,
      lineNumber: 119,
      columnNumber: 13
    }, undefined)]
  }, void 0, true, {
    fileName: _jsxFileName,
    lineNumber: 114,
    columnNumber: 9
  }, undefined);
};

InputRange.defaultProps = {
  size: 'md',
  fullWidth: false,
  margin: 0,
  required: false,
  min: 0,
  max: 100,
  value: [0]
};
InputRange.propTypes = {
  sizeOption: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.string,
  fullWidth: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.bool,
  size: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.string,
  min: props => {
    if (typeof props.min === 'number') {
      if (props.value.some(e => e < props.min)) throw new Error('Minimum value can\'t be smaller than value');
    } else throw new Error('Minimum value must be Number');
  },
  max: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.number,
  change: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.func,
  width: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.oneOfType([prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.string, prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.number]),
  errors: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.string,
  label: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.object,
  helperText: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.string,
  direction: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.string,
  required: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.bool,
  disabled: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.bool,
  margin: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.oneOfType([prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.array, prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.number]),
  value: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.array
};
/* harmony default export */ __webpack_exports__["default"] = (/*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.memo(InputRange));

/***/ }),

/***/ "./Components/Shared/UI/InputRange/styles.js":
/*!***************************************************!*\
  !*** ./Components/Shared/UI/InputRange/styles.js ***!
  \***************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var react_jss__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react-jss */ "react-jss");
/* harmony import */ var react_jss__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jss__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! static/styles/jss/variables */ "./static/styles/jss/variables.js");


/* harmony default export */ __webpack_exports__["default"] = (Object(react_jss__WEBPACK_IMPORTED_MODULE_0__["createUseStyles"])({
  'input-slider': {
    minWidth: '280px',
    marginTop: '5px'
  },
  'value-badge-wrapper': {
    position: 'absolute',
    top: '0',
    right: '0',
    display: 'flex',
    alignItems: 'center',
    '& .value-badge': {
      fontSize: '13px',
      borderRadius: '6px',
      backgroundColor: '#0F3271',
      padding: '4px 10px',
      color: '#fff'
    },
    '& span.reset-icon': {
      color: '#C7C7C7',
      fontSize: '18px',
      marginLeft: '10px',
      cursor: 'pointer',
      marginTop: '-1px'
    }
  },
  'bottom-wrap': {
    lineHeight: '14px',
    position: 'absolute',
    bottom: '0px',
    fontSize: '11px',
    color: '#C7C7C7',
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'space-between',
    width: '100%',
    '& .helper-text': {
      margin: '0px'
    }
  },
  'error-line': {
    fontFamily: 'Arial',
    position: 'absolute',
    left: '0',
    bottom: '0px',
    display: 'inline-block',
    transition: 'all 400ms cubic-bezier(0.175, 0.885, 0.32, 1.275)',
    fontSize: '11px',
    lineHeight: '14px',
    color: static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$danger,
    width: '100%'
  }
}));

/***/ }),

/***/ "./Components/Shared/UI/PhoneMask/index.jsx":
/*!**************************************************!*\
  !*** ./Components/Shared/UI/PhoneMask/index.jsx ***!
  \**************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ "react/jsx-dev-runtime");
/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! prop-types */ "prop-types");
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _styles__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./styles */ "./Components/Shared/UI/PhoneMask/styles.js");
/* harmony import */ var react_input_mask__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react-input-mask */ "react-input-mask");
/* harmony import */ var react_input_mask__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(react_input_mask__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _material_ui_core_TextField__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @material-ui/core/TextField */ "@material-ui/core/TextField");
/* harmony import */ var _material_ui_core_TextField__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_material_ui_core_TextField__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _material_ui_core_InputAdornment__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @material-ui/core/InputAdornment */ "@material-ui/core/InputAdornment");
/* harmony import */ var _material_ui_core_InputAdornment__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_material_ui_core_InputAdornment__WEBPACK_IMPORTED_MODULE_6__);

var _jsxFileName = "C:\\Users\\arthu\\OneDrive\\Desktop\\Important\\daser\\next\\sexjobs\\Components\\Shared\\UI\\PhoneMask\\index.jsx";







const Phone = props => {
  const styles = Object(_styles__WEBPACK_IMPORTED_MODULE_3__["default"])();
  const {
    0: value,
    1: setValue
  } = Object(react__WEBPACK_IMPORTED_MODULE_1__["useState"])();
  return /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])(react_input_mask__WEBPACK_IMPORTED_MODULE_4___default.a, {
    value: value,
    mask: '(+9' // onChange={inputMaskChange}
    ,
    disabled: false,
    maskChar: ""
  }, void 0, false, {
    fileName: _jsxFileName,
    lineNumber: 13,
    columnNumber: 9
  }, undefined);
}; // {/*    {() => <TextField*/}
// {/*        InputProps={{*/}
// {/*            // disabled:props.disabled,*/}
// {/*            // startAdornment: (*/}
// {/*            //     <InputAdornment position="start">*/}
// {/*            //         <span className="icon-clock"></span>*/}
// {/*            //     </InputAdornment>*/}
// {/*            // ),*/}
// {/*            // endAdornment: (props.slideByArrows ? <InputAdornment position="end">*/}
// {/*            //     {arrows}*/}
// {/*            // </InputAdornment> : null),*/}
// {/*        }} variant="filled" focused={false} placeholder={props.placeholder}/>}*/}
// {/*</InputMask>*/}


Phone.defaultProps = {};
Phone.propTypes = {};
/* harmony default export */ __webpack_exports__["default"] = (/*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.memo(Phone));

/***/ }),

/***/ "./Components/Shared/UI/PhoneMask/styles.js":
/*!**************************************************!*\
  !*** ./Components/Shared/UI/PhoneMask/styles.js ***!
  \**************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var react_jss__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react-jss */ "react-jss");
/* harmony import */ var react_jss__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jss__WEBPACK_IMPORTED_MODULE_0__);
 // import variables from 'static/styles/jss/variables';

/* harmony default export */ __webpack_exports__["default"] = (Object(react_jss__WEBPACK_IMPORTED_MODULE_0__["createUseStyles"])({}));

/***/ }),

/***/ "./Components/Shared/UI/Select/elements/ListItem.jsx":
/*!***********************************************************!*\
  !*** ./Components/Shared/UI/Select/elements/ListItem.jsx ***!
  \***********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ "react/jsx-dev-runtime");
/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _material_ui_core_ListItemText__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @material-ui/core/ListItemText */ "@material-ui/core/ListItemText");
/* harmony import */ var _material_ui_core_ListItemText__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_material_ui_core_ListItemText__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _material_ui_core_ListItemIcon__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @material-ui/core/ListItemIcon */ "@material-ui/core/ListItemIcon");
/* harmony import */ var _material_ui_core_ListItemIcon__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_material_ui_core_ListItemIcon__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! prop-types */ "prop-types");
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var Components_Shared_UI__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! Components/Shared/UI */ "./Components/Shared/UI/index.js");


var _jsxFileName = "C:\\Users\\arthu\\OneDrive\\Desktop\\Important\\daser\\next\\sexjobs\\Components\\Shared\\UI\\Select\\elements\\ListItem.jsx";





const ListItem = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.forwardRef((props, ref) => {
  const isItemObject = props.itemField.constructor === Object;
  const title = isItemObject ? props.itemField.title : props.itemField;
  const likeAvatar = Object(react__WEBPACK_IMPORTED_MODULE_1__["useCallback"])(title => {
    const firstLetter = title.charAt(0).toUpperCase();
    return /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("span", {
      className: "like-avatar",
      children: firstLetter
    }, void 0, false, {
      fileName: _jsxFileName,
      lineNumber: 16,
      columnNumber: 13
    }, undefined);
  }, [props.itemField]);
  return /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["Fragment"], {
    children: [props.withAvatar || props.withIcon ? /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])(_material_ui_core_ListItemIcon__WEBPACK_IMPORTED_MODULE_3___default.a, {
      children: props.withAvatar ? props.itemField.avatar ? /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])(Components_Shared_UI__WEBPACK_IMPORTED_MODULE_5__["Image"], {
        src: props.itemField.avatar
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 24,
        columnNumber: 46
      }, undefined) : likeAvatar(props.itemField.title) : /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("span", {
        className: `icon icon-${props.itemField.icon}`
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 25,
        columnNumber: 23
      }, undefined)
    }, void 0, false, {
      fileName: _jsxFileName,
      lineNumber: 22,
      columnNumber: 53
    }, undefined) : null, /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])(_material_ui_core_ListItemText__WEBPACK_IMPORTED_MODULE_2___default.a, {
      primary: title
    }, void 0, false, {
      fileName: _jsxFileName,
      lineNumber: 27,
      columnNumber: 13
    }, undefined)]
  }, void 0, true);
});
ListItem.defaultProps = {
  withAvatar: false,
  withIcon: false,
  itemField: {}
};
ListItem.propTypes = {
  itemField: prop_types__WEBPACK_IMPORTED_MODULE_4___default.a.oneOfType([prop_types__WEBPACK_IMPORTED_MODULE_4___default.a.string, prop_types__WEBPACK_IMPORTED_MODULE_4___default.a.number, prop_types__WEBPACK_IMPORTED_MODULE_4___default.a.object]),
  withAvatar: prop_types__WEBPACK_IMPORTED_MODULE_4___default.a.bool,
  withIcon: prop_types__WEBPACK_IMPORTED_MODULE_4___default.a.bool
};
/* harmony default export */ __webpack_exports__["default"] = (ListItem);

/***/ }),

/***/ "./Components/Shared/UI/Select/index.jsx":
/*!***********************************************!*\
  !*** ./Components/Shared/UI/Select/index.jsx ***!
  \***********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ "react/jsx-dev-runtime");
/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _material_ui_core_Select__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @material-ui/core/Select */ "@material-ui/core/Select");
/* harmony import */ var _material_ui_core_Select__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_material_ui_core_Select__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! static/styles/jss/variables */ "./static/styles/jss/variables.js");
/* harmony import */ var _material_ui_core_InputLabel__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @material-ui/core/InputLabel */ "@material-ui/core/InputLabel");
/* harmony import */ var _material_ui_core_InputLabel__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_material_ui_core_InputLabel__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _material_ui_core_TextField__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @material-ui/core/TextField */ "@material-ui/core/TextField");
/* harmony import */ var _material_ui_core_TextField__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_material_ui_core_TextField__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _material_ui_lab_Autocomplete__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @material-ui/lab/Autocomplete */ "@material-ui/lab/Autocomplete");
/* harmony import */ var _material_ui_lab_Autocomplete__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_material_ui_lab_Autocomplete__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var _material_ui_core_FormControl__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @material-ui/core/FormControl */ "@material-ui/core/FormControl");
/* harmony import */ var _material_ui_core_FormControl__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(_material_ui_core_FormControl__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! prop-types */ "prop-types");
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var _styles__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./styles */ "./Components/Shared/UI/Select/styles.js");
/* harmony import */ var utils_handlers__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! utils/handlers */ "./utils/handlers.js");
/* harmony import */ var _elements_ListItem__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./elements/ListItem */ "./Components/Shared/UI/Select/elements/ListItem.jsx");
/* harmony import */ var _material_ui_core__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @material-ui/core */ "@material-ui/core");
/* harmony import */ var _material_ui_core__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(_material_ui_core__WEBPACK_IMPORTED_MODULE_12__);
/* harmony import */ var _makeStylesUI__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../makeStylesUI */ "./Components/Shared/UI/makeStylesUI.js");

var _jsxFileName = "C:\\Users\\arthu\\OneDrive\\Desktop\\Important\\daser\\next\\sexjobs\\Components\\Shared\\UI\\Select\\index.jsx";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }















const BrandSelect = props => {
  const {
    0: selectOpen,
    1: setSelectOpen
  } = Object(react__WEBPACK_IMPORTED_MODULE_1__["useState"])(false);
  const {
    0: marginBottom,
    1: setMarginBottom
  } = Object(react__WEBPACK_IMPORTED_MODULE_1__["useState"])('0px');
  const errorRef = Object(react__WEBPACK_IMPORTED_MODULE_1__["useRef"])();
  const bottomWrapRef = Object(react__WEBPACK_IMPORTED_MODULE_1__["useRef"])();
  const styles = Object(_styles__WEBPACK_IMPORTED_MODULE_9__["default"])();
  const {
    options,
    label,
    value,
    placeholder,
    id,
    handleChange,
    helperText,
    required,
    errors,
    size,
    disabled,
    autocomplete,
    multiple,
    withIcon,
    withAvatar
  } = props;
  const sharedPropsOfClasses = Object(react__WEBPACK_IMPORTED_MODULE_1__["useMemo"])(() => {
    const backgroundColor = props.theme === 'dark' ? static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_3__["default"].$input.$theme.$dark : static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_3__["default"].$input.$theme.$light;
    const boxShadow = props.theme === 'dark' ? static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_3__["default"].$select.$dark.$borderColor + ' 0px 0px 0px 1px' : 'none';
    return {
      backgroundColor,
      boxShadow,
      marginBottom: marginBottom,
      isOpened: selectOpen,
      isDark: props.theme === 'dark',
      listItemColor: props.theme === 'dark' ? static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_3__["default"].$select.$dark.$textColor : static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_3__["default"].$select.$textColor,
      selectedItemColor: props.theme === 'dark' ? static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_3__["default"].$select.$dark.$selected.$color : static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_3__["default"].$select.$selected.$color,
      selectedItemBG: props.theme === 'dark' ? static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_3__["default"].$select.$dark.$selected.$bgColor : static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_3__["default"].$select.$selected.$bgColor,
      placeholderColor: props.theme === 'dark' ? static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_3__["default"].$select.$dark.$emptyTextColor : static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_3__["default"].$select.$emptyTextColor,
      paperMarginTop: props.paperMarginTop,
      size: props.size
    };
  }, [props.size, props.theme, selectOpen, marginBottom, props.paperMarginTop]);
  const convertNaturalSize = Object(react__WEBPACK_IMPORTED_MODULE_1__["useCallback"])((prop, what) => {
    if (isNaN(+prop)) return prop;else return prop + what;
  }, [props.width]);

  const togglePopover = val => {
    if (props.onOpen || props.onClose) {
      props[val ? 'onOpen' : 'onClose'](val);
    }

    setSelectOpen(val);
  };

  const classesLabel = Object(_makeStylesUI__WEBPACK_IMPORTED_MODULE_13__["useLabelStyles"])({
    color: label && label.color || '#fff'
  });
  const classesMenuItem = Object(_makeStylesUI__WEBPACK_IMPORTED_MODULE_13__["useItemStyles"])({
    avatarBG: sharedPropsOfClasses.isDark ? '#fff' : '#0B0E2A',
    avatarColor: sharedPropsOfClasses.isDark ? static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_3__["default"].$input.$theme.$dark : '#fff',
    size: props.size,
    iconColor: static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_3__["default"].$select.$dropdown.$listItem.$iconColor
  });
  const classesFormControl = Object(_makeStylesUI__WEBPACK_IMPORTED_MODULE_13__["useFormControlStyles"])(_objectSpread(_objectSpread({}, sharedPropsOfClasses), {}, {
    width: props.fullWidth ? `calc(100% - ${Object(utils_handlers__WEBPACK_IMPORTED_MODULE_10__["UIGetMarginLeftRight"])(props.margin)}px)` : convertNaturalSize(props.width, 'px'),
    size: props.size
  }));
  const classesPopover = Object(_makeStylesUI__WEBPACK_IMPORTED_MODULE_13__["usePopoverStyles"])(_objectSpread(_objectSpread({}, sharedPropsOfClasses), {}, {
    marginLeft: sharedPropsOfClasses.isDark ? '0px' : '0px'
  }));
  const classesAutoComplete = Object(_makeStylesUI__WEBPACK_IMPORTED_MODULE_13__["useAutoCompleteStyles"])(_objectSpread(_objectSpread({}, sharedPropsOfClasses), {}, {
    textColor: sharedPropsOfClasses.isDark ? static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_3__["default"].$select.$dark.$textColor : static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_3__["default"].$select.$textColor,
    iconColor: sharedPropsOfClasses.isDark ? static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_3__["default"].$input.$theme.$darkColor : '#000'
  }));
  const classesSelect = Object(_makeStylesUI__WEBPACK_IMPORTED_MODULE_13__["useSelectStyles"])(_objectSpread(_objectSpread({}, sharedPropsOfClasses), {}, {
    iconColor: sharedPropsOfClasses.isDark ? static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_3__["default"].$input.$theme.$darkColor : '#000',
    textColor: sharedPropsOfClasses.isDark ? static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_3__["default"].$select.$dark.$textColor : static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_3__["default"].$select.$textColor
  }));
  Object(react__WEBPACK_IMPORTED_MODULE_1__["useEffect"])(() => {
    // Calculate Margin Bottom
    const bottomElementHeight = errorRef.current ? errorRef.current.offsetHeight + 2 : bottomWrapRef.current ? bottomWrapRef.current.offsetHeight + 2 : 0;
    setMarginBottom(bottomElementHeight
    /*marginTopBottom*/
    + 'px');
  }, [required, errors, errorRef.current, helperText, bottomWrapRef.current]); // Get position of main Wrapper

  const generateMarginDiv = Object(react__WEBPACK_IMPORTED_MODULE_1__["useCallback"])(() => Object(utils_handlers__WEBPACK_IMPORTED_MODULE_10__["UiGenerateMargin"])(props.margin, props.direction), [props.direction, props.margin]);
  const LabelProps = Object(react__WEBPACK_IMPORTED_MODULE_1__["useMemo"])(() => _objectSpread({
    disableAnimation: true,
    variant: 'filled',
    focused: false,
    shrink: false
  }, errors && {
    error: errors
  }), [props]);
  const SelectProps = Object(react__WEBPACK_IMPORTED_MODULE_1__["useMemo"])(() => _objectSpread({
    disabled,
    value: value || '',
    displayEmpty: !!(!value && placeholder),
    renderValue: e => {
      if (placeholder && !value) {
        return /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("div", {
          className: "default-value-empty",
          children: placeholder
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 133,
          columnNumber: 24
        }, undefined);
      }

      const currentValue = options.find(_e => _e.value === e);

      if (currentValue) {
        return /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("div", {
          children: currentValue.title
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 137,
          columnNumber: 24
        }, undefined);
      }
    }
  }, id && {
    id
  }), [props, options]);
  const SelectOptions = Object(react__WEBPACK_IMPORTED_MODULE_1__["useMemo"])(() => {
    return options.map(item => /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])(_material_ui_core__WEBPACK_IMPORTED_MODULE_12__["MenuItem"], {
      value: item.value,
      classes: classesMenuItem,
      children: /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])(_elements_ListItem__WEBPACK_IMPORTED_MODULE_11__["default"], {
        itemField: item,
        withAvatar: withAvatar,
        withIcon: withIcon
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 145,
        columnNumber: 13
      }, undefined)
    }, item.value, false, {
      fileName: _jsxFileName,
      lineNumber: 144,
      columnNumber: 36
    }, undefined));
  }, [options, size, withAvatar, withIcon]);
  const bottomWrap = Object(react__WEBPACK_IMPORTED_MODULE_1__["useMemo"])(() => {
    if ((helperText || required) && !errors) {
      const text = helperText || (required ? 'Required *' : '');
      return /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("div", {
        className: styles['bottom-wrap'],
        ref: bottomWrapRef,
        children: text && /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("p", {
          className: "helper-text",
          children: text
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 157,
          columnNumber: 30
        }, undefined)
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 156,
        columnNumber: 17
      }, undefined);
    } else if (errors) return /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("span", {
      ref: errorRef,
      className: styles['error-line'],
      children: errors
    }, void 0, false, {
      fileName: _jsxFileName,
      lineNumber: 161,
      columnNumber: 13
    }, undefined);
  }, [helperText, errors, errorRef, required]);
  const generateClassNameParent = Object(react__WEBPACK_IMPORTED_MODULE_1__["useMemo"])(() => {
    return `${disabled ? 'disable-select-wrapper' : ''} ${props.className} ${selectOpen ? 'select-opened' : ''}`;
  }, [disabled, props.className, selectOpen]);
  return /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])(_material_ui_core_FormControl__WEBPACK_IMPORTED_MODULE_7___default.a, {
    classes: {
      root: classesFormControl.root
    },
    disabled: disabled,
    className: generateClassNameParent,
    style: _objectSpread({}, generateMarginDiv()),
    children: [label && /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])(_material_ui_core_InputLabel__WEBPACK_IMPORTED_MODULE_4___default.a, _objectSpread(_objectSpread({
      classes: classesLabel
    }, LabelProps), {}, {
      children: label.title + (props.required ? ' *' : '')
    }), void 0, false, {
      fileName: _jsxFileName,
      lineNumber: 171,
      columnNumber: 23
    }, undefined), autocomplete ? /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])(_material_ui_lab_Autocomplete__WEBPACK_IMPORTED_MODULE_6___default.a, {
      disabled: disabled,
      multiple: multiple,
      className: multiple ? 'MuiMultiple_Autocomplete_field' : '',
      disableCloseOnSelect: true,
      disableListWrap: false,
      classes: classesAutoComplete,
      options: options,
      getOptionSelected: (option, value) => option.title === value.title,
      renderOption: option => /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("div", {
        children: option.title
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 184,
        columnNumber: 43
      }, undefined),
      getOptionLabel: option => option.title,
      onOpen: () => togglePopover(true),
      onClose: () => togglePopover(false),
      onChange: handleChange,
      renderInput: params => /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])(_material_ui_core_TextField__WEBPACK_IMPORTED_MODULE_5___default.a, _objectSpread(_objectSpread({}, params), {}, {
        variant: "filled",
        focused: false,
        placeholder: placeholder
      }), void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 189,
        columnNumber: 42
      }, undefined)
    }, void 0, false, {
      fileName: _jsxFileName,
      lineNumber: 175,
      columnNumber: 29
    }, undefined) : /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])(_material_ui_core_Select__WEBPACK_IMPORTED_MODULE_2___default.a, _objectSpread(_objectSpread({
      MenuProps: {
        anchorOrigin: {
          vertical: "bottom",
          horizontal: "left"
        },
        transformOrigin: {
          vertical: "top",
          horizontal: "left"
        },
        getContentAnchorEl: null,
        classes: {
          paper: classesPopover.paper
        }
      },
      onOpen: () => togglePopover(true),
      onClose: () => togglePopover(false)
    }, SelectProps), {}, {
      className: classesSelect.select,
      inputProps: {
        classes: {
          root: classesSelect.root,
          icon: classesSelect.icon
        }
      },
      onChange: handleChange,
      children: SelectOptions
    }), void 0, false, {
      fileName: _jsxFileName,
      lineNumber: 190,
      columnNumber: 18
    }, undefined), bottomWrap]
  }, void 0, true, {
    fileName: _jsxFileName,
    lineNumber: 170,
    columnNumber: 9
  }, undefined);
};

BrandSelect.defaultProps = {
  options: [],
  theme: 'light',
  size: 'md',
  margin: 0,
  multiple: false,
  withAvatar: false,
  withIcon: false,
  className: '',
  paperMarginTop: 0
};
BrandSelect.propTypes = {
  className: prop_types__WEBPACK_IMPORTED_MODULE_8___default.a.string,
  withAvatar: prop_types__WEBPACK_IMPORTED_MODULE_8___default.a.bool,
  withIcon: prop_types__WEBPACK_IMPORTED_MODULE_8___default.a.bool,
  multiple: prop_types__WEBPACK_IMPORTED_MODULE_8___default.a.bool,
  autocomplete: prop_types__WEBPACK_IMPORTED_MODULE_8___default.a.bool,
  theme: prop_types__WEBPACK_IMPORTED_MODULE_8___default.a.string,
  readonly: prop_types__WEBPACK_IMPORTED_MODULE_8___default.a.bool,
  helperText: prop_types__WEBPACK_IMPORTED_MODULE_8___default.a.string,
  direction: prop_types__WEBPACK_IMPORTED_MODULE_8___default.a.string,
  required: prop_types__WEBPACK_IMPORTED_MODULE_8___default.a.bool,
  fullWidth: prop_types__WEBPACK_IMPORTED_MODULE_8___default.a.bool,
  size: prop_types__WEBPACK_IMPORTED_MODULE_8___default.a.string,
  refBind: prop_types__WEBPACK_IMPORTED_MODULE_8___default.a.any,
  name: prop_types__WEBPACK_IMPORTED_MODULE_8___default.a.string,
  label: prop_types__WEBPACK_IMPORTED_MODULE_8___default.a.object,
  width: prop_types__WEBPACK_IMPORTED_MODULE_8___default.a.oneOfType([prop_types__WEBPACK_IMPORTED_MODULE_8___default.a.string, prop_types__WEBPACK_IMPORTED_MODULE_8___default.a.number]),
  errors: prop_types__WEBPACK_IMPORTED_MODULE_8___default.a.string,
  disabled: prop_types__WEBPACK_IMPORTED_MODULE_8___default.a.bool,
  margin: prop_types__WEBPACK_IMPORTED_MODULE_8___default.a.oneOfType([prop_types__WEBPACK_IMPORTED_MODULE_8___default.a.array, prop_types__WEBPACK_IMPORTED_MODULE_8___default.a.number]),
  handleChange: prop_types__WEBPACK_IMPORTED_MODULE_8___default.a.func,
  onOpen: prop_types__WEBPACK_IMPORTED_MODULE_8___default.a.func,
  onClose: prop_types__WEBPACK_IMPORTED_MODULE_8___default.a.func,
  value: prop_types__WEBPACK_IMPORTED_MODULE_8___default.a.oneOfType([prop_types__WEBPACK_IMPORTED_MODULE_8___default.a.string, prop_types__WEBPACK_IMPORTED_MODULE_8___default.a.number]),
  placeholder: prop_types__WEBPACK_IMPORTED_MODULE_8___default.a.string,
  paperMarginTop: prop_types__WEBPACK_IMPORTED_MODULE_8___default.a.number
};
/* harmony default export */ __webpack_exports__["default"] = (/*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.memo(BrandSelect));

/***/ }),

/***/ "./Components/Shared/UI/Select/styles.js":
/*!***********************************************!*\
  !*** ./Components/Shared/UI/Select/styles.js ***!
  \***********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var react_jss__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react-jss */ "react-jss");
/* harmony import */ var react_jss__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jss__WEBPACK_IMPORTED_MODULE_0__);

/* harmony default export */ __webpack_exports__["default"] = (Object(react_jss__WEBPACK_IMPORTED_MODULE_0__["createUseStyles"])({
  'bottom-wrap': {
    lineHeight: '14px',
    position: 'absolute',
    bottom: '0px',
    fontSize: '11px',
    color: '#C7C7C7',
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'space-between',
    width: '100%',
    '& .helper-text': {
      margin: '0px'
    }
  },
  'error-line': {}
}));

/***/ }),

/***/ "./Components/Shared/UI/Tag/index.jsx":
/*!********************************************!*\
  !*** ./Components/Shared/UI/Tag/index.jsx ***!
  \********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ "react/jsx-dev-runtime");
/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _styles__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./styles */ "./Components/Shared/UI/Tag/styles.js");
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! prop-types */ "prop-types");
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var utils_handlers__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! utils/handlers */ "./utils/handlers.js");

var _jsxFileName = "C:\\Users\\arthu\\OneDrive\\Desktop\\Important\\daser\\next\\sexjobs\\Components\\Shared\\UI\\Tag\\index.jsx";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }






const Tag = props => {
  const styles = Object(_styles__WEBPACK_IMPORTED_MODULE_2__["default"])();
  const toggleTag = Object(react__WEBPACK_IMPORTED_MODULE_1__["useCallback"])(X => {
    if (props.withX && X === 'div' && props.selected) return;
    props.toggle(props.id);
  }, [props.toggle, props.withX, props.selected]);
  const generateMarginDiv = Object(react__WEBPACK_IMPORTED_MODULE_1__["useCallback"])(() => Object(utils_handlers__WEBPACK_IMPORTED_MODULE_4__["UiGenerateMargin"])(props.margin), [props.margin]);
  const isRightActions = Object(react__WEBPACK_IMPORTED_MODULE_1__["useMemo"])(() => {
    return props.withX || props.count;
  }, [props.withX, props.count]);
  const inlineStylesParent = Object(react__WEBPACK_IMPORTED_MODULE_1__["useMemo"])(() => {
    // Set inline styles on the main Wrapper
    return _objectSpread(_objectSpread({}, generateMarginDiv()), {}, {
      width: props.width ? props.width + 'px' : 'auto'
    });
  }, [props.width, props.margin]);
  return /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("div", {
    "data-disabled": props.disabled,
    className: `${props.size + '-wrapper-tag'} ${styles['tag-wrapper']} ${isRightActions ? 'with-actions' : ''} ${props.selected ? 'selected-tag' : ''}`,
    style: inlineStylesParent,
    onClick: () => toggleTag('div'),
    children: [/*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("p", {
      children: props.text
    }, void 0, false, {
      fileName: _jsxFileName,
      lineNumber: 33,
      columnNumber: 13
    }, undefined), isRightActions ? /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("div", {
      children: [props.count ? /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("span", {
        className: "count-ads",
        children: ["(", props.count, ")"]
      }, void 0, true, {
        fileName: _jsxFileName,
        lineNumber: 35,
        columnNumber: 32
      }, undefined) : '', props.withX && props.selected ? /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("span", {
        className: "with-x icon-cross",
        onClick: () => toggleTag('icon')
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 36,
        columnNumber: 50
      }, undefined) : '']
    }, void 0, true, {
      fileName: _jsxFileName,
      lineNumber: 34,
      columnNumber: 31
    }, undefined) : null]
  }, void 0, true, {
    fileName: _jsxFileName,
    lineNumber: 31,
    columnNumber: 9
  }, undefined);
};

Tag.defaultProps = {
  margin: 0,
  size: 'md'
};
Tag.propTypes = {
  margin: prop_types__WEBPACK_IMPORTED_MODULE_3___default.a.oneOfType([prop_types__WEBPACK_IMPORTED_MODULE_3___default.a.array, prop_types__WEBPACK_IMPORTED_MODULE_3___default.a.number]),
  withX: prop_types__WEBPACK_IMPORTED_MODULE_3___default.a.bool,
  disabled: prop_types__WEBPACK_IMPORTED_MODULE_3___default.a.bool,
  size: prop_types__WEBPACK_IMPORTED_MODULE_3___default.a.string,
  toggle: prop_types__WEBPACK_IMPORTED_MODULE_3___default.a.func.isRequired,
  text: prop_types__WEBPACK_IMPORTED_MODULE_3___default.a.string.isRequired,
  id: prop_types__WEBPACK_IMPORTED_MODULE_3___default.a.string.isRequired,
  count: prop_types__WEBPACK_IMPORTED_MODULE_3___default.a.number,
  width: prop_types__WEBPACK_IMPORTED_MODULE_3___default.a.number,
  selected: prop_types__WEBPACK_IMPORTED_MODULE_3___default.a.bool.isRequired
};
/* harmony default export */ __webpack_exports__["default"] = (/*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.memo(Tag));

/***/ }),

/***/ "./Components/Shared/UI/Tag/styles.js":
/*!********************************************!*\
  !*** ./Components/Shared/UI/Tag/styles.js ***!
  \********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var react_jss__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react-jss */ "react-jss");
/* harmony import */ var react_jss__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jss__WEBPACK_IMPORTED_MODULE_0__);
 // import variables from 'static/styles/jss/variables';

/* harmony default export */ __webpack_exports__["default"] = (Object(react_jss__WEBPACK_IMPORTED_MODULE_0__["createUseStyles"])({
  'tag-wrapper': {
    border: '2px solid #3378D1',
    borderRadius: '3px',
    minWidth: '60px',
    cursor: 'pointer',
    display: 'flex',
    alignItems: 'center',
    '&.md-wrapper-tag': {
      padding: '11px 10px'
    },
    '&.sm-wrapper-tag': {
      padding: '8px 10px'
    },
    '&.with-actions': {
      justifyContent: 'space-between',
      '& p': {
        textAlign: 'left',
        marginRight: '10px'
      }
    },
    '&.selected-tag': {
      backgroundColor: '#3378D1',
      '& p, & .count-ads, & .with-x': {
        color: '#fff'
      }
    },
    '&[data-disabled=\"true\"]': {
      opacity: .5,
      pointerEvents: 'none',
      userSelect: 'none'
    },
    '& p': {
      textAlign: 'center',
      color: '#C3CBD5',
      fontFamily: 'Arial',
      fontSize: '12px',
      marginBottom: '0',
      letterSpacing: '0',
      flex: 1,
      textOverflow: 'ellipsis',
      overflow: 'hidden',
      whiteSpace: 'nowrap'
    },
    '& div': {
      display: 'flex',
      alignItems: 'center',
      '& .count-ads': {
        fontSize: '12px',
        fontWeight: 'bold',
        color: '#C3CBD5'
      },
      '& .with-x': {
        marginLeft: '10px',
        fontSize: '13px',
        color: '#C7C7C7'
      }
    }
  }
}));

/***/ }),

/***/ "./Components/Shared/UI/TimePicker/index.jsx":
/*!***************************************************!*\
  !*** ./Components/Shared/UI/TimePicker/index.jsx ***!
  \***************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ "react/jsx-dev-runtime");
/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! prop-types */ "prop-types");
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _styles__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./styles */ "./Components/Shared/UI/TimePicker/styles.js");
/* harmony import */ var utils_handlers__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! utils/handlers */ "./utils/handlers.js");
/* harmony import */ var hooks_use_media_device__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! hooks/use-media-device */ "./Hooks/use-media-device.js");
/* harmony import */ var react_input_mask__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! react-input-mask */ "react-input-mask");
/* harmony import */ var react_input_mask__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(react_input_mask__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var _makeStylesUI__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../makeStylesUI */ "./Components/Shared/UI/makeStylesUI.js");
/* harmony import */ var static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! static/styles/jss/variables */ "./static/styles/jss/variables.js");
/* harmony import */ var _material_ui_lab_Autocomplete__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @material-ui/lab/Autocomplete */ "@material-ui/lab/Autocomplete");
/* harmony import */ var _material_ui_lab_Autocomplete__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(_material_ui_lab_Autocomplete__WEBPACK_IMPORTED_MODULE_9__);
/* harmony import */ var _material_ui_core_TextField__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @material-ui/core/TextField */ "@material-ui/core/TextField");
/* harmony import */ var _material_ui_core_TextField__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(_material_ui_core_TextField__WEBPACK_IMPORTED_MODULE_10__);
/* harmony import */ var _material_ui_core_InputLabel__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @material-ui/core/InputLabel */ "@material-ui/core/InputLabel");
/* harmony import */ var _material_ui_core_InputLabel__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(_material_ui_core_InputLabel__WEBPACK_IMPORTED_MODULE_11__);
/* harmony import */ var _material_ui_core_FormControl__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @material-ui/core/FormControl */ "@material-ui/core/FormControl");
/* harmony import */ var _material_ui_core_FormControl__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(_material_ui_core_FormControl__WEBPACK_IMPORTED_MODULE_12__);
/* harmony import */ var _material_ui_core_InputAdornment__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @material-ui/core/InputAdornment */ "@material-ui/core/InputAdornment");
/* harmony import */ var _material_ui_core_InputAdornment__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(_material_ui_core_InputAdornment__WEBPACK_IMPORTED_MODULE_13__);
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! date-fns */ "date-fns");
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(date_fns__WEBPACK_IMPORTED_MODULE_14__);
/* harmony import */ var rmc_picker_assets_index_css__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! rmc-picker/assets/index.css */ "./node_modules/rmc-picker/assets/index.css");
/* harmony import */ var rmc_picker_assets_index_css__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(rmc_picker_assets_index_css__WEBPACK_IMPORTED_MODULE_15__);
/* harmony import */ var rmc_picker_lib_Picker__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! rmc-picker/lib/Picker */ "rmc-picker/lib/Picker");
/* harmony import */ var rmc_picker_lib_Picker__WEBPACK_IMPORTED_MODULE_16___default = /*#__PURE__*/__webpack_require__.n(rmc_picker_lib_Picker__WEBPACK_IMPORTED_MODULE_16__);
/* harmony import */ var _material_ui_core_Dialog__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @material-ui/core/Dialog */ "@material-ui/core/Dialog");
/* harmony import */ var _material_ui_core_Dialog__WEBPACK_IMPORTED_MODULE_17___default = /*#__PURE__*/__webpack_require__.n(_material_ui_core_Dialog__WEBPACK_IMPORTED_MODULE_17__);

var _jsxFileName = "C:\\Users\\arthu\\OneDrive\\Desktop\\Important\\daser\\next\\sexjobs\\Components\\Shared\\UI\\TimePicker\\index.jsx";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }



















const canUseDOM = false;
react__WEBPACK_IMPORTED_MODULE_1___default.a.useLayoutEffect = canUseDOM ? react__WEBPACK_IMPORTED_MODULE_1__["useLayoutEffect"] : react__WEBPACK_IMPORTED_MODULE_1__["useEffect"];

const TimePicker = props => {
  const {
    deviceType
  } = Object(hooks_use_media_device__WEBPACK_IMPORTED_MODULE_5__["default"])();
  const {
    0: options,
    1: setOptions
  } = Object(react__WEBPACK_IMPORTED_MODULE_1__["useState"])([]);
  const {
    0: mobileDate,
    1: setMobileDate
  } = Object(react__WEBPACK_IMPORTED_MODULE_1__["useState"])({
    hour: null,
    minute: null
  });
  const {
    0: isMobile,
    1: setIsMobile
  } = Object(react__WEBPACK_IMPORTED_MODULE_1__["useState"])(false);
  const {
    0: disableBtn,
    1: setDisableBtn
  } = Object(react__WEBPACK_IMPORTED_MODULE_1__["useState"])({
    prev: false,
    next: false
  });
  const {
    0: time,
    1: setTime
  } = Object(react__WEBPACK_IMPORTED_MODULE_1__["useState"])(null);
  const {
    0: marginBottom,
    1: setMarginBottom
  } = Object(react__WEBPACK_IMPORTED_MODULE_1__["useState"])('0px');
  const {
    0: isOpen,
    1: setIsOpen
  } = Object(react__WEBPACK_IMPORTED_MODULE_1__["useState"])(false);
  const {
    0: propsOfStyles,
    1: setPropsOfStyles
  } = Object(react__WEBPACK_IMPORTED_MODULE_1__["useState"])({});
  const {
    0: autocompleteValue,
    1: setAutocompleteValue
  } = Object(react__WEBPACK_IMPORTED_MODULE_1__["useState"])({});
  const errorRef = Object(react__WEBPACK_IMPORTED_MODULE_1__["useRef"])();
  const bottomWrapRef = Object(react__WEBPACK_IMPORTED_MODULE_1__["useRef"])();
  const inputRef = Object(react__WEBPACK_IMPORTED_MODULE_1__["useRef"])();
  const maskRef = Object(react__WEBPACK_IMPORTED_MODULE_1__["useRef"])();
  const styles = Object(_styles__WEBPACK_IMPORTED_MODULE_3__["default"])(propsOfStyles, {
    link: true
  }); // Get position of main Wrapper

  const generateMarginDiv = Object(react__WEBPACK_IMPORTED_MODULE_1__["useCallback"])(() => Object(utils_handlers__WEBPACK_IMPORTED_MODULE_4__["UiGenerateMargin"])(props.margin, props.direction), [props.direction, props.margin]);
  const convertNaturalSize = Object(react__WEBPACK_IMPORTED_MODULE_1__["useCallback"])((prop, what) => {
    if (isNaN(+prop)) return prop;else return prop + what;
  }, [props.width]);
  const sharedPropsOfClasses = Object(react__WEBPACK_IMPORTED_MODULE_1__["useMemo"])(() => {
    const backgroundColor = props.theme === 'dark' ? static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_8__["default"].$input.$theme.$dark : static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_8__["default"].$input.$theme.$light;
    const boxShadow = props.theme === 'dark' ? static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_8__["default"].$select.$dark.$borderColor + ' 0px 0px 0px 1px' : 'none';
    return {
      backgroundColor,
      boxShadow,
      marginBottom: marginBottom,
      isDark: props.theme === 'dark',
      listItemColor: props.theme === 'dark' ? static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_8__["default"].$select.$dark.$textColor : static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_8__["default"].$select.$textColor,
      selectedItemColor: props.theme === 'dark' ? static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_8__["default"].$select.$dark.$selected.$color : static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_8__["default"].$select.$selected.$color,
      selectedItemBG: props.theme === 'dark' ? static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_8__["default"].$select.$dark.$selected.$bgColor : static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_8__["default"].$select.$selected.$bgColor,
      valueColor: props.theme === 'dark' ? static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_8__["default"].$datepicker.$dark.$textColor : static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_8__["default"].$datepicker.$textColor,
      actionsColor: props.theme === 'dark' ? static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_8__["default"].$datepicker.$dark.$actionsColor : static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_8__["default"].$datepicker.$actionsColor,
      weekColor: props.theme === 'dark' ? static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_8__["default"].$datepicker.$dark.$weekColor : static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_8__["default"].$datepicker.$weekColor,
      placeholderColor: props.theme === 'dark' ? static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_8__["default"].$select.$dark.$emptyTextColor : static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_8__["default"].$select.$emptyTextColor,
      size: props.size,
      isOpened: isOpen && !isMobile,
      iconColor: props.theme === 'dark' ? static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_8__["default"].$input.$theme.$darkColor : '#000'
    };
  }, [isOpen, props.size, props.theme, marginBottom, props.value, isMobile]);
  const classesAutoComplete = Object(_makeStylesUI__WEBPACK_IMPORTED_MODULE_7__["useAutoCompleteStyles"])(sharedPropsOfClasses);
  const classesLabel = Object(_makeStylesUI__WEBPACK_IMPORTED_MODULE_7__["useLabelStyles"])(_objectSpread(_objectSpread({}, sharedPropsOfClasses), {}, {
    color: props.label && props.label.color || '#fff'
  }));
  const classesFormControl = Object(_makeStylesUI__WEBPACK_IMPORTED_MODULE_7__["useFormControlStyles"])(_objectSpread(_objectSpread({}, sharedPropsOfClasses), {}, {
    width: props.fullWidth ? `calc(100% - ${Object(utils_handlers__WEBPACK_IMPORTED_MODULE_4__["UIGetMarginLeftRight"])(props.margin)}px)` : convertNaturalSize(props.width, 'px'),
    size: props.size
  }));
  Object(react__WEBPACK_IMPORTED_MODULE_1__["useEffect"])(() => {
    const isDark = props.theme === 'dark';
    setPropsOfStyles({
      isDark: isDark,
      backgroundColor: isDark ? static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_8__["default"].$input.$theme.$dark : static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_8__["default"].$input.$theme.$light,
      actionsColor: isDark ? '#fff' : static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_8__["default"].$datepicker.$actionsColor,
      textColor: isDark ? '#fff' : '#000',
      selectedItem: isDark ? 'rgb(251 251 251 / 32%)' : '#BEBEBE',
      border: isDark ? '1px solid #11509F' : 'none',
      overlayBG: isDark ? 'rgb(255 243 243 / 30%)' : 'rgba(0,0,0, .5)'
    });
  }, [props.theme]);
  Object(react__WEBPACK_IMPORTED_MODULE_1__["useEffect"])(() => {
    // Generate Options
    const generateTime = time => {
      return {
        hour: time.split(':')[0],
        minute: time.split(':')[1]
      };
    };

    const getTime = {
      start: _objectSpread({}, generateTime(props.options.start)),
      end: _objectSpread({}, generateTime(props.options.end))
    };
    let datePeriod = new Date();
    let dateEnd = new Date();
    datePeriod.setHours(getTime.start.hour);
    datePeriod.setMinutes(getTime.start.minute);
    dateEnd.setHours(getTime.end.hour);
    dateEnd.setMinutes(getTime.end.minute);
    dateEnd = new Date(new Date(dateEnd).getTime() - props.options.interval * 1000 * 60);
    let index = 0;
    const dates = [];

    while (!Object(date_fns__WEBPACK_IMPORTED_MODULE_14__["isAfter"])(datePeriod, dateEnd)) {
      const newDate = Object(date_fns__WEBPACK_IMPORTED_MODULE_14__["addMinutes"])(new Date(null, null, null, getTime.start.hour, getTime.start.minute), +props.options.interval * index);
      const option = newDate.getHours() + ':' + (newDate.getMinutes() < 10 ? '0' : '') + newDate.getMinutes();
      dates.push({
        title: option,
        value: option
      });
      const newDatePeriod = generateTime(option);
      datePeriod.setHours(newDatePeriod.hour);
      datePeriod.setMinutes(newDatePeriod.minute);
      index++;
    }

    setOptions(dates);
  }, [props.options]);
  Object(react__WEBPACK_IMPORTED_MODULE_1__["useEffect"])(() => {
    // Detect if device is Mobile
    if (deviceType === 'mobile') {
      setIsMobile(true);
    } else setIsMobile(false);
  }, [deviceType]);
  Object(react__WEBPACK_IMPORTED_MODULE_1__["useEffect"])(() => {
    // Calculate Margin Bottom
    const bottomElementHeight = errorRef.current ? errorRef.current.offsetHeight + 2 : bottomWrapRef.current ? bottomWrapRef.current.offsetHeight + 2 : 0;
    setMarginBottom(bottomElementHeight
    /*marginTopBottom*/
    + 'px');
  }, [props.required, props.errors, errorRef.current, props.helperText, bottomWrapRef.current]);
  Object(react__WEBPACK_IMPORTED_MODULE_1__["useEffect"])(() => {
    isMobile && maskRef.current && maskRef.current.blur();
  }, [isOpen, maskRef.current, isMobile]);
  Object(react__WEBPACK_IMPORTED_MODULE_1__["useEffect"])(() => {
    // Disable the prev/next buttons
    if (time === null && props.value) {
      setTime(props.value);
      setAutocompleteValue({
        title: props.value,
        value: props.value
      });
    }

    const value = time !== null ? time : props.value || '';
    if (isMobile) setMobileDate({
      hour: value.split(':')[0],
      minute: value.split(':')[1]
    });
    const findIndex = options.findIndex(e => e.value === value);
    setDisableBtn({
      prev: findIndex <= 0 || value && findIndex < 0,
      next: findIndex >= options.length - 1 || value && findIndex < 0
    });
  }, [props.value, options, time, isMobile]);

  const inputMaskChange = evt => {
    setTime(evt.target.value);
  };

  const inputBlur = () => {
    if (time && !options.some(e => e.value === time) || typeof time === 'string' && !time.length || autocompleteValue && autocompleteValue.value !== time) {
      setTime(autocompleteValue.value);
    }

    !isMobile && setIsOpen(false);
  };

  const selectTime = ({
    target
  }, {
    title,
    value
  }) => {
    setIsOpen(true);
    maskRef.current && maskRef.current.blur();
    setTime(value);
    setAutocompleteValue({
      title,
      value
    });
  };

  const selectMobileTime = () => {
    const _time = mobileDate.hour + ':' + mobileDate.minute;

    setTime(_time);
    setAutocompleteValue({
      title: _time,
      value: _time
    });
    setIsOpen(false);
  };

  const mobilePickerValueChange = (val, type) => {
    setMobileDate({
      hour: type === 'hour' ? val : mobileDate.hour,
      minute: type === 'minute' ? val : mobileDate.minute
    });
  };

  const handleTimePickerClose = () => {
    setIsOpen(false);
    setMobileDate({
      hour: time.split(':')[0],
      minute: time.split(':')[1]
    });
  };

  const LabelProps = Object(react__WEBPACK_IMPORTED_MODULE_1__["useMemo"])(() => _objectSpread({
    disableAnimation: true,
    variant: 'filled',
    focused: false,
    shrink: false
  }, props.error && {
    error: props.error
  }), [props]);
  const arrows = Object(react__WEBPACK_IMPORTED_MODULE_1__["useMemo"])(() => {
    const changeDirection = (evt, dir) => {
      evt.stopPropagation();
      const currentIndex = options.findIndex(e => e.value === time);

      if (!disableBtn.prev && dir === 'prev') {
        const _value = options[currentIndex > -1 ? currentIndex - 1 : options.length - 1].value;
        setTime(_value);
        setAutocompleteValue({
          title: _value,
          value: _value
        });
      } else if (!disableBtn.next && dir === 'next') {
        const _value = options[currentIndex > -1 ? currentIndex + 1 : 0].value;
        setTime(_value);
        setAutocompleteValue({
          title: _value,
          value: _value
        });
      }
    };

    return /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("div", {
      className: 'arrows-slide-datepicker',
      children: [/*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("svg", {
        onClick: e => changeDirection(e, 'prev'),
        className: `left-icon ${disableBtn.prev ? 'disable-btn' : ''}`,
        focusable: "false",
        viewBox: "0 0 24 24",
        "aria-hidden": "true",
        children: /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("path", {
          d: "M7 10l5 5 5-5z"
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 255,
          columnNumber: 21
        }, undefined)
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 254,
        columnNumber: 17
      }, undefined), /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("svg", {
        onClick: e => changeDirection(e, 'next'),
        className: `right-icon ${disableBtn.next ? 'disable-btn' : ''}`,
        focusable: "false",
        viewBox: "0 0 24 24",
        "aria-hidden": "true",
        children: /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("path", {
          d: "M7 10l5 5 5-5z"
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 258,
          columnNumber: 21
        }, undefined)
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 257,
        columnNumber: 17
      }, undefined)]
    }, void 0, true, {
      fileName: _jsxFileName,
      lineNumber: 253,
      columnNumber: 13
    }, undefined);
  }, [disableBtn, props.value, options, time]);
  const mobileDates = Object(react__WEBPACK_IMPORTED_MODULE_1__["useMemo"])(() => {
    return options.reduce((acc, item) => {
      const splitDate = item.title.replace(/ /g, '').split(':');
      acc[splitDate[0]] = [...(acc[splitDate[0]] || []), splitDate[1]];
      return acc;
    }, {});
  }, [options]);
  const bottomWrap = Object(react__WEBPACK_IMPORTED_MODULE_1__["useMemo"])(() => {
    if ((props.helperText || props.required) && !props.errors) {
      const text = props.helperText || (props.required ? 'Required *' : '');
      return /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("div", {
        className: styles['bottom-wrap'],
        ref: bottomWrapRef,
        children: text && /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("p", {
          className: "helper-text",
          children: text
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 277,
          columnNumber: 30
        }, undefined)
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 276,
        columnNumber: 17
      }, undefined);
    } else if (props.errors) return /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("span", {
      ref: errorRef,
      className: styles['error-line'],
      children: props.errors
    }, void 0, false, {
      fileName: _jsxFileName,
      lineNumber: 281,
      columnNumber: 13
    }, undefined);
  }, [props.helperText, props.errors, errorRef]);
  return /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])(_material_ui_core_FormControl__WEBPACK_IMPORTED_MODULE_12___default.a, {
    classes: {
      root: classesFormControl.root
    },
    style: _objectSpread({}, generateMarginDiv()),
    children: [props.label && /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])(_material_ui_core_InputLabel__WEBPACK_IMPORTED_MODULE_11___default.a, _objectSpread(_objectSpread({
      classes: classesLabel
    }, LabelProps), {}, {
      children: props.label.title + (props.required ? ' *' : '')
    }), void 0, false, {
      fileName: _jsxFileName,
      lineNumber: 287,
      columnNumber: 29
    }, undefined), /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("div", {
      className: `mask-input ${isOpen ? 'focused-input' : ''}`,
      "data-disabled": props.disabled,
      children: [/*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])(react_input_mask__WEBPACK_IMPORTED_MODULE_6___default.a, {
        mask: "99:99",
        onFocus: () => !isMobile && setIsOpen(true),
        onBlur: () => inputBlur(),
        value: time || '',
        onChange: inputMaskChange,
        disabled: false,
        maskChar: "",
        children: () => /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])(_material_ui_core_TextField__WEBPACK_IMPORTED_MODULE_10___default.a, {
          onClick: () => isMobile && setIsOpen(true),
          InputProps: {
            disabled: props.disabled,
            startAdornment: /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])(_material_ui_core_InputAdornment__WEBPACK_IMPORTED_MODULE_13___default.a, {
              position: "start",
              children: /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("span", {
                className: "icon-clock"
              }, void 0, false, {
                fileName: _jsxFileName,
                lineNumber: 307,
                columnNumber: 37
              }, undefined)
            }, void 0, false, {
              fileName: _jsxFileName,
              lineNumber: 306,
              columnNumber: 33
            }, undefined),
            endAdornment: props.slideByArrows ? /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])(_material_ui_core_InputAdornment__WEBPACK_IMPORTED_MODULE_13___default.a, {
              position: "end",
              children: arrows
            }, void 0, false, {
              fileName: _jsxFileName,
              lineNumber: 310,
              columnNumber: 66
            }, undefined) : null
          },
          inputRef: maskRef,
          variant: "filled",
          focused: false,
          placeholder: props.placeholder
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 301,
          columnNumber: 28
        }, undefined)
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 292,
        columnNumber: 17
      }, undefined), isMobile ? /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])(_material_ui_core_Dialog__WEBPACK_IMPORTED_MODULE_17___default.a, {
        onClose: handleTimePickerClose,
        "aria-labelledby": "simple-dialog-title",
        open: isOpen,
        className: styles['timepicker-dialog'],
        children: /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("div", {
          className: styles['mobile-wheel-picker'],
          children: [/*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("h4", {
            children: "Select time"
          }, void 0, false, {
            fileName: _jsxFileName,
            lineNumber: 317,
            columnNumber: 25
          }, undefined), /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("div", {
            className: "pickers-wrapper",
            children: [/*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])(rmc_picker_lib_Picker__WEBPACK_IMPORTED_MODULE_16___default.a, {
              selectedValue: mobileDate.hour,
              onValueChange: val => mobilePickerValueChange(val, 'hour'),
              children: Object.keys(mobileDates).map(hour => /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])(rmc_picker_lib_Picker__WEBPACK_IMPORTED_MODULE_16___default.a.Item, {
                value: hour,
                children: hour
              }, hour, false, {
                fileName: _jsxFileName,
                lineNumber: 323,
                columnNumber: 71
              }, undefined))
            }, void 0, false, {
              fileName: _jsxFileName,
              lineNumber: 319,
              columnNumber: 29
            }, undefined), mobileDate.hour ? /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])(rmc_picker_lib_Picker__WEBPACK_IMPORTED_MODULE_16___default.a, {
              selectedValue: mobileDate.minute,
              onValueChange: val => mobilePickerValueChange(val, 'minute'),
              children: mobileDates[mobileDate.hour].map(minute => /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])(rmc_picker_lib_Picker__WEBPACK_IMPORTED_MODULE_16___default.a.Item, {
                value: minute,
                children: minute
              }, minute, false, {
                fileName: _jsxFileName,
                lineNumber: 329,
                columnNumber: 77
              }, undefined))
            }, void 0, false, {
              fileName: _jsxFileName,
              lineNumber: 325,
              columnNumber: 48
            }, undefined) : '']
          }, void 0, true, {
            fileName: _jsxFileName,
            lineNumber: 318,
            columnNumber: 25
          }, undefined), /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("div", {
            className: "actions-wrap",
            children: [/*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("button", {
              onClick: handleTimePickerClose,
              children: "Cancel"
            }, void 0, false, {
              fileName: _jsxFileName,
              lineNumber: 333,
              columnNumber: 29
            }, undefined), /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("button", {
              onClick: selectMobileTime,
              children: "Select"
            }, void 0, false, {
              fileName: _jsxFileName,
              lineNumber: 334,
              columnNumber: 29
            }, undefined)]
          }, void 0, true, {
            fileName: _jsxFileName,
            lineNumber: 332,
            columnNumber: 25
          }, undefined)]
        }, void 0, true, {
          fileName: _jsxFileName,
          lineNumber: 316,
          columnNumber: 21
        }, undefined)
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 315,
        columnNumber: 29
      }, undefined) : /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])(_material_ui_lab_Autocomplete__WEBPACK_IMPORTED_MODULE_9___default.a, {
        disabled: props.disabled,
        disableCloseOnSelect: false,
        disableListWrap: false,
        classes: classesAutoComplete,
        options: options,
        getOptionSelected: (option, value) => option.title === value.title,
        renderOption: option => /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("div", {
          children: option.title
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 344,
          columnNumber: 47
        }, undefined),
        getOptionLabel: option => option.title,
        open: isOpen,
        onOpen: () => setIsOpen(true),
        onClose: () => setIsOpen(false),
        onChange: selectTime,
        inputValue: time || '',
        value: {
          title: autocompleteValue.title || '',
          value: autocompleteValue.value || ''
        },
        defaultValue: props.value ? {
          title: props.value || '',
          value: props.value || ''
        } : null,
        renderInput: params => /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])(_material_ui_core_TextField__WEBPACK_IMPORTED_MODULE_10___default.a, _objectSpread(_objectSpread({
          inputRef: inputRef
        }, params), {}, {
          variant: "filled",
          focused: false
        }), void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 353,
          columnNumber: 46
        }, undefined)
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 337,
        columnNumber: 29
      }, undefined)]
    }, void 0, true, {
      fileName: _jsxFileName,
      lineNumber: 291,
      columnNumber: 13
    }, undefined), bottomWrap]
  }, void 0, true, {
    fileName: _jsxFileName,
    lineNumber: 286,
    columnNumber: 9
  }, undefined);
};

TimePicker.defaultProps = {
  size: 'md',
  fullWidth: false,
  margin: 0,
  required: false,
  theme: 'light',
  format: 'AM',
  slideByArrows: false
};
TimePicker.propTypes = {
  format: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.string,
  required: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.bool,
  slideByArrows: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.bool,
  theme: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.string,
  helperText: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.string,
  direction: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.string,
  fullWidth: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.bool,
  size: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.string,
  refBind: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.any,
  label: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.object,
  options: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.shape({
    start: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.string,
    interval: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.string | prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.number,
    end: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.string
  }).isRequired,
  width: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.oneOfType([prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.string, prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.number]),
  errors: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.string,
  change: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.func,
  shouldDisablePastDate: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.bool,
  margin: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.oneOfType([prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.array, prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.number]),
  value: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.oneOfType([prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.string, prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.object])
};
/* harmony default export */ __webpack_exports__["default"] = (/*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.memo(TimePicker));

/***/ }),

/***/ "./Components/Shared/UI/TimePicker/styles.js":
/*!***************************************************!*\
  !*** ./Components/Shared/UI/TimePicker/styles.js ***!
  \***************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var react_jss__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react-jss */ "react-jss");
/* harmony import */ var react_jss__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jss__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! static/styles/jss/variables */ "./static/styles/jss/variables.js");


/* harmony default export */ __webpack_exports__["default"] = (Object(react_jss__WEBPACK_IMPORTED_MODULE_0__["createUseStyles"])({
  'bottom-wrap': {
    lineHeight: '14px',
    position: 'absolute',
    bottom: '0px',
    fontSize: '11px',
    color: '#C7C7C7',
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'space-between',
    width: '100%',
    '& .helper-text': {
      margin: '0px'
    }
  },
  'error-line': {
    fontFamily: 'Arial',
    position: 'absolute',
    left: '0',
    bottom: '0px',
    display: 'inline-block',
    transition: 'all 400ms cubic-bezier(0.175, 0.885, 0.32, 1.275)',
    fontSize: '11px',
    lineHeight: '14px',
    color: static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$danger,
    width: '100%'
  },
  'timepicker-dialog': {
    backgroundColor: props => props.overlayBG
  },
  'mobile-wheel-picker': {
    height: '290px',
    width: '280px',
    borderRadius: '4px',
    fontFamily: 'Arial',
    backgroundColor: props => props.backgroundColor,
    border: props => props.border,
    boxShadow: '0 24px 38px 3px rgb(0 0 0 / 14%), 0 9px 46px 8px rgb(0 0 0 / 12%), 0 11px 15px -7px rgb(0 0 0 / 20%)',
    padding: '24px',
    display: 'flex',
    flexDirection: 'column',
    justifyContent: 'space-between',
    '& h4': {
      color: props => props.textColor,
      fontSize: '16px',
      fontWeight: 'bold'
    },
    '& .pickers-wrapper': {
      display: 'flex',
      alignItems: 'center',
      height: '100%',
      position: 'relative',
      '&::after': {
        content: '":"',
        position: 'absolute',
        left: '0',
        right: '0',
        margin: 'auto',
        width: '8px',
        fontSize: '24px',
        fontWeight: 'bold',
        height: '37px',
        top: '0',
        bottom: '0',
        color: props => props.textColor
      },
      '& .rmc-picker': {
        height: '80%',
        '& .rmc-picker-mask': {
          background: 'none !important'
        },
        '& .rmc-picker-indicator': {
          height: '47px',
          borderTop: '2PX solid #3B83D7',
          borderBottom: '2PX solid #3B83D7',
          right: '0',
          margin: 'auto',
          width: '60%'
        },
        '& .rmc-picker-item': {
          height: '47px',
          lineHeight: '47px',
          color: props => props.selectedItem,
          fontSize: '24px',
          fontWeight: '400',
          transition: '.1s'
        },
        '& .rmc-picker-item-selected': {
          fontSize: '24px',
          fontWeight: 'bold',
          color: props => props.textColor
        }
      }
    },
    '& .actions-wrap': {
      textAlign: 'right',
      marginTop: '20px',
      '& > button': {
        outline: 'none',
        color: props => props.actionsColor,
        fontSize: '13px',
        fontWeight: 'bold',
        background: 'none',
        border: 'none',
        textTransform: 'uppercase',
        cursor: 'pointer'
      }
    }
  }
}));

/***/ }),

/***/ "./Components/Shared/UI/index.js":
/*!***************************************!*\
  !*** ./Components/Shared/UI/index.js ***!
  \***************************************/
/*! exports provided: Button, Input, Select, Image, InputLikeSelect, DatePicker, TimePicker, SimpleDialog, Phone, RangeSlider, Tag */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _Button__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Button */ "./Components/Shared/UI/Button/index.jsx");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Button", function() { return _Button__WEBPACK_IMPORTED_MODULE_0__["default"]; });

/* harmony import */ var _Input__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Input */ "./Components/Shared/UI/Input/index.jsx");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Input", function() { return _Input__WEBPACK_IMPORTED_MODULE_1__["default"]; });

/* harmony import */ var _Select__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Select */ "./Components/Shared/UI/Select/index.jsx");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Select", function() { return _Select__WEBPACK_IMPORTED_MODULE_2__["default"]; });

/* harmony import */ var _Image__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Image */ "./Components/Shared/UI/Image/index.jsx");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Image", function() { return _Image__WEBPACK_IMPORTED_MODULE_3__["default"]; });

/* harmony import */ var _InputLikeSelectScroll__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./InputLikeSelectScroll */ "./Components/Shared/UI/InputLikeSelectScroll/index.jsx");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "InputLikeSelect", function() { return _InputLikeSelectScroll__WEBPACK_IMPORTED_MODULE_4__["default"]; });

/* harmony import */ var _DatePicker__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./DatePicker */ "./Components/Shared/UI/DatePicker/index.jsx");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DatePicker", function() { return _DatePicker__WEBPACK_IMPORTED_MODULE_5__["default"]; });

/* harmony import */ var _TimePicker__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./TimePicker */ "./Components/Shared/UI/TimePicker/index.jsx");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TimePicker", function() { return _TimePicker__WEBPACK_IMPORTED_MODULE_6__["default"]; });

/* harmony import */ var _Dialog__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./Dialog */ "./Components/Shared/UI/Dialog/index.jsx");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SimpleDialog", function() { return _Dialog__WEBPACK_IMPORTED_MODULE_7__["default"]; });

/* harmony import */ var _PhoneMask__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./PhoneMask */ "./Components/Shared/UI/PhoneMask/index.jsx");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Phone", function() { return _PhoneMask__WEBPACK_IMPORTED_MODULE_8__["default"]; });

/* harmony import */ var _InputRange__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./InputRange */ "./Components/Shared/UI/InputRange/index.jsx");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "RangeSlider", function() { return _InputRange__WEBPACK_IMPORTED_MODULE_9__["default"]; });

/* harmony import */ var _Tag__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./Tag */ "./Components/Shared/UI/Tag/index.jsx");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Tag", function() { return _Tag__WEBPACK_IMPORTED_MODULE_10__["default"]; });














/***/ }),

/***/ "./Components/Shared/UI/makeStylesUI.js":
/*!**********************************************!*\
  !*** ./Components/Shared/UI/makeStylesUI.js ***!
  \**********************************************/
/*! exports provided: useFormControlStyles, usePopoverStyles, useSelectStyles, useLabelStyles, useAutoCompleteStyles, useItemStyles, useDatePickerStyles, usePickerPaperStyles, useDialogStyles, useRangeSliderStyles, useDropDownPopoverStyles */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "useFormControlStyles", function() { return useFormControlStyles; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "usePopoverStyles", function() { return usePopoverStyles; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "useSelectStyles", function() { return useSelectStyles; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "useLabelStyles", function() { return useLabelStyles; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "useAutoCompleteStyles", function() { return useAutoCompleteStyles; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "useItemStyles", function() { return useItemStyles; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "useDatePickerStyles", function() { return useDatePickerStyles; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "usePickerPaperStyles", function() { return usePickerPaperStyles; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "useDialogStyles", function() { return useDialogStyles; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "useRangeSliderStyles", function() { return useRangeSliderStyles; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "useDropDownPopoverStyles", function() { return useDropDownPopoverStyles; });
/* harmony import */ var _material_ui_core_styles__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @material-ui/core/styles */ "@material-ui/core/styles");
/* harmony import */ var _material_ui_core_styles__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_material_ui_core_styles__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! static/styles/jss/variables */ "./static/styles/jss/variables.js");
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }



const sharedProps = {
  overflowThumb: {
    'max-height': 220,
    overflowX: 'hidden',
    scrollbarColor: props => props.isDark ? '#C7C7C7 #07224D' : '#C7C7C7 #EFEFEF',
    scrollbarWidth: 'thin',
    '&::-webkit-scrollbar': {
      width: '6px',
      backgroundColor: props => props.isDark ? '#07224D' : '#EFEFEF'
    },
    '&::-webkit-scrollbar-thumb': {
      borderRadius: '10px',
      background: '#C7C7C7'
    }
  },
  disableNoneLayer: {
    position: 'relative',
    '&::after': {
      content: '""',
      display: 'block',
      border: '0',
      position: 'absolute',
      width: '100%',
      height: '100%',
      background: props => (props.isDark ? '#0a29559e' : '#ffffffa8') + '!important',
      zIndex: '999',
      left: '0',
      top: '0',
      transform: 'scale(1)'
    },
    '& .MuiInputAdornment-root': {
      zIndex: '-1 !important'
    }
  }
};
const useFormControlStyles = Object(_material_ui_core_styles__WEBPACK_IMPORTED_MODULE_0__["makeStyles"])(theme => ({
  root: {
    userSelect: 'none',
    width: props => props.width,
    display: 'flex',
    '& label': {
      fontSize: props => static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$input['$' + props.size].$fontSize
    },
    '& .MuiSelect-root, & .MuiAutocomplete-input': {
      padding: props => static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$input['$' + props.size].$padding + '!important',
      fontSize: props => static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$input['$' + props.size].$fontSize + 'px'
    },
    '&.disable-select-wrapper': {
      '& .MuiAutocomplete-root': _objectSpread({}, sharedProps.disableNoneLayer)
    },
    // input Mask
    '& .mask-input': {
      position: 'relative',
      '&[data-disabled=\"true\"]': {
        '& .MuiInputBase-root': _objectSpread({}, sharedProps.disableNoneLayer)
      },
      '& > .MuiTextField-root': {
        width: '100%',
        position: 'relative',
        zIndex: '22',
        '& .MuiInputBase-root': {
          transition: '.4s',
          marginBottom: props => props.marginBottom,
          boxShadow: props => props.boxShadow,
          color: props => props.valueColor,
          borderRadius: props => props.isOpened ? static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$input.$radius + ' ' + static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$input.$radius + ' 0 0' : static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$input.$radius,
          backgroundColor: props => (props.backgroundColor || '#fff') + '!important',
          zIndex: '22',
          '& input::-webkit-input-placeholder': {
            color: props => props.placeholderColor,
            opacity: '1'
          },
          '&::before': {
            display: 'none'
          },
          padding: '0 !important',
          '&:hover': _objectSpread({}, static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$input.$hover),
          '& input': {
            padding: props => static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$input['$' + props.size].$padding,
            fontSize: props => static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$input['$' + props.size].$fontSize + 'px',
            height: 'auto',
            paddingLeft: '40px !important',
            borderRadius: 'inherit',
            zIndex: '222',
            '&:focus': _objectSpread({}, static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$input.$focus)
          },
          '& .MuiInputAdornment-root': {
            '&.MuiInputAdornment-positionStart': {
              left: '12px'
            },
            margin: 0,
            position: 'absolute',
            '& .icon-clock': {
              color: static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$datepicker.$iconColor,
              fontSize: props => static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$datepicker['$' + props.size].$iconSize
            },
            '&.MuiInputAdornment-positionEnd': {
              height: 'auto',
              margin: 'auto',
              top: '0px',
              right: '0px',
              bottom: '0px',
              position: 'absolute',
              paddingRight: '4px',
              zIndex: '223',
              '& .arrows-slide-datepicker': {
                display: 'flex',
                justifyContent: 'center',
                alignItems: 'center',
                '& svg': {
                  width: '30px',
                  cursor: 'pointer',
                  fill: props => props.iconColor,
                  '&.left-icon': {
                    transform: 'rotate(90deg)'
                  },
                  '&.right-icon': {
                    transform: 'rotate(-90deg)'
                  },
                  '&.disable-btn': {
                    cursor: 'not-allowed',
                    opacity: '0.5'
                  }
                }
              }
            }
          }
        }
      },
      '&.focused-input': {
        '& .MuiInputBase-root': {
          boxShadow: 'none !important'
        }
      },
      '& .MuiAutocomplete-root': {
        position: 'absolute',
        opacity: '0',
        width: '100%',
        visibility: 'hidden',
        top: '0',
        margin: '0 !important'
      }
    }
  }
}));
const usePopoverStyles = Object(_material_ui_core_styles__WEBPACK_IMPORTED_MODULE_0__["makeStyles"])(() => ({
  paper: {
    transitionDuration: '0s !important',
    backgroundColor: props => props.backgroundColor,
    borderRadius: '0 0 ' + static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$input.$radius + ' ' + static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$input.$radius,
    border: props => props.isDark ? '1px solid ' + static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$select.$dark.$borderColor : 'none',
    marginLeft: props => props.marginLeft,
    boxShadow: '0px 2px 2.5px 0px rgb(0 0 0 / 45%)',
    marginTop: props => props.paperMarginTop,
    '& .MuiList-root': _objectSpread(_objectSpread({}, sharedProps.overflowThumb), {}, {
      '& > li': {
        color: props => props.listItemColor,
        fontSize: props => static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$input['$' + props.size].$fontSize,
        padding: props => static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$select.$dropdown.$listItem['$' + props.size].$padding,
        '& .MuiListItemText-root': {
          margin: props => static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$select.$dropdown.$listItem['$' + props.size].$margin
        },
        '&.Mui-selected': {
          color: props => props.selectedItemColor,
          backgroundColor: props => props.selectedItemBG,
          fontWeight: 'bold',
          '& .MuiListItemIcon-root': {
            color: 'inherit',
            '& span.icon': {
              color: 'inherit'
            }
          }
        }
      }
    })
  }
}));
const useSelectStyles = Object(_material_ui_core_styles__WEBPACK_IMPORTED_MODULE_0__["makeStyles"])(() => ({
  select: {
    '&:before, &:after': {
      display: 'none'
    },
    width: '100%',
    marginTop: '0px !important',
    transition: '.4s',
    lineHeight: 'inherit',
    marginBottom: props => props.marginBottom,
    boxShadow: props => props.isOpened ? '0px 1px 2px 0px rgb(0 0 0 / 45%)' : 'none',
    borderRadius: props => props.isOpened ? static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$input.$radius + ' ' + static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$input.$radius + ' 0 0' : static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$input.$radius,
    backgroundColor: props => props.backgroundColor || '#fff',
    zIndex: '22',
    '&.Mui-disabled': _objectSpread({
      pointerEvents: 'none'
    }, sharedProps.disableNoneLayer)
  },
  root: {
    minHeight: 'auto',
    padding: static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$input.$padding,
    fontSize: static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$input.$fontSize,
    boxShadow: props => props.boxShadow,
    borderRadius: 'inherit !important',
    transition: '.4s',
    backgroundColor: 'transparent !important',
    color: props => props.textColor,
    '&[aria-expanded=\"true\"]': _objectSpread({}, static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$input.$focus),
    '& .default-value-empty': {
      color: props => props.placeholderColor
    },
    '&:hover': _objectSpread({}, static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$input.$hover)
  },
  icon: {
    fill: props => props.iconColor,
    fontSize: '30px',
    top: 'calc(50% - 15px)',
    right: '4px'
  },
  disabled: {}
}));
const useLabelStyles = Object(_material_ui_core_styles__WEBPACK_IMPORTED_MODULE_0__["makeStyles"])(() => ({
  root: {
    transform: 'translate(0px) !important',
    position: 'relative',
    fontSize: static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$input.$fontSize,
    fontWeight: '600',
    paddingBottom: '7px',
    marginBottom: '0',
    color: props => props.color
  },
  disabled: {
    '&:not(.Mui-error)': {
      color: props => [props.color, '!important']
    }
  },
  error: {
    color: static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$danger + '!important'
  }
}));
const useAutoCompleteStyles = Object(_material_ui_core_styles__WEBPACK_IMPORTED_MODULE_0__["makeStyles"])(() => ({
  root: {
    marginBottom: props => props.marginBottom,
    zIndex: '22',
    '&.Mui-focused .MuiInputBase-root': _objectSpread({}, static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$input.$focus),
    '&.MuiMultiple_Autocomplete_field .MuiFilledInput-root': {
      // todo need to discuss about multiple prop
      display: 'flex',
      flexWrap: 'nowrap',
      overflow: 'hidden',
      '&::-webkit-scrollbar-thumb': {
        width: '0px',
        background: 'none',
        height: '0px'
      },
      '&::-webkit-scrollbar': {
        background: 'none',
        height: '0px',
        width: '0px'
      }
    }
  },
  popupIndicator: {
    padding: '0',
    '&:hover': {
      backgroundColor: 'transparent'
    },
    '& .MuiTouchRipple-root': {
      display: 'none'
    },
    '& .MuiIconButton-label': {
      '& svg': {
        fill: props => props.iconColor,
        fontSize: '30px'
      }
    }
  },
  endAdornment: {
    bottom: '0',
    top: '0',
    margin: 'auto',
    height: '30px',
    width: '30px',
    right: '4px !important'
  },
  inputRoot: {
    boxShadow: props => props.boxShadow,
    transition: '.4s',
    color: props => props.textColor,
    borderRadius: props => props.isOpened ? static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$input.$radius + ' ' + static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$input.$radius + ' 0 0' : static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$input.$radius,
    backgroundColor: props => (props.backgroundColor || '#fff') + '!important',
    '& input::-webkit-input-placeholder': {
      color: props => props.placeholderColor,
      opacity: '1'
    },
    '&::before': {
      display: 'none'
    },
    padding: '0 !important',
    '&:hover': _objectSpread({}, static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$input.$hover)
  },
  input: {
    padding: static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$input.$padding + '!important',
    fontSize: static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$input.$fontSize,
    height: 'auto'
  },
  clearIndicator: {
    display: 'none'
  },
  popper: {
    border: props => props.isDark ? '1px solid ' + static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$select.$dark.$borderColor : 'none',
    boxShadow: '0px 2px 2.5px 0px rgb(0 0 0 / 45%)',
    borderRadius: '0 0 ' + static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$input.$radius + ' ' + static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$input.$radius,
    marginTop: props => props.paperMarginTop,
    boxSizing: 'content-box'
  },
  paper: {
    margin: '0',
    boxShadow: 'none',
    backgroundColor: props => (props.backgroundColor || '#fff') + '!important',
    borderRadius: '0',
    '& .MuiAutocomplete-noOptions': {
      color: props => props.listItemColor,
      fontSize: props => static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$input['$' + props.size].$fontSize,
      padding: props => static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$input['$' + props.size].$padding
    }
  },
  listbox: _objectSpread(_objectSpread({}, sharedProps.overflowThumb), {}, {
    '& > li': {
      transition: '.2s',
      color: props => props.listItemColor,
      fontSize: props => static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$input['$' + props.size].$fontSize,
      padding: props => static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$input['$' + props.size].$padding,
      letterSpacing: '0.7px',
      '&.MuiAutocomplete-option:active, &.MuiAutocomplete-option[aria-selected=\"true\"]': {
        color: props => props.selectedItemColor,
        backgroundColor: props => props.selectedItemBG,
        textShadow: '.5px 0px 0px #fff, 0px 0px 0px #fff, 0px 0px 0px #fff',
        letterSpacing: '0.7px'
      }
    }
  })
}));
const useItemStyles = Object(_material_ui_core_styles__WEBPACK_IMPORTED_MODULE_0__["makeStyles"])(() => ({
  root: {
    '& .MuiListItemIcon-root': {
      minWidth: '0',
      width: props => static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$select.$dropdown.$listItem['$' + props.size].$size,
      height: props => static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$select.$dropdown.$listItem['$' + props.size].$size,
      borderRadius: '50%',
      marginRight: props => static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$select.$dropdown.$listItem['$' + props.size].$iconRight,
      overflow: 'hidden',
      '& img': {
        width: '100%',
        objectFit: 'cover',
        objectPosition: 'center',
        '&.till-loading': {
          transform: 'scale(3)'
        }
      },
      '& .like-avatar': {
        fontSize: '15px',
        fontWeight: '600',
        width: '100%',
        height: '100%',
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
        backgroundColor: props => props.avatarBG,
        color: props => props.avatarColor
      },
      '& span.icon': {
        width: '100%',
        height: '100%',
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
        color: props => props.iconColor,
        fontSize: props => static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$select.$dropdown.$listItem['$' + props.size].$iconSize
      }
    },
    '& .MuiListItemText-root': {
      margin: '0',
      '& .MuiListItemText-primary': {
        fontSize: 'inherit'
      }
    }
  }
}));
const usePickerPaperStyles = Object(_material_ui_core_styles__WEBPACK_IMPORTED_MODULE_0__["makeStyles"])(() => ({
  root: {
    '&.mobile-mode_datePicker': {
      backgroundColor: props => props.isDark ? 'rgb(255 243 243 / 30%)' : 'rgba(0,0,0, .5)',
      '& .MuiPopover-paper': {
        left: '0px !important',
        right: '0px !important',
        top: '0px !important',
        bottom: '0px !important',
        width: 'fit-content !important',
        height: 'fit-content !important',
        margin: 'auto'
      }
    },
    '& .MuiPopover-paper': {
      transitionDuration: '0s !important',
      marginTop: '5px',
      backgroundColor: props => props.backgroundColor,
      border: props => props.isDark ? '1px solid #11509F' : 'none',
      boxShadow: '0 2px 4px 0 rgba(0,0,0,0.5)',
      '& .MuiPickersCalendarHeader-daysHeader': {
        '& .MuiTypography-root': {
          color: props => props.weekColor
        }
      },
      '& .MuiPickersCalendarHeader-switchHeader': {
        '& .MuiTypography-root': {
          color: props => props.valueColor
        }
      },
      '& .MuiButtonBase-root': {
        backgroundColor: props => props.backgroundColor,
        color: props => props.valueColor,
        '&.MuiPickersDay-daySelected': {
          backgroundColor: static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$datepicker.$actionsColor,
          color: '#fff !important',
          '&.MuiPickersDay-dayDisabled': {
            color: '#b4b4b4 !important'
          }
        },
        '&.MuiPickersDay-dayDisabled': {
          color: props => [props.weekColor, '!important']
        }
      }
    },
    '& .datepicker-actions-wrap': {
      display: 'flex',
      justifyContent: 'flex-end',
      margin: '20px',
      '& button': {
        background: 'none',
        border: 'none',
        fontWeight: '900',
        color: props => props.actionsColor,
        fontSize: '13px',
        textTransform: 'uppercase',
        cursor: 'pointer',
        outline: 'none',
        '&.disable-select': {
          pointerEvents: 'none',
          opacity: .5
        }
      }
    }
  }
}));
const useDatePickerStyles = Object(_material_ui_core_styles__WEBPACK_IMPORTED_MODULE_0__["makeStyles"])(() => ({
  root: {
    margin: '0',
    '& .MuiInputBase-root': {
      '&:before, &:after': {
        display: 'none'
      },
      '&:hover': _objectSpread({}, static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$input.$hover),
      width: '100%',
      marginTop: '0px !important',
      transition: '.4s',
      padding: '0',
      marginBottom: props => props.marginBottom,
      outline: 'none',
      zIndex: '22',
      boxShadow: props => props.isOpened ? '0px 0px 1px 2px #B0F2F1 inset' : 'none',
      borderRadius: static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$input.$radius,
      backgroundColor: props => props.backgroundColor || '#fff',
      '&::after': {
        color: props => props.valueColor,
        display: props => props.dayNearly ? 'block' : 'none',
        content: props => '\"' + props.dayNearly + '\"',
        transform: 'scale(1)',
        top: '0',
        margin: 'auto',
        bottom: '0',
        height: props => static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$input['$' + props.size].$fontSize + 'px',
        left: '40px',
        borderBottom: 'none',
        fontSize: props => static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$input['$' + props.size].$fontSize + 'px',
        lineHeight: props => static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$input['$' + props.size].$fontSize + 'px'
      },
      '&.Mui-disabled': _objectSpread({}, sharedProps.disableNoneLayer),
      '& input': {
        padding: props => static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$input['$' + props.size].$padding + '!important',
        fontSize: props => static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$input['$' + props.size].$fontSize + 'px',
        color: props => props.valueColor,
        opacity: props => props.dayNearly ? '0' : 1,
        height: 'auto',
        '&::-webkit-input-placeholder': {
          color: props => props.placeholderColor,
          opacity: '1 !important'
        }
      },
      '& .MuiInputBase-input': {
        paddingLeft: '40px !important'
      },
      '& .MuiInputAdornment-positionEnd': {
        height: 'auto',
        margin: 'auto',
        top: '0px',
        right: '0px',
        bottom: '0px',
        position: 'absolute',
        paddingRight: '4px',
        '& .arrows-slide-datepicker': {
          display: 'flex',
          justifyContent: 'center',
          alignItems: 'center',
          '& svg': {
            width: '30px',
            cursor: 'pointer',
            fill: props => props.iconColor,
            '&.left-icon': {
              transform: 'rotate(90deg)'
            },
            '&.right-icon': {
              transform: 'rotate(-90deg)'
            },
            '&.disable-btn': {
              cursor: 'not-allowed',
              opacity: '0.5'
            }
          }
        }
      },
      '& .MuiInputAdornment-positionStart': {
        position: 'absolute',
        left: '0',
        marginLeft: '12px',
        marginRight: '12px',
        marginTop: '0px',
        height: 'auto',
        '& button': {
          padding: '0',
          cursor: 'text',
          fontSize: props => static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$datepicker['$' + props.size].$iconSize,
          '& .MuiIconButton-label': {
            color: static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$datepicker.$iconColor
          }
        }
      }
    }
  }
}));
const useDialogStyles = Object(_material_ui_core_styles__WEBPACK_IMPORTED_MODULE_0__["makeStyles"])(() => ({
  root: {
    '& .MuiBackdrop-root': {
      backgroundColor: 'rgba(0, 0, 0, 0.6)'
    },
    '& .MuiDialog-container': {
      '& .MuiDialogTitle-root': {
        '& .MuiTypography-h6': {
          fontWeight: 'bold',
          letterSpacing: '-0.5px',
          fontSize: '19px'
        }
      },
      '& .MuiDialogContent-root': {
        lineHeight: '19px',
        margin: '0 2px',
        padding: '8px 20px',
        '&::-webkit-scrollbar': {
          width: '8px',
          backgroundColor: '#EFEFEF'
        },
        '&::-webkit-scrollbar-thumb': {
          borderRadius: '10px',
          background: '#C7C7C7'
        }
      },
      '& .MuiDialogActions-root': {
        padding: '8px 24px',
        marginBottom: '16px',
        '&[data-vertical=\"true\"]': {
          flexDirection: 'column',
          alignItems: 'flex-end',
          '& > button:first-child': {
            marginBottom: '15px'
          }
        },
        '& > button': {
          outline: 'none',
          color: static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_1__["default"].$datepicker.$actionsColor,
          fontSize: '13px',
          fontWeight: 'bold',
          background: 'none',
          border: 'none',
          textTransform: 'uppercase',
          cursor: 'pointer',
          '&:disabled': {
            color: '#D8D8D8',
            cursor: 'default'
          }
        }
      }
    }
  },
  paper: {
    minWidth: '280px'
  }
}));
const useRangeSliderStyles = Object(_material_ui_core_styles__WEBPACK_IMPORTED_MODULE_0__["makeStyles"])(() => ({
  root: {
    marginBottom: props => props.marginBottom,
    display: 'block',
    zIndex: '22',
    height: '6px'
  },
  rail: {
    height: '6px',
    borderRadius: '3px',
    backgroundColor: '#C3CBD5'
  },
  track: {
    borderRadius: '3px',
    backgroundColor: '#B0F2F1',
    height: '6px'
  },
  thumb: {
    height: '22px !important',
    width: '22px !important',
    backgroundColor: '#B0F2F1',
    boxShadow: '0 2px 4px 0 rgba(0,0,0,0.5) !important',
    marginTop: '-8px !important'
  },
  disabled: {
    '& .MuiSlider-rail': {
      backgroundColor: '#bdbdbd'
    },
    '& .MuiSlider-track': {
      backgroundColor: '#bdbdbd'
    },
    '& .MuiSlider-thumb': {
      backgroundColor: '#bdbdbd'
    }
  }
}));
const useDropDownPopoverStyles = Object(_material_ui_core_styles__WEBPACK_IMPORTED_MODULE_0__["makeStyles"])(() => ({
  paper: {
    margin: props => props.margin,
    transform: 'scale(1) !important',
    boxShadow: '0 2px 4px 0 rgba(0,0,0,0.5)',
    borderRadius: '2px',
    // transitionDuration: '0s !important',
    overflow: props => props.overflow,
    '&::after': {
      display: props => props.triangle || 'none',
      position: 'absolute',
      content: '""',
      top: '-8px',
      right: '42px',
      width: '0',
      height: '0',
      borderLeft: '10px solid transparent',
      borderRight: '10px solid transparent',
      borderBottom: '10px solid #fff'
    }
  }
}));


/***/ }),

/***/ "./HOC/withReduxSaga.js":
/*!******************************!*\
  !*** ./HOC/withReduxSaga.js ***!
  \******************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ "react/jsx-dev-runtime");
/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var redux_saga__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! redux-saga */ "redux-saga");
/* harmony import */ var redux_saga__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(redux_saga__WEBPACK_IMPORTED_MODULE_2__);

var _jsxFileName = "C:\\Users\\arthu\\OneDrive\\Desktop\\Important\\daser\\next\\sexjobs\\HOC\\withReduxSaga.js";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }




function withReduxSaga(BaseComponent) {
  class WrappedComponent extends react__WEBPACK_IMPORTED_MODULE_1__["Component"] {
    static async getInitialProps(props) {
      const {
        isServer,
        store
      } = props.ctx;
      let pageProps = {};

      if (BaseComponent.getInitialProps) {
        pageProps = await BaseComponent.getInitialProps(props);
      } // Stop saga on the server


      if (isServer) {
        store.dispatch(redux_saga__WEBPACK_IMPORTED_MODULE_2__["END"]);
        await store.sagaTask.toPromise();
      }

      return pageProps;
    } // end getInitialProps


    render() {
      return /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])(BaseComponent, _objectSpread({}, this.props), void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 29,
        columnNumber: 20
      }, this);
    }

  } // end class


  _defineProperty(WrappedComponent, "displayName", `withReduxSaga(${BaseComponent.displayName || BaseComponent.name || "BaseComponent"})`);

  return WrappedComponent;
}

/* harmony default export */ __webpack_exports__["default"] = (withReduxSaga);

/***/ }),

/***/ "./Hooks/use-image.js":
/*!****************************!*\
  !*** ./Hooks/use-image.js ***!
  \****************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);


const useImage = ({
  src
}) => {
  const {
    0: loaded,
    1: setLoaded
  } = Object(react__WEBPACK_IMPORTED_MODULE_0__["useState"])(false);
  const {
    0: error,
    1: setError
  } = Object(react__WEBPACK_IMPORTED_MODULE_0__["useState"])(false);
  Object(react__WEBPACK_IMPORTED_MODULE_0__["useEffect"])(() => {
    const img = new Image();
    img.src = src;

    img.onload = () => setLoaded(true);

    img.onerror = () => setError(true);
  }, [src]);
  return {
    loaded,
    error
  };
};

/* harmony default export */ __webpack_exports__["default"] = (useImage);

/***/ }),

/***/ "./Hooks/use-media-device.js":
/*!***********************************!*\
  !*** ./Hooks/use-media-device.js ***!
  \***********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return useMediaDevice; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var utils_constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! utils/constants */ "./utils/constants.js");



const useWidth = width => {
  const keys = Object.keys(utils_constants__WEBPACK_IMPORTED_MODULE_1__["breakpoints"].keys).reverse();
  const devices = keys.filter(key => width <= utils_constants__WEBPACK_IMPORTED_MODULE_1__["breakpoints"].keys[key]);
  return devices.pop();
};

function useMediaDevice() {
  const isSSR = false;
  const {
    0: deviceSize,
    1: setDeviceSize
  } = Object(react__WEBPACK_IMPORTED_MODULE_0__["useState"])(useWidth(isSSR ? window.innerWidth : 1200));
  const {
    0: windowWidth,
    1: setWindowWidth
  } = Object(react__WEBPACK_IMPORTED_MODULE_0__["useState"])(isSSR ? window.innerWidth : 1200);
  const {
    0: deviceType,
    1: setDeviceType
  } = Object(react__WEBPACK_IMPORTED_MODULE_0__["useState"])('desktop');

  function changeWindowSize() {
    setWindowWidth(window.innerWidth);
    setDeviceSize(useWidth(window.innerWidth));
  }

  Object(react__WEBPACK_IMPORTED_MODULE_0__["useEffect"])(() => {
    if (utils_constants__WEBPACK_IMPORTED_MODULE_1__["breakpoints"].keys[deviceSize] <= utils_constants__WEBPACK_IMPORTED_MODULE_1__["deviceChecking"].mobile) setDeviceType('mobile');else if (utils_constants__WEBPACK_IMPORTED_MODULE_1__["breakpoints"].keys[deviceSize] >= utils_constants__WEBPACK_IMPORTED_MODULE_1__["deviceChecking"].tablet[0] && utils_constants__WEBPACK_IMPORTED_MODULE_1__["breakpoints"].keys[deviceSize] <= utils_constants__WEBPACK_IMPORTED_MODULE_1__["deviceChecking"].tablet[1]) setDeviceType('tablet');else setDeviceType('desktop');
  }, [deviceSize]);
  react__WEBPACK_IMPORTED_MODULE_0___default.a.useEffect(() => {
    isSSR && window.addEventListener("resize", changeWindowSize);
    return () => {
      isSSR && window.removeEventListener("resize", changeWindowSize);
    };
  }, []);
  return {
    windowWidth,
    deviceSize,
    deviceType
  };
}

/***/ }),

/***/ "./Hooks/use-scroll.js":
/*!*****************************!*\
  !*** ./Hooks/use-scroll.js ***!
  \*****************************/
/*! exports provided: useScrollDirection */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "useScrollDirection", function() { return useScrollDirection; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
 //
// export function useScroll() {
//     const isSSR = typeof window !== "undefined";
//
//     const [lastScrollTop, setLastScrollTop] = useState(0);
//     const [bodyOffset, setBodyOffset] = useState(
//         isSSR ? document.body.getBoundingClientRect() : 0
//     );
//     const [scrollY, setScrollY] = useState(bodyOffset.top);
//     const [scrollDirection, setScrollDirection] = useState();
//
//     const listener = e => {
//         setBodyOffset(document.body.getBoundingClientRect());
//         setScrollY(window.scrollY);
//         setScrollDirection(lastScrollTop > -window.scrollY ? "up" : "down");
//         // setLastScrollTop(-window.scrollY);
//     };
//
//     useEffect(() => {
//         isSSR && window.addEventListener("scroll", listener);
//         return () => {
//             isSSR && window.removeEventListener("scroll", listener);
//         };
//     });
//
//     return {
//         scrollY,
//         scrollDirection
//     };
// }

const SCROLL_UP = "up";
const SCROLL_DOWN = "down";
const useScrollDirection = ({
  initialDirection,
  thresholdPixels,
  off
} = {}) => {
  const {
    0: scrollDir,
    1: setScrollDir
  } = Object(react__WEBPACK_IMPORTED_MODULE_0__["useState"])(initialDirection);
  const {
    0: scrollY,
    1: setScrollY
  } = Object(react__WEBPACK_IMPORTED_MODULE_0__["useState"])(0);
  Object(react__WEBPACK_IMPORTED_MODULE_0__["useEffect"])(() => {
    const threshold = thresholdPixels || 0;
    let lastScrollY = window.pageYOffset;
    let ticking = false;

    const updateScrollDir = () => {
      const scrollY = window.pageYOffset;

      if (Math.abs(scrollY - lastScrollY) < threshold) {
        // We haven't exceeded the threshold
        ticking = false;
        return;
      }

      setScrollDir(scrollY > lastScrollY ? SCROLL_DOWN : SCROLL_UP);
      lastScrollY = scrollY > 0 ? scrollY : 0;
      ticking = false;
      setScrollY(scrollY);
    };

    const onScroll = () => {
      if (!ticking) {
        window.requestAnimationFrame(updateScrollDir);
        ticking = true;
      }
    };
    /**
     * Bind the scroll handler if `off` is set to false.
     * If `off` is set to true reset the scroll direction.
     */


    !off ? window.addEventListener("scroll", onScroll) : setScrollDir(initialDirection);
    return () => window.removeEventListener("scroll", onScroll);
  }, [initialDirection, thresholdPixels, off]);
  return {
    scrollDir,
    scrollY
  };
};

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/interopRequireDefault.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

module.exports = _interopRequireDefault;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/interopRequireWildcard.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/interopRequireWildcard.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var _typeof = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js");

function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
    return {
      "default": obj
    };
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj["default"] = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

module.exports = _interopRequireWildcard;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/typeof.js":
/*!*******************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/typeof.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    module.exports = _typeof = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    module.exports = _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

module.exports = _typeof;

/***/ }),

/***/ "./node_modules/bootstrap/dist/css/bootstrap.css":
/*!*******************************************************!*\
  !*** ./node_modules/bootstrap/dist/css/bootstrap.css ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {



/***/ }),

/***/ "./node_modules/next/app.js":
/*!**********************************!*\
  !*** ./node_modules/next/app.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! ./dist/pages/_app */ "./node_modules/next/dist/pages/_app.js")


/***/ }),

/***/ "./node_modules/next/dist/client/link.js":
/*!***********************************************!*\
  !*** ./node_modules/next/dist/client/link.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _interopRequireWildcard = __webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@babel/runtime/helpers/interopRequireWildcard.js");

exports.__esModule = true;
exports.default = void 0;

var _react = _interopRequireWildcard(__webpack_require__(/*! react */ "react"));

var _router = __webpack_require__(/*! ../next-server/lib/router/router */ "./node_modules/next/dist/next-server/lib/router/router.js");

var _router2 = __webpack_require__(/*! ./router */ "./node_modules/next/dist/client/router.js");

var _useIntersection = __webpack_require__(/*! ./use-intersection */ "./node_modules/next/dist/client/use-intersection.js");

const prefetched = {};

function prefetch(router, href, as, options) {
  if (true) return;
  if (!(0, _router.isLocalURL)(href)) return; // Prefetch the JSON page if asked (only in the client)
  // We need to handle a prefetch error here since we may be
  // loading with priority which can reject but we don't
  // want to force navigation since this is only a prefetch

  router.prefetch(href, as, options).catch(err => {
    if (true) {
      // rethrow to show invalid URL errors
      throw err;
    }
  });
  const curLocale = options && typeof options.locale !== 'undefined' ? options.locale : router && router.locale; // Join on an invalid URI character

  prefetched[href + '%' + as + (curLocale ? '%' + curLocale : '')] = true;
}

function isModifiedEvent(event) {
  const {
    target
  } = event.currentTarget;
  return target && target !== '_self' || event.metaKey || event.ctrlKey || event.shiftKey || event.altKey || // triggers resource download
  event.nativeEvent && event.nativeEvent.which === 2;
}

function linkClicked(e, router, href, as, replace, shallow, scroll, locale) {
  const {
    nodeName
  } = e.currentTarget;

  if (nodeName === 'A' && (isModifiedEvent(e) || !(0, _router.isLocalURL)(href))) {
    // ignore click for browser’s default behavior
    return;
  }

  e.preventDefault(); //  avoid scroll for urls with anchor refs

  if (scroll == null) {
    scroll = as.indexOf('#') < 0;
  } // replace state instead of push if prop is present


  router[replace ? 'replace' : 'push'](href, as, {
    shallow,
    locale,
    scroll
  }).then(success => {
    if (!success) return;

    if (scroll) {
      // FIXME: proper route announcing at Router level, not Link:
      document.body.focus();
    }
  });
}

function Link(props) {
  if (true) {
    function createPropError(args) {
      return new Error(`Failed prop type: The prop \`${args.key}\` expects a ${args.expected} in \`<Link>\`, but got \`${args.actual}\` instead.` + (false ? undefined : ''));
    } // TypeScript trick for type-guarding:


    const requiredPropsGuard = {
      href: true
    };
    const requiredProps = Object.keys(requiredPropsGuard);
    requiredProps.forEach(key => {
      if (key === 'href') {
        if (props[key] == null || typeof props[key] !== 'string' && typeof props[key] !== 'object') {
          throw createPropError({
            key,
            expected: '`string` or `object`',
            actual: props[key] === null ? 'null' : typeof props[key]
          });
        }
      } else {
        // TypeScript trick for type-guarding:
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        const _ = key;
      }
    }); // TypeScript trick for type-guarding:

    const optionalPropsGuard = {
      as: true,
      replace: true,
      scroll: true,
      shallow: true,
      passHref: true,
      prefetch: true,
      locale: true
    };
    const optionalProps = Object.keys(optionalPropsGuard);
    optionalProps.forEach(key => {
      const valType = typeof props[key];

      if (key === 'as') {
        if (props[key] && valType !== 'string' && valType !== 'object') {
          throw createPropError({
            key,
            expected: '`string` or `object`',
            actual: valType
          });
        }
      } else if (key === 'locale') {
        if (props[key] && valType !== 'string') {
          throw createPropError({
            key,
            expected: '`string`',
            actual: valType
          });
        }
      } else if (key === 'replace' || key === 'scroll' || key === 'shallow' || key === 'passHref' || key === 'prefetch') {
        if (props[key] != null && valType !== 'boolean') {
          throw createPropError({
            key,
            expected: '`boolean`',
            actual: valType
          });
        }
      } else {
        // TypeScript trick for type-guarding:
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        const _ = key;
      }
    }); // This hook is in a conditional but that is ok because `process.env.NODE_ENV` never changes
    // eslint-disable-next-line react-hooks/rules-of-hooks

    const hasWarned = _react.default.useRef(false);

    if (props.prefetch && !hasWarned.current) {
      hasWarned.current = true;
      console.warn('Next.js auto-prefetches automatically based on viewport. The prefetch attribute is no longer needed. More: https://err.sh/vercel/next.js/prefetch-true-deprecated');
    }
  }

  const p = props.prefetch !== false;
  const router = (0, _router2.useRouter)();
  const pathname = router && router.pathname || '/';

  const {
    href,
    as
  } = _react.default.useMemo(() => {
    const [resolvedHref, resolvedAs] = (0, _router.resolveHref)(pathname, props.href, true);
    return {
      href: resolvedHref,
      as: props.as ? (0, _router.resolveHref)(pathname, props.as) : resolvedAs || resolvedHref
    };
  }, [pathname, props.href, props.as]);

  let {
    children,
    replace,
    shallow,
    scroll,
    locale
  } = props; // Deprecated. Warning shown by propType check. If the children provided is a string (<Link>example</Link>) we wrap it in an <a> tag

  if (typeof children === 'string') {
    children = /*#__PURE__*/_react.default.createElement("a", null, children);
  } // This will return the first child, if multiple are provided it will throw an error


  const child = _react.Children.only(children);

  const childRef = child && typeof child === 'object' && child.ref;
  const [setIntersectionRef, isVisible] = (0, _useIntersection.useIntersection)({
    rootMargin: '200px'
  });

  const setRef = _react.default.useCallback(el => {
    setIntersectionRef(el);

    if (childRef) {
      if (typeof childRef === 'function') childRef(el);else if (typeof childRef === 'object') {
        childRef.current = el;
      }
    }
  }, [childRef, setIntersectionRef]);

  (0, _react.useEffect)(() => {
    const shouldPrefetch = isVisible && p && (0, _router.isLocalURL)(href);
    const curLocale = typeof locale !== 'undefined' ? locale : router && router.locale;
    const isPrefetched = prefetched[href + '%' + as + (curLocale ? '%' + curLocale : '')];

    if (shouldPrefetch && !isPrefetched) {
      prefetch(router, href, as, {
        locale: curLocale
      });
    }
  }, [as, href, isVisible, locale, p, router]);
  const childProps = {
    ref: setRef,
    onClick: e => {
      if (child.props && typeof child.props.onClick === 'function') {
        child.props.onClick(e);
      }

      if (!e.defaultPrevented) {
        linkClicked(e, router, href, as, replace, shallow, scroll, locale);
      }
    }
  };

  childProps.onMouseEnter = e => {
    if (!(0, _router.isLocalURL)(href)) return;

    if (child.props && typeof child.props.onMouseEnter === 'function') {
      child.props.onMouseEnter(e);
    }

    prefetch(router, href, as, {
      priority: true
    });
  }; // If child is an <a> tag and doesn't have a href attribute, or if the 'passHref' property is
  // defined, we specify the current 'href', so that repetition is not needed by the user


  if (props.passHref || child.type === 'a' && !('href' in child.props)) {
    const curLocale = typeof locale !== 'undefined' ? locale : router && router.locale;
    const localeDomain = (0, _router.getDomainLocale)(as, curLocale, router && router.locales, router && router.domainLocales);
    childProps.href = localeDomain || (0, _router.addBasePath)((0, _router.addLocale)(as, curLocale, router && router.defaultLocale));
  }

  return /*#__PURE__*/_react.default.cloneElement(child, childProps);
}

var _default = Link;
exports.default = _default;

/***/ }),

/***/ "./node_modules/next/dist/client/normalize-trailing-slash.js":
/*!*******************************************************************!*\
  !*** ./node_modules/next/dist/client/normalize-trailing-slash.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.removePathTrailingSlash = removePathTrailingSlash;
exports.normalizePathTrailingSlash = void 0;
/**
* Removes the trailing slash of a path if there is one. Preserves the root path `/`.
*/

function removePathTrailingSlash(path) {
  return path.endsWith('/') && path !== '/' ? path.slice(0, -1) : path;
}
/**
* Normalizes the trailing slash of a path according to the `trailingSlash` option
* in `next.config.js`.
*/


const normalizePathTrailingSlash =  false ? undefined : removePathTrailingSlash;
exports.normalizePathTrailingSlash = normalizePathTrailingSlash;

/***/ }),

/***/ "./node_modules/next/dist/client/request-idle-callback.js":
/*!****************************************************************!*\
  !*** ./node_modules/next/dist/client/request-idle-callback.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = void 0;

const requestIdleCallback = typeof self !== 'undefined' && self.requestIdleCallback || function (cb) {
  let start = Date.now();
  return setTimeout(function () {
    cb({
      didTimeout: false,
      timeRemaining: function () {
        return Math.max(0, 50 - (Date.now() - start));
      }
    });
  }, 1);
};

var _default = requestIdleCallback;
exports.default = _default;

/***/ }),

/***/ "./node_modules/next/dist/client/route-loader.js":
/*!*******************************************************!*\
  !*** ./node_modules/next/dist/client/route-loader.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");

exports.__esModule = true;
exports.markAssetError = markAssetError;
exports.isAssetError = isAssetError;
exports.getClientBuildManifest = getClientBuildManifest;
exports.default = void 0;

var _getAssetPathFromRoute = _interopRequireDefault(__webpack_require__(/*! ../next-server/lib/router/utils/get-asset-path-from-route */ "../next-server/lib/router/utils/get-asset-path-from-route"));

var _requestIdleCallback = _interopRequireDefault(__webpack_require__(/*! ./request-idle-callback */ "./node_modules/next/dist/client/request-idle-callback.js")); // 3.8s was arbitrarily chosen as it's what https://web.dev/interactive
// considers as "Good" time-to-interactive. We must assume something went
// wrong beyond this point, and then fall-back to a full page transition to
// show the user something of value.


const MS_MAX_IDLE_DELAY = 3800;

function withFuture(key, map, generator) {
  let entry = map.get(key);

  if (entry) {
    if ('future' in entry) {
      return entry.future;
    }

    return Promise.resolve(entry);
  }

  let resolver;
  const prom = new Promise(resolve => {
    resolver = resolve;
  });
  map.set(key, entry = {
    resolve: resolver,
    future: prom
  });
  return generator ? // eslint-disable-next-line no-sequences
  generator().then(value => (resolver(value), value)) : prom;
}

function hasPrefetch(link) {
  try {
    link = document.createElement('link');
    return (// detect IE11 since it supports prefetch but isn't detected
      // with relList.support
      !!window.MSInputMethodContext && !!document.documentMode || link.relList.supports('prefetch')
    );
  } catch (_unused) {
    return false;
  }
}

const canPrefetch = hasPrefetch();

function prefetchViaDom(href, as, link) {
  return new Promise((res, rej) => {
    if (document.querySelector(`link[rel="prefetch"][href^="${href}"]`)) {
      return res();
    }

    link = document.createElement('link'); // The order of property assignment here is intentional:

    if (as) link.as = as;
    link.rel = `prefetch`;
    link.crossOrigin = undefined;
    link.onload = res;
    link.onerror = rej; // `href` should always be last:

    link.href = href;
    document.head.appendChild(link);
  });
}

const ASSET_LOAD_ERROR = Symbol('ASSET_LOAD_ERROR'); // TODO: unexport

function markAssetError(err) {
  return Object.defineProperty(err, ASSET_LOAD_ERROR, {});
}

function isAssetError(err) {
  return err && ASSET_LOAD_ERROR in err;
}

function appendScript(src, script) {
  return new Promise((resolve, reject) => {
    script = document.createElement('script'); // The order of property assignment here is intentional.
    // 1. Setup success/failure hooks in case the browser synchronously
    //    executes when `src` is set.

    script.onload = resolve;

    script.onerror = () => reject(markAssetError(new Error(`Failed to load script: ${src}`))); // 2. Configure the cross-origin attribute before setting `src` in case the
    //    browser begins to fetch.


    script.crossOrigin = undefined; // 3. Finally, set the source and inject into the DOM in case the child
    //    must be appended for fetching to start.

    script.src = src;
    document.body.appendChild(script);
  });
}

function idleTimeout(ms, err) {
  return new Promise((_resolve, reject) => (0, _requestIdleCallback.default)(() => setTimeout(() => reject(err), ms)));
} // TODO: stop exporting or cache the failure
// It'd be best to stop exporting this. It's an implementation detail. We're
// only exporting it for backwards compatibilty with the `page-loader`.
// Only cache this response as a last resort if we cannot eliminate all other
// code branches that use the Build Manifest Callback and push them through
// the Route Loader interface.


function getClientBuildManifest() {
  if (self.__BUILD_MANIFEST) {
    return Promise.resolve(self.__BUILD_MANIFEST);
  }

  const onBuildManifest = new Promise(resolve => {
    // Mandatory because this is not concurrent safe:
    const cb = self.__BUILD_MANIFEST_CB;

    self.__BUILD_MANIFEST_CB = () => {
      resolve(self.__BUILD_MANIFEST);
      cb && cb();
    };
  });
  return Promise.race([onBuildManifest, idleTimeout(MS_MAX_IDLE_DELAY, markAssetError(new Error('Failed to load client build manifest')))]);
}

function getFilesForRoute(assetPrefix, route) {
  if (true) {
    return Promise.resolve({
      scripts: [assetPrefix + '/_next/static/chunks/pages' + encodeURI((0, _getAssetPathFromRoute.default)(route, '.js'))],
      // Styles are handled by `style-loader` in development:
      css: []
    });
  }

  return getClientBuildManifest().then(manifest => {
    if (!(route in manifest)) {
      throw markAssetError(new Error(`Failed to lookup route: ${route}`));
    }

    const allFiles = manifest[route].map(entry => assetPrefix + '/_next/' + encodeURI(entry));
    return {
      scripts: allFiles.filter(v => v.endsWith('.js')),
      css: allFiles.filter(v => v.endsWith('.css'))
    };
  });
}

function createRouteLoader(assetPrefix) {
  const entrypoints = new Map();
  const loadedScripts = new Map();
  const styleSheets = new Map();
  const routes = new Map();

  function maybeExecuteScript(src) {
    let prom = loadedScripts.get(src);

    if (prom) {
      return prom;
    } // Skip executing script if it's already in the DOM:


    if (document.querySelector(`script[src^="${src}"]`)) {
      return Promise.resolve();
    }

    loadedScripts.set(src, prom = appendScript(src));
    return prom;
  }

  function fetchStyleSheet(href) {
    let prom = styleSheets.get(href);

    if (prom) {
      return prom;
    }

    styleSheets.set(href, prom = fetch(href).then(res => {
      if (!res.ok) {
        throw new Error(`Failed to load stylesheet: ${href}`);
      }

      return res.text().then(text => ({
        href: href,
        content: text
      }));
    }).catch(err => {
      throw markAssetError(err);
    }));
    return prom;
  }

  return {
    whenEntrypoint(route) {
      return withFuture(route, entrypoints);
    },

    onEntrypoint(route, execute) {
      Promise.resolve(execute).then(fn => fn()).then(exports => ({
        component: exports && exports.default || exports,
        exports: exports
      }), err => ({
        error: err
      })).then(input => {
        const old = entrypoints.get(route);
        entrypoints.set(route, input);
        if (old && 'resolve' in old) old.resolve(input);
      });
    },

    loadRoute(route) {
      return withFuture(route, routes, async () => {
        try {
          const {
            scripts,
            css
          } = await getFilesForRoute(assetPrefix, route);
          const [, styles] = await Promise.all([entrypoints.has(route) ? [] : Promise.all(scripts.map(maybeExecuteScript)), Promise.all(css.map(fetchStyleSheet))]);
          const entrypoint = await Promise.race([this.whenEntrypoint(route), idleTimeout(MS_MAX_IDLE_DELAY, markAssetError(new Error(`Route did not complete loading: ${route}`)))]);
          const res = Object.assign({
            styles
          }, entrypoint);
          return 'error' in entrypoint ? entrypoint : res;
        } catch (err) {
          return {
            error: err
          };
        }
      });
    },

    prefetch(route) {
      // https://github.com/GoogleChromeLabs/quicklink/blob/453a661fa1fa940e2d2e044452398e38c67a98fb/src/index.mjs#L115-L118
      // License: Apache 2.0
      let cn;

      if (cn = navigator.connection) {
        // Don't prefetch if using 2G or if Save-Data is enabled.
        if (cn.saveData || /2g/.test(cn.effectiveType)) return Promise.resolve();
      }

      return getFilesForRoute(assetPrefix, route).then(output => Promise.all(canPrefetch ? output.scripts.map(script => prefetchViaDom(script, 'script')) : [])).then(() => {
        (0, _requestIdleCallback.default)(() => this.loadRoute(route));
      }).catch( // swallow prefetch errors
      () => {});
    }

  };
}

var _default = createRouteLoader;
exports.default = _default;

/***/ }),

/***/ "./node_modules/next/dist/client/router.js":
/*!*************************************************!*\
  !*** ./node_modules/next/dist/client/router.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _interopRequireWildcard = __webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@babel/runtime/helpers/interopRequireWildcard.js");

var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");

exports.__esModule = true;
exports.useRouter = useRouter;
exports.makePublicRouterInstance = makePublicRouterInstance;
exports.createRouter = exports.withRouter = exports.default = void 0;

var _react = _interopRequireDefault(__webpack_require__(/*! react */ "react"));

var _router2 = _interopRequireWildcard(__webpack_require__(/*! ../next-server/lib/router/router */ "./node_modules/next/dist/next-server/lib/router/router.js"));

exports.Router = _router2.default;
exports.NextRouter = _router2.NextRouter;

var _routerContext = __webpack_require__(/*! ../next-server/lib/router-context */ "../next-server/lib/router-context");

var _withRouter = _interopRequireDefault(__webpack_require__(/*! ./with-router */ "./node_modules/next/dist/client/with-router.js"));

exports.withRouter = _withRouter.default;
/* global window */

const singletonRouter = {
  router: null,
  // holds the actual router instance
  readyCallbacks: [],

  ready(cb) {
    if (this.router) return cb();

    if (false) {}
  }

}; // Create public properties and methods of the router in the singletonRouter

const urlPropertyFields = ['pathname', 'route', 'query', 'asPath', 'components', 'isFallback', 'basePath', 'locale', 'locales', 'defaultLocale', 'isReady'];
const routerEvents = ['routeChangeStart', 'beforeHistoryChange', 'routeChangeComplete', 'routeChangeError', 'hashChangeStart', 'hashChangeComplete'];
const coreMethodFields = ['push', 'replace', 'reload', 'back', 'prefetch', 'beforePopState']; // Events is a static property on the router, the router doesn't have to be initialized to use it

Object.defineProperty(singletonRouter, 'events', {
  get() {
    return _router2.default.events;
  }

});
urlPropertyFields.forEach(field => {
  // Here we need to use Object.defineProperty because, we need to return
  // the property assigned to the actual router
  // The value might get changed as we change routes and this is the
  // proper way to access it
  Object.defineProperty(singletonRouter, field, {
    get() {
      const router = getRouter();
      return router[field];
    }

  });
});
coreMethodFields.forEach(field => {
  // We don't really know the types here, so we add them later instead
  ;

  singletonRouter[field] = (...args) => {
    const router = getRouter();
    return router[field](...args);
  };
});
routerEvents.forEach(event => {
  singletonRouter.ready(() => {
    _router2.default.events.on(event, (...args) => {
      const eventField = `on${event.charAt(0).toUpperCase()}${event.substring(1)}`;
      const _singletonRouter = singletonRouter;

      if (_singletonRouter[eventField]) {
        try {
          _singletonRouter[eventField](...args);
        } catch (err) {
          console.error(`Error when running the Router event: ${eventField}`);
          console.error(`${err.message}\n${err.stack}`);
        }
      }
    });
  });
});

function getRouter() {
  if (!singletonRouter.router) {
    const message = 'No router instance found.\n' + 'You should only use "next/router" inside the client side of your app.\n';
    throw new Error(message);
  }

  return singletonRouter.router;
} // Export the singletonRouter and this is the public API.


var _default = singletonRouter; // Reexport the withRoute HOC

exports.default = _default;

function useRouter() {
  return _react.default.useContext(_routerContext.RouterContext);
} // INTERNAL APIS
// -------------
// (do not use following exports inside the app)
// Create a router and assign it as the singleton instance.
// This is used in client side when we are initilizing the app.
// This should **not** use inside the server.


const createRouter = (...args) => {
  singletonRouter.router = new _router2.default(...args);
  singletonRouter.readyCallbacks.forEach(cb => cb());
  singletonRouter.readyCallbacks = [];
  return singletonRouter.router;
}; // This function is used to create the `withRouter` router instance


exports.createRouter = createRouter;

function makePublicRouterInstance(router) {
  const _router = router;
  const instance = {};

  for (const property of urlPropertyFields) {
    if (typeof _router[property] === 'object') {
      instance[property] = Object.assign(Array.isArray(_router[property]) ? [] : {}, _router[property]); // makes sure query is not stateful

      continue;
    }

    instance[property] = _router[property];
  } // Events is a static property on the router, the router doesn't have to be initialized to use it


  instance.events = _router2.default.events;
  coreMethodFields.forEach(field => {
    instance[field] = (...args) => {
      return _router[field](...args);
    };
  });
  return instance;
}

/***/ }),

/***/ "./node_modules/next/dist/client/use-intersection.js":
/*!***********************************************************!*\
  !*** ./node_modules/next/dist/client/use-intersection.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");

exports.__esModule = true;
exports.useIntersection = useIntersection;

var _react = __webpack_require__(/*! react */ "react");

var _requestIdleCallback = _interopRequireDefault(__webpack_require__(/*! ./request-idle-callback */ "./node_modules/next/dist/client/request-idle-callback.js"));

const hasIntersectionObserver = typeof IntersectionObserver !== 'undefined';

function useIntersection({
  rootMargin,
  disabled
}) {
  const isDisabled = disabled || !hasIntersectionObserver;
  const unobserve = (0, _react.useRef)();
  const [visible, setVisible] = (0, _react.useState)(false);
  const setRef = (0, _react.useCallback)(el => {
    if (unobserve.current) {
      unobserve.current();
      unobserve.current = undefined;
    }

    if (isDisabled || visible) return;

    if (el && el.tagName) {
      unobserve.current = observe(el, isVisible => isVisible && setVisible(isVisible), {
        rootMargin
      });
    }
  }, [isDisabled, rootMargin, visible]);
  (0, _react.useEffect)(() => {
    if (!hasIntersectionObserver) {
      if (!visible) (0, _requestIdleCallback.default)(() => setVisible(true));
    }
  }, [visible]);
  return [setRef, visible];
}

function observe(element, callback, options) {
  const {
    id,
    observer,
    elements
  } = createObserver(options);
  elements.set(element, callback);
  observer.observe(element);
  return function unobserve() {
    elements.delete(element);
    observer.unobserve(element); // Destroy observer when there's nothing left to watch:

    if (elements.size === 0) {
      observer.disconnect();
      observers.delete(id);
    }
  };
}

const observers = new Map();

function createObserver(options) {
  const id = options.rootMargin || '';
  let instance = observers.get(id);

  if (instance) {
    return instance;
  }

  const elements = new Map();
  const observer = new IntersectionObserver(entries => {
    entries.forEach(entry => {
      const callback = elements.get(entry.target);
      const isVisible = entry.isIntersecting || entry.intersectionRatio > 0;

      if (callback && isVisible) {
        callback(isVisible);
      }
    });
  }, options);
  observers.set(id, instance = {
    id,
    observer,
    elements
  });
  return instance;
}

/***/ }),

/***/ "./node_modules/next/dist/client/with-router.js":
/*!******************************************************!*\
  !*** ./node_modules/next/dist/client/with-router.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");

exports.__esModule = true;
exports.default = withRouter;

var _react = _interopRequireDefault(__webpack_require__(/*! react */ "react"));

var _router = __webpack_require__(/*! ./router */ "./node_modules/next/dist/client/router.js");

function withRouter(ComposedComponent) {
  function WithRouterWrapper(props) {
    return /*#__PURE__*/_react.default.createElement(ComposedComponent, Object.assign({
      router: (0, _router.useRouter)()
    }, props));
  }

  WithRouterWrapper.getInitialProps = ComposedComponent.getInitialProps // This is needed to allow checking for custom getInitialProps in _app
  ;
  WithRouterWrapper.origGetInitialProps = ComposedComponent.origGetInitialProps;

  if (true) {
    const name = ComposedComponent.displayName || ComposedComponent.name || 'Unknown';
    WithRouterWrapper.displayName = `withRouter(${name})`;
  }

  return WithRouterWrapper;
}

/***/ }),

/***/ "./node_modules/next/dist/compiled/path-to-regexp/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/next/dist/compiled/path-to-regexp/index.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Tokenize input string.
 */
function lexer(str) {
    var tokens = [];
    var i = 0;
    while (i < str.length) {
        var char = str[i];
        if (char === "*" || char === "+" || char === "?") {
            tokens.push({ type: "MODIFIER", index: i, value: str[i++] });
            continue;
        }
        if (char === "\\") {
            tokens.push({ type: "ESCAPED_CHAR", index: i++, value: str[i++] });
            continue;
        }
        if (char === "{") {
            tokens.push({ type: "OPEN", index: i, value: str[i++] });
            continue;
        }
        if (char === "}") {
            tokens.push({ type: "CLOSE", index: i, value: str[i++] });
            continue;
        }
        if (char === ":") {
            var name = "";
            var j = i + 1;
            while (j < str.length) {
                var code = str.charCodeAt(j);
                if (
                // `0-9`
                (code >= 48 && code <= 57) ||
                    // `A-Z`
                    (code >= 65 && code <= 90) ||
                    // `a-z`
                    (code >= 97 && code <= 122) ||
                    // `_`
                    code === 95) {
                    name += str[j++];
                    continue;
                }
                break;
            }
            if (!name)
                throw new TypeError("Missing parameter name at " + i);
            tokens.push({ type: "NAME", index: i, value: name });
            i = j;
            continue;
        }
        if (char === "(") {
            var count = 1;
            var pattern = "";
            var j = i + 1;
            if (str[j] === "?") {
                throw new TypeError("Pattern cannot start with \"?\" at " + j);
            }
            while (j < str.length) {
                if (str[j] === "\\") {
                    pattern += str[j++] + str[j++];
                    continue;
                }
                if (str[j] === ")") {
                    count--;
                    if (count === 0) {
                        j++;
                        break;
                    }
                }
                else if (str[j] === "(") {
                    count++;
                    if (str[j + 1] !== "?") {
                        throw new TypeError("Capturing groups are not allowed at " + j);
                    }
                }
                pattern += str[j++];
            }
            if (count)
                throw new TypeError("Unbalanced pattern at " + i);
            if (!pattern)
                throw new TypeError("Missing pattern at " + i);
            tokens.push({ type: "PATTERN", index: i, value: pattern });
            i = j;
            continue;
        }
        tokens.push({ type: "CHAR", index: i, value: str[i++] });
    }
    tokens.push({ type: "END", index: i, value: "" });
    return tokens;
}
/**
 * Parse a string for the raw tokens.
 */
function parse(str, options) {
    if (options === void 0) { options = {}; }
    var tokens = lexer(str);
    var _a = options.prefixes, prefixes = _a === void 0 ? "./" : _a;
    var defaultPattern = "[^" + escapeString(options.delimiter || "/#?") + "]+?";
    var result = [];
    var key = 0;
    var i = 0;
    var path = "";
    var tryConsume = function (type) {
        if (i < tokens.length && tokens[i].type === type)
            return tokens[i++].value;
    };
    var mustConsume = function (type) {
        var value = tryConsume(type);
        if (value !== undefined)
            return value;
        var _a = tokens[i], nextType = _a.type, index = _a.index;
        throw new TypeError("Unexpected " + nextType + " at " + index + ", expected " + type);
    };
    var consumeText = function () {
        var result = "";
        var value;
        // tslint:disable-next-line
        while ((value = tryConsume("CHAR") || tryConsume("ESCAPED_CHAR"))) {
            result += value;
        }
        return result;
    };
    while (i < tokens.length) {
        var char = tryConsume("CHAR");
        var name = tryConsume("NAME");
        var pattern = tryConsume("PATTERN");
        if (name || pattern) {
            var prefix = char || "";
            if (prefixes.indexOf(prefix) === -1) {
                path += prefix;
                prefix = "";
            }
            if (path) {
                result.push(path);
                path = "";
            }
            result.push({
                name: name || key++,
                prefix: prefix,
                suffix: "",
                pattern: pattern || defaultPattern,
                modifier: tryConsume("MODIFIER") || ""
            });
            continue;
        }
        var value = char || tryConsume("ESCAPED_CHAR");
        if (value) {
            path += value;
            continue;
        }
        if (path) {
            result.push(path);
            path = "";
        }
        var open = tryConsume("OPEN");
        if (open) {
            var prefix = consumeText();
            var name_1 = tryConsume("NAME") || "";
            var pattern_1 = tryConsume("PATTERN") || "";
            var suffix = consumeText();
            mustConsume("CLOSE");
            result.push({
                name: name_1 || (pattern_1 ? key++ : ""),
                pattern: name_1 && !pattern_1 ? defaultPattern : pattern_1,
                prefix: prefix,
                suffix: suffix,
                modifier: tryConsume("MODIFIER") || ""
            });
            continue;
        }
        mustConsume("END");
    }
    return result;
}
exports.parse = parse;
/**
 * Compile a string to a template function for the path.
 */
function compile(str, options) {
    return tokensToFunction(parse(str, options), options);
}
exports.compile = compile;
/**
 * Expose a method for transforming tokens into the path function.
 */
function tokensToFunction(tokens, options) {
    if (options === void 0) { options = {}; }
    var reFlags = flags(options);
    var _a = options.encode, encode = _a === void 0 ? function (x) { return x; } : _a, _b = options.validate, validate = _b === void 0 ? true : _b;
    // Compile all the tokens into regexps.
    var matches = tokens.map(function (token) {
        if (typeof token === "object") {
            return new RegExp("^(?:" + token.pattern + ")$", reFlags);
        }
    });
    return function (data) {
        var path = "";
        for (var i = 0; i < tokens.length; i++) {
            var token = tokens[i];
            if (typeof token === "string") {
                path += token;
                continue;
            }
            var value = data ? data[token.name] : undefined;
            var optional = token.modifier === "?" || token.modifier === "*";
            var repeat = token.modifier === "*" || token.modifier === "+";
            if (Array.isArray(value)) {
                if (!repeat) {
                    throw new TypeError("Expected \"" + token.name + "\" to not repeat, but got an array");
                }
                if (value.length === 0) {
                    if (optional)
                        continue;
                    throw new TypeError("Expected \"" + token.name + "\" to not be empty");
                }
                for (var j = 0; j < value.length; j++) {
                    var segment = encode(value[j], token);
                    if (validate && !matches[i].test(segment)) {
                        throw new TypeError("Expected all \"" + token.name + "\" to match \"" + token.pattern + "\", but got \"" + segment + "\"");
                    }
                    path += token.prefix + segment + token.suffix;
                }
                continue;
            }
            if (typeof value === "string" || typeof value === "number") {
                var segment = encode(String(value), token);
                if (validate && !matches[i].test(segment)) {
                    throw new TypeError("Expected \"" + token.name + "\" to match \"" + token.pattern + "\", but got \"" + segment + "\"");
                }
                path += token.prefix + segment + token.suffix;
                continue;
            }
            if (optional)
                continue;
            var typeOfMessage = repeat ? "an array" : "a string";
            throw new TypeError("Expected \"" + token.name + "\" to be " + typeOfMessage);
        }
        return path;
    };
}
exports.tokensToFunction = tokensToFunction;
/**
 * Create path match function from `path-to-regexp` spec.
 */
function match(str, options) {
    var keys = [];
    var re = pathToRegexp(str, keys, options);
    return regexpToFunction(re, keys, options);
}
exports.match = match;
/**
 * Create a path match function from `path-to-regexp` output.
 */
function regexpToFunction(re, keys, options) {
    if (options === void 0) { options = {}; }
    var _a = options.decode, decode = _a === void 0 ? function (x) { return x; } : _a;
    return function (pathname) {
        var m = re.exec(pathname);
        if (!m)
            return false;
        var path = m[0], index = m.index;
        var params = Object.create(null);
        var _loop_1 = function (i) {
            // tslint:disable-next-line
            if (m[i] === undefined)
                return "continue";
            var key = keys[i - 1];
            if (key.modifier === "*" || key.modifier === "+") {
                params[key.name] = m[i].split(key.prefix + key.suffix).map(function (value) {
                    return decode(value, key);
                });
            }
            else {
                params[key.name] = decode(m[i], key);
            }
        };
        for (var i = 1; i < m.length; i++) {
            _loop_1(i);
        }
        return { path: path, index: index, params: params };
    };
}
exports.regexpToFunction = regexpToFunction;
/**
 * Escape a regular expression string.
 */
function escapeString(str) {
    return str.replace(/([.+*?=^!:${}()[\]|/\\])/g, "\\$1");
}
/**
 * Get the flags for a regexp from the options.
 */
function flags(options) {
    return options && options.sensitive ? "" : "i";
}
/**
 * Pull out keys from a regexp.
 */
function regexpToRegexp(path, keys) {
    if (!keys)
        return path;
    // Use a negative lookahead to match only capturing groups.
    var groups = path.source.match(/\((?!\?)/g);
    if (groups) {
        for (var i = 0; i < groups.length; i++) {
            keys.push({
                name: i,
                prefix: "",
                suffix: "",
                modifier: "",
                pattern: ""
            });
        }
    }
    return path;
}
/**
 * Transform an array into a regexp.
 */
function arrayToRegexp(paths, keys, options) {
    var parts = paths.map(function (path) { return pathToRegexp(path, keys, options).source; });
    return new RegExp("(?:" + parts.join("|") + ")", flags(options));
}
/**
 * Create a path regexp from string input.
 */
function stringToRegexp(path, keys, options) {
    return tokensToRegexp(parse(path, options), keys, options);
}
/**
 * Expose a function for taking tokens and returning a RegExp.
 */
function tokensToRegexp(tokens, keys, options) {
    if (options === void 0) { options = {}; }
    var _a = options.strict, strict = _a === void 0 ? false : _a, _b = options.start, start = _b === void 0 ? true : _b, _c = options.end, end = _c === void 0 ? true : _c, _d = options.encode, encode = _d === void 0 ? function (x) { return x; } : _d;
    var endsWith = "[" + escapeString(options.endsWith || "") + "]|$";
    var delimiter = "[" + escapeString(options.delimiter || "/#?") + "]";
    var route = start ? "^" : "";
    // Iterate over the tokens and create our regexp string.
    for (var _i = 0, tokens_1 = tokens; _i < tokens_1.length; _i++) {
        var token = tokens_1[_i];
        if (typeof token === "string") {
            route += escapeString(encode(token));
        }
        else {
            var prefix = escapeString(encode(token.prefix));
            var suffix = escapeString(encode(token.suffix));
            if (token.pattern) {
                if (keys)
                    keys.push(token);
                if (prefix || suffix) {
                    if (token.modifier === "+" || token.modifier === "*") {
                        var mod = token.modifier === "*" ? "?" : "";
                        route += "(?:" + prefix + "((?:" + token.pattern + ")(?:" + suffix + prefix + "(?:" + token.pattern + "))*)" + suffix + ")" + mod;
                    }
                    else {
                        route += "(?:" + prefix + "(" + token.pattern + ")" + suffix + ")" + token.modifier;
                    }
                }
                else {
                    route += "(" + token.pattern + ")" + token.modifier;
                }
            }
            else {
                route += "(?:" + prefix + suffix + ")" + token.modifier;
            }
        }
    }
    if (end) {
        if (!strict)
            route += delimiter + "?";
        route += !options.endsWith ? "$" : "(?=" + endsWith + ")";
    }
    else {
        var endToken = tokens[tokens.length - 1];
        var isEndDelimited = typeof endToken === "string"
            ? delimiter.indexOf(endToken[endToken.length - 1]) > -1
            : // tslint:disable-next-line
                endToken === undefined;
        if (!strict) {
            route += "(?:" + delimiter + "(?=" + endsWith + "))?";
        }
        if (!isEndDelimited) {
            route += "(?=" + delimiter + "|" + endsWith + ")";
        }
    }
    return new RegExp(route, flags(options));
}
exports.tokensToRegexp = tokensToRegexp;
/**
 * Normalize the given path string, returning a regular expression.
 *
 * An empty array can be passed in for the keys, which will hold the
 * placeholder key descriptions. For example, using `/user/:id`, `keys` will
 * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.
 */
function pathToRegexp(path, keys, options) {
    if (path instanceof RegExp)
        return regexpToRegexp(path, keys);
    if (Array.isArray(path))
        return arrayToRegexp(path, keys, options);
    return stringToRegexp(path, keys, options);
}
exports.pathToRegexp = pathToRegexp;
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/next/dist/next-server/lib/i18n/normalize-locale-path.js":
/*!******************************************************************************!*\
  !*** ./node_modules/next/dist/next-server/lib/i18n/normalize-locale-path.js ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.normalizeLocalePath = normalizeLocalePath;

function normalizeLocalePath(pathname, locales) {
  let detectedLocale; // first item will be empty string from splitting at first char

  const pathnameParts = pathname.split('/');
  (locales || []).some(locale => {
    if (pathnameParts[1].toLowerCase() === locale.toLowerCase()) {
      detectedLocale = locale;
      pathnameParts.splice(1, 1);
      pathname = pathnameParts.join('/') || '/';
      return true;
    }

    return false;
  });
  return {
    pathname,
    detectedLocale
  };
}

/***/ }),

/***/ "./node_modules/next/dist/next-server/lib/mitt.js":
/*!********************************************************!*\
  !*** ./node_modules/next/dist/next-server/lib/mitt.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = mitt;
/*
MIT License
Copyright (c) Jason Miller (https://jasonformat.com/)
Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
// This file is based on https://github.com/developit/mitt/blob/v1.1.3/src/index.js
// It's been edited for the needs of this script
// See the LICENSE at the top of the file

function mitt() {
  const all = Object.create(null);
  return {
    on(type, handler) {
      ;
      (all[type] || (all[type] = [])).push(handler);
    },

    off(type, handler) {
      if (all[type]) {
        all[type].splice(all[type].indexOf(handler) >>> 0, 1);
      }
    },

    emit(type, ...evts) {
      // eslint-disable-next-line array-callback-return
      ;
      (all[type] || []).slice().map(handler => {
        handler(...evts);
      });
    }

  };
}

/***/ }),

/***/ "./node_modules/next/dist/next-server/lib/router/router.js":
/*!*****************************************************************!*\
  !*** ./node_modules/next/dist/next-server/lib/router/router.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.getDomainLocale = getDomainLocale;
exports.addLocale = addLocale;
exports.delLocale = delLocale;
exports.hasBasePath = hasBasePath;
exports.addBasePath = addBasePath;
exports.delBasePath = delBasePath;
exports.isLocalURL = isLocalURL;
exports.interpolateAs = interpolateAs;
exports.resolveHref = resolveHref;
exports.default = void 0;

var _normalizeTrailingSlash = __webpack_require__(/*! ../../../client/normalize-trailing-slash */ "./node_modules/next/dist/client/normalize-trailing-slash.js");

var _routeLoader = __webpack_require__(/*! ../../../client/route-loader */ "./node_modules/next/dist/client/route-loader.js");

var _denormalizePagePath = __webpack_require__(/*! ../../server/denormalize-page-path */ "./node_modules/next/dist/next-server/server/denormalize-page-path.js");

var _normalizeLocalePath = __webpack_require__(/*! ../i18n/normalize-locale-path */ "./node_modules/next/dist/next-server/lib/i18n/normalize-locale-path.js");

var _mitt = _interopRequireDefault(__webpack_require__(/*! ../mitt */ "./node_modules/next/dist/next-server/lib/mitt.js"));

var _utils = __webpack_require__(/*! ../utils */ "./node_modules/next/dist/next-server/lib/utils.js");

var _isDynamic = __webpack_require__(/*! ./utils/is-dynamic */ "./node_modules/next/dist/next-server/lib/router/utils/is-dynamic.js");

var _parseRelativeUrl = __webpack_require__(/*! ./utils/parse-relative-url */ "./node_modules/next/dist/next-server/lib/router/utils/parse-relative-url.js");

var _querystring = __webpack_require__(/*! ./utils/querystring */ "./node_modules/next/dist/next-server/lib/router/utils/querystring.js");

var _resolveRewrites = _interopRequireDefault(__webpack_require__(/*! ./utils/resolve-rewrites */ "./node_modules/next/dist/next-server/lib/router/utils/resolve-rewrites.js"));

var _routeMatcher = __webpack_require__(/*! ./utils/route-matcher */ "./node_modules/next/dist/next-server/lib/router/utils/route-matcher.js");

var _routeRegex = __webpack_require__(/*! ./utils/route-regex */ "./node_modules/next/dist/next-server/lib/router/utils/route-regex.js");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}
/* global __NEXT_DATA__ */
// tslint:disable:no-console


let detectDomainLocale;

if (false) {}

const basePath =  false || '';

function buildCancellationError() {
  return Object.assign(new Error('Route Cancelled'), {
    cancelled: true
  });
}

function addPathPrefix(path, prefix) {
  return prefix && path.startsWith('/') ? path === '/' ? (0, _normalizeTrailingSlash.normalizePathTrailingSlash)(prefix) : `${prefix}${pathNoQueryHash(path) === '/' ? path.substring(1) : path}` : path;
}

function getDomainLocale(path, locale, locales, domainLocales) {
  if (false) {}

  return false;
}

function addLocale(path, locale, defaultLocale) {
  if (false) {}

  return path;
}

function delLocale(path, locale) {
  if (false) {}

  return path;
}

function pathNoQueryHash(path) {
  const queryIndex = path.indexOf('?');
  const hashIndex = path.indexOf('#');

  if (queryIndex > -1 || hashIndex > -1) {
    path = path.substring(0, queryIndex > -1 ? queryIndex : hashIndex);
  }

  return path;
}

function hasBasePath(path) {
  path = pathNoQueryHash(path);
  return path === basePath || path.startsWith(basePath + '/');
}

function addBasePath(path) {
  // we only add the basepath on relative urls
  return addPathPrefix(path, basePath);
}

function delBasePath(path) {
  path = path.slice(basePath.length);
  if (!path.startsWith('/')) path = `/${path}`;
  return path;
}
/**
* Detects whether a given url is routable by the Next.js router (browser only).
*/


function isLocalURL(url) {
  if (url.startsWith('/')) return true;

  try {
    // absolute urls can be local if they are on the same origin
    const locationOrigin = (0, _utils.getLocationOrigin)();
    const resolved = new URL(url, locationOrigin);
    return resolved.origin === locationOrigin && hasBasePath(resolved.pathname);
  } catch (_) {
    return false;
  }
}

function interpolateAs(route, asPathname, query) {
  let interpolatedRoute = '';
  const dynamicRegex = (0, _routeRegex.getRouteRegex)(route);
  const dynamicGroups = dynamicRegex.groups;
  const dynamicMatches = // Try to match the dynamic route against the asPath
  (asPathname !== route ? (0, _routeMatcher.getRouteMatcher)(dynamicRegex)(asPathname) : '') || // Fall back to reading the values from the href
  // TODO: should this take priority; also need to change in the router.
  query;
  interpolatedRoute = route;
  const params = Object.keys(dynamicGroups);

  if (!params.every(param => {
    let value = dynamicMatches[param] || '';
    const {
      repeat,
      optional
    } = dynamicGroups[param]; // support single-level catch-all
    // TODO: more robust handling for user-error (passing `/`)

    let replaced = `[${repeat ? '...' : ''}${param}]`;

    if (optional) {
      replaced = `${!value ? '/' : ''}[${replaced}]`;
    }

    if (repeat && !Array.isArray(value)) value = [value];
    return (optional || param in dynamicMatches) && ( // Interpolate group into data URL if present
    interpolatedRoute = interpolatedRoute.replace(replaced, repeat ? value.map( // these values should be fully encoded instead of just
    // path delimiter escaped since they are being inserted
    // into the URL and we expect URL encoded segments
    // when parsing dynamic route params
    segment => encodeURIComponent(segment)).join('/') : encodeURIComponent(value)) || '/');
  })) {
    interpolatedRoute = ''; // did not satisfy all requirements
    // n.b. We ignore this error because we handle warning for this case in
    // development in the `<Link>` component directly.
  }

  return {
    params,
    result: interpolatedRoute
  };
}

function omitParmsFromQuery(query, params) {
  const filteredQuery = {};
  Object.keys(query).forEach(key => {
    if (!params.includes(key)) {
      filteredQuery[key] = query[key];
    }
  });
  return filteredQuery;
}
/**
* Resolves a given hyperlink with a certain router state (basePath not included).
* Preserves absolute urls.
*/


function resolveHref(currentPath, href, resolveAs) {
  // we use a dummy base url for relative urls
  const base = new URL(currentPath, 'http://n');
  const urlAsString = typeof href === 'string' ? href : (0, _utils.formatWithValidation)(href); // Return because it cannot be routed by the Next.js router

  if (!isLocalURL(urlAsString)) {
    return resolveAs ? [urlAsString] : urlAsString;
  }

  try {
    const finalUrl = new URL(urlAsString, base);
    finalUrl.pathname = (0, _normalizeTrailingSlash.normalizePathTrailingSlash)(finalUrl.pathname);
    let interpolatedAs = '';

    if ((0, _isDynamic.isDynamicRoute)(finalUrl.pathname) && finalUrl.searchParams && resolveAs) {
      const query = (0, _querystring.searchParamsToUrlQuery)(finalUrl.searchParams);
      const {
        result,
        params
      } = interpolateAs(finalUrl.pathname, finalUrl.pathname, query);

      if (result) {
        interpolatedAs = (0, _utils.formatWithValidation)({
          pathname: result,
          hash: finalUrl.hash,
          query: omitParmsFromQuery(query, params)
        });
      }
    } // if the origin didn't change, it means we received a relative href


    const resolvedHref = finalUrl.origin === base.origin ? finalUrl.href.slice(finalUrl.origin.length) : finalUrl.href;
    return resolveAs ? [resolvedHref, interpolatedAs || resolvedHref] : resolvedHref;
  } catch (_) {
    return resolveAs ? [urlAsString] : urlAsString;
  }
}

function stripOrigin(url) {
  const origin = (0, _utils.getLocationOrigin)();
  return url.startsWith(origin) ? url.substring(origin.length) : url;
}

function prepareUrlAs(router, url, as) {
  // If url and as provided as an object representation,
  // we'll format them into the string version here.
  let [resolvedHref, resolvedAs] = resolveHref(router.pathname, url, true);
  const origin = (0, _utils.getLocationOrigin)();
  const hrefHadOrigin = resolvedHref.startsWith(origin);
  const asHadOrigin = resolvedAs && resolvedAs.startsWith(origin);
  resolvedHref = stripOrigin(resolvedHref);
  resolvedAs = resolvedAs ? stripOrigin(resolvedAs) : resolvedAs;
  const preparedUrl = hrefHadOrigin ? resolvedHref : addBasePath(resolvedHref);
  const preparedAs = as ? stripOrigin(resolveHref(router.pathname, as)) : resolvedAs || resolvedHref;
  return {
    url: preparedUrl,
    as: asHadOrigin ? preparedAs : addBasePath(preparedAs)
  };
}

const manualScrollRestoration =  false && false;
const SSG_DATA_NOT_FOUND = Symbol('SSG_DATA_NOT_FOUND');

function fetchRetry(url, attempts) {
  return fetch(url, {
    // Cookies are required to be present for Next.js' SSG "Preview Mode".
    // Cookies may also be required for `getServerSideProps`.
    //
    // > `fetch` won’t send cookies, unless you set the credentials init
    // > option.
    // https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch
    //
    // > For maximum browser compatibility when it comes to sending &
    // > receiving cookies, always supply the `credentials: 'same-origin'`
    // > option instead of relying on the default.
    // https://github.com/github/fetch#caveats
    credentials: 'same-origin'
  }).then(res => {
    if (!res.ok) {
      if (attempts > 1 && res.status >= 500) {
        return fetchRetry(url, attempts - 1);
      }

      if (res.status === 404) {
        return res.json().then(data => {
          if (data.notFound) {
            return {
              notFound: SSG_DATA_NOT_FOUND
            };
          }

          throw new Error(`Failed to load static props`);
        });
      }

      throw new Error(`Failed to load static props`);
    }

    return res.json();
  });
}

function fetchNextData(dataHref, isServerRender) {
  return fetchRetry(dataHref, isServerRender ? 3 : 1).catch(err => {
    // We should only trigger a server-side transition if this was caused
    // on a client-side transition. Otherwise, we'd get into an infinite
    // loop.
    if (!isServerRender) {
      (0, _routeLoader.markAssetError)(err);
    }

    throw err;
  });
}

class Router {
  /**
  * Map of all components loaded in `Router`
  */
  // Static Data Cache
  constructor(_pathname, _query, _as, {
    initialProps,
    pageLoader,
    App,
    wrapApp,
    Component,
    err,
    subscription,
    isFallback,
    locale,
    locales,
    defaultLocale,
    domainLocales
  }) {
    this.route = void 0;
    this.pathname = void 0;
    this.query = void 0;
    this.asPath = void 0;
    this.basePath = void 0;
    this.components = void 0;
    this.sdc = {};
    this.sub = void 0;
    this.clc = void 0;
    this.pageLoader = void 0;
    this._bps = void 0;
    this.events = void 0;
    this._wrapApp = void 0;
    this.isSsr = void 0;
    this.isFallback = void 0;
    this._inFlightRoute = void 0;
    this._shallow = void 0;
    this.locale = void 0;
    this.locales = void 0;
    this.defaultLocale = void 0;
    this.domainLocales = void 0;
    this.isReady = void 0;
    this._idx = 0;

    this.onPopState = e => {
      const state = e.state;

      if (!state) {
        // We get state as undefined for two reasons.
        //  1. With older safari (< 8) and older chrome (< 34)
        //  2. When the URL changed with #
        //
        // In the both cases, we don't need to proceed and change the route.
        // (as it's already changed)
        // But we can simply replace the state with the new changes.
        // Actually, for (1) we don't need to nothing. But it's hard to detect that event.
        // So, doing the following for (1) does no harm.
        const {
          pathname,
          query
        } = this;
        this.changeState('replaceState', (0, _utils.formatWithValidation)({
          pathname: addBasePath(pathname),
          query
        }), (0, _utils.getURL)());
        return;
      }

      if (!state.__N) {
        return;
      }

      let forcedScroll;
      const {
        url,
        as,
        options,
        idx
      } = state;

      if (false) {}

      this._idx = idx;
      const {
        pathname
      } = (0, _parseRelativeUrl.parseRelativeUrl)(url); // Make sure we don't re-render on initial load,
      // can be caused by navigating back from an external site

      if (this.isSsr && as === this.asPath && pathname === this.pathname) {
        return;
      } // If the downstream application returns falsy, return.
      // They will then be responsible for handling the event.


      if (this._bps && !this._bps(state)) {
        return;
      }

      this.change('replaceState', url, as, Object.assign({}, options, {
        shallow: options.shallow && this._shallow,
        locale: options.locale || this.defaultLocale
      }), forcedScroll);
    }; // represents the current component key


    this.route = (0, _normalizeTrailingSlash.removePathTrailingSlash)(_pathname); // set up the component cache (by route keys)

    this.components = {}; // We should not keep the cache, if there's an error
    // Otherwise, this cause issues when when going back and
    // come again to the errored page.

    if (_pathname !== '/_error') {
      this.components[this.route] = {
        Component,
        initial: true,
        props: initialProps,
        err,
        __N_SSG: initialProps && initialProps.__N_SSG,
        __N_SSP: initialProps && initialProps.__N_SSP
      };
    }

    this.components['/_app'] = {
      Component: App,
      styleSheets: [
        /* /_app does not need its stylesheets managed */
      ]
    }; // Backwards compat for Router.router.events
    // TODO: Should be remove the following major version as it was never documented

    this.events = Router.events;
    this.pageLoader = pageLoader;
    this.pathname = _pathname;
    this.query = _query; // if auto prerendered and dynamic route wait to update asPath
    // until after mount to prevent hydration mismatch

    const autoExportDynamic = (0, _isDynamic.isDynamicRoute)(_pathname) && self.__NEXT_DATA__.autoExport;

    this.asPath = autoExportDynamic ? _pathname : _as;
    this.basePath = basePath;
    this.sub = subscription;
    this.clc = null;
    this._wrapApp = wrapApp; // make sure to ignore extra popState in safari on navigating
    // back from external site

    this.isSsr = true;
    this.isFallback = isFallback;
    this.isReady = !!(self.__NEXT_DATA__.gssp || self.__NEXT_DATA__.gip || !autoExportDynamic && !self.location.search);

    if (false) {}

    if (false) {}
  }

  reload() {
    window.location.reload();
  }
  /**
  * Go back in history
  */


  back() {
    window.history.back();
  }
  /**
  * Performs a `pushState` with arguments
  * @param url of the route
  * @param as masks `url` for the browser
  * @param options object you can define `shallow` and other options
  */


  push(url, as, options = {}) {
    if (false) {}

    ;
    ({
      url,
      as
    } = prepareUrlAs(this, url, as));
    return this.change('pushState', url, as, options);
  }
  /**
  * Performs a `replaceState` with arguments
  * @param url of the route
  * @param as masks `url` for the browser
  * @param options object you can define `shallow` and other options
  */


  replace(url, as, options = {}) {
    ;
    ({
      url,
      as
    } = prepareUrlAs(this, url, as));
    return this.change('replaceState', url, as, options);
  }

  async change(method, url, as, options, forcedScroll) {
    var _options$scroll;

    if (!isLocalURL(url)) {
      window.location.href = url;
      return false;
    } // for static pages with query params in the URL we delay
    // marking the router ready until after the query is updated


    if (options._h) {
      this.isReady = true;
    } // Default to scroll reset behavior unless explicitly specified to be
    // `false`! This makes the behavior between using `Router#push` and a
    // `<Link />` consistent.


    options.scroll = !!((_options$scroll = options.scroll) != null ? _options$scroll : true);
    let localeChange = options.locale !== this.locale;

    if (false) { var _this$locales; }

    if (!options._h) {
      this.isSsr = false;
    } // marking route changes as a navigation start entry


    if (_utils.ST) {
      performance.mark('routeChange');
    }

    const {
      shallow = false
    } = options;
    const routeProps = {
      shallow
    };

    if (this._inFlightRoute) {
      this.abortComponentLoad(this._inFlightRoute, routeProps);
    }

    as = addBasePath(addLocale(hasBasePath(as) ? delBasePath(as) : as, options.locale, this.defaultLocale));
    const cleanedAs = delLocale(hasBasePath(as) ? delBasePath(as) : as, this.locale);
    this._inFlightRoute = as; // If the url change is only related to a hash change
    // We should not proceed. We should only change the state.
    // WARNING: `_h` is an internal option for handing Next.js client-side
    // hydration. Your app should _never_ use this property. It may change at
    // any time without notice.

    if (!options._h && this.onlyAHashChange(cleanedAs)) {
      this.asPath = cleanedAs;
      Router.events.emit('hashChangeStart', as, routeProps); // TODO: do we need the resolved href when only a hash change?

      this.changeState(method, url, as, options);
      this.scrollToHash(cleanedAs);
      this.notify(this.components[this.route], null);
      Router.events.emit('hashChangeComplete', as, routeProps);
      return true;
    }

    let parsed = (0, _parseRelativeUrl.parseRelativeUrl)(url);
    let {
      pathname,
      query
    } = parsed; // The build manifest needs to be loaded before auto-static dynamic pages
    // get their query parameters to allow ensuring they can be parsed properly
    // when rewritten to

    let pages, rewrites;

    try {
      pages = await this.pageLoader.getPageList();
      ({
        __rewrites: rewrites
      } = await (0, _routeLoader.getClientBuildManifest)());
    } catch (err) {
      // If we fail to resolve the page list or client-build manifest, we must
      // do a server-side transition:
      window.location.href = as;
      return false;
    }

    parsed = this._resolveHref(parsed, pages);

    if (parsed.pathname !== pathname) {
      pathname = parsed.pathname;
      url = (0, _utils.formatWithValidation)(parsed);
    } // url and as should always be prefixed with basePath by this
    // point by either next/link or router.push/replace so strip the
    // basePath from the pathname to match the pages dir 1-to-1


    pathname = pathname ? (0, _normalizeTrailingSlash.removePathTrailingSlash)(delBasePath(pathname)) : pathname; // If asked to change the current URL we should reload the current page
    // (not location.reload() but reload getInitialProps and other Next.js stuffs)
    // We also need to set the method = replaceState always
    // as this should not go into the history (That's how browsers work)
    // We should compare the new asPath to the current asPath, not the url

    if (!this.urlIsNew(cleanedAs) && !localeChange) {
      method = 'replaceState';
    }

    let route = (0, _normalizeTrailingSlash.removePathTrailingSlash)(pathname); // we need to resolve the as value using rewrites for dynamic SSG
    // pages to allow building the data URL correctly

    let resolvedAs = as;

    if ( true && as.startsWith('/')) {
      resolvedAs = (0, _resolveRewrites.default)(addBasePath(addLocale(delBasePath((0, _parseRelativeUrl.parseRelativeUrl)(as).pathname), this.locale)), pages, rewrites, query, p => this._resolveHref({
        pathname: p
      }, pages).pathname, this.locales);

      if (resolvedAs !== as) {
        const potentialHref = (0, _normalizeTrailingSlash.removePathTrailingSlash)(this._resolveHref(Object.assign({}, parsed, {
          pathname: (0, _normalizeLocalePath.normalizeLocalePath)(hasBasePath(resolvedAs) ? delBasePath(resolvedAs) : resolvedAs, this.locales).pathname
        }), pages, false).pathname); // if this directly matches a page we need to update the href to
        // allow the correct page chunk to be loaded

        if (pages.includes(potentialHref)) {
          route = potentialHref;
          pathname = potentialHref;
          parsed.pathname = pathname;
          url = (0, _utils.formatWithValidation)(parsed);
        }
      }
    }

    if (!isLocalURL(as)) {
      if (true) {
        throw new Error(`Invalid href: "${url}" and as: "${as}", received relative href and external as` + `\nSee more info: https://err.sh/next.js/invalid-relative-url-external-as`);
      }

      window.location.href = as;
      return false;
    }

    resolvedAs = delLocale(delBasePath(resolvedAs), this.locale);

    if ((0, _isDynamic.isDynamicRoute)(route)) {
      const parsedAs = (0, _parseRelativeUrl.parseRelativeUrl)(resolvedAs);
      const asPathname = parsedAs.pathname;
      const routeRegex = (0, _routeRegex.getRouteRegex)(route);
      const routeMatch = (0, _routeMatcher.getRouteMatcher)(routeRegex)(asPathname);
      const shouldInterpolate = route === asPathname;
      const interpolatedAs = shouldInterpolate ? interpolateAs(route, asPathname, query) : {};

      if (!routeMatch || shouldInterpolate && !interpolatedAs.result) {
        const missingParams = Object.keys(routeRegex.groups).filter(param => !query[param]);

        if (missingParams.length > 0) {
          if (true) {
            console.warn(`${shouldInterpolate ? `Interpolating href` : `Mismatching \`as\` and \`href\``} failed to manually provide ` + `the params: ${missingParams.join(', ')} in the \`href\`'s \`query\``);
          }

          throw new Error((shouldInterpolate ? `The provided \`href\` (${url}) value is missing query values (${missingParams.join(', ')}) to be interpolated properly. ` : `The provided \`as\` value (${asPathname}) is incompatible with the \`href\` value (${route}). `) + `Read more: https://err.sh/vercel/next.js/${shouldInterpolate ? 'href-interpolation-failed' : 'incompatible-href-as'}`);
        }
      } else if (shouldInterpolate) {
        as = (0, _utils.formatWithValidation)(Object.assign({}, parsedAs, {
          pathname: interpolatedAs.result,
          query: omitParmsFromQuery(query, interpolatedAs.params)
        }));
      } else {
        // Merge params into `query`, overwriting any specified in search
        Object.assign(query, routeMatch);
      }
    }

    Router.events.emit('routeChangeStart', as, routeProps);

    try {
      let routeInfo = await this.getRouteInfo(route, pathname, query, addBasePath(addLocale(resolvedAs, this.locale)), routeProps);
      let {
        error,
        props,
        __N_SSG,
        __N_SSP
      } = routeInfo; // handle redirect on client-transition

      if ((__N_SSG || __N_SSP) && props) {
        if (props.pageProps && props.pageProps.__N_REDIRECT) {
          const destination = props.pageProps.__N_REDIRECT; // check if destination is internal (resolves to a page) and attempt
          // client-navigation if it is falling back to hard navigation if
          // it's not

          if (destination.startsWith('/')) {
            const parsedHref = (0, _parseRelativeUrl.parseRelativeUrl)(destination);

            this._resolveHref(parsedHref, pages, false);

            if (pages.includes(parsedHref.pathname)) {
              const {
                url: newUrl,
                as: newAs
              } = prepareUrlAs(this, destination, destination);
              return this.change(method, newUrl, newAs, options);
            }
          }

          window.location.href = destination;
          return new Promise(() => {});
        } // handle SSG data 404


        if (props.notFound === SSG_DATA_NOT_FOUND) {
          let notFoundRoute;

          try {
            await this.fetchComponent('/404');
            notFoundRoute = '/404';
          } catch (_) {
            notFoundRoute = '/_error';
          }

          routeInfo = await this.getRouteInfo(notFoundRoute, notFoundRoute, query, as, {
            shallow: false
          });
        }
      }

      Router.events.emit('beforeHistoryChange', as, routeProps);
      this.changeState(method, url, as, options);

      if (true) {
        const appComp = this.components['/_app'].Component;
        window.next.isPrerendered = appComp.getInitialProps === appComp.origGetInitialProps && !routeInfo.Component.getInitialProps;
      }

      await this.set(route, pathname, query, cleanedAs, routeInfo, forcedScroll || (options.scroll ? {
        x: 0,
        y: 0
      } : null)).catch(e => {
        if (e.cancelled) error = error || e;else throw e;
      });

      if (error) {
        Router.events.emit('routeChangeError', error, cleanedAs, routeProps);
        throw error;
      }

      if (false) {}

      Router.events.emit('routeChangeComplete', as, routeProps);
      return true;
    } catch (err) {
      if (err.cancelled) {
        return false;
      }

      throw err;
    }
  }

  changeState(method, url, as, options = {}) {
    if (true) {
      if (typeof window.history === 'undefined') {
        console.error(`Warning: window.history is not available.`);
        return;
      }

      if (typeof window.history[method] === 'undefined') {
        console.error(`Warning: window.history.${method} is not available`);
        return;
      }
    }

    if (method !== 'pushState' || (0, _utils.getURL)() !== as) {
      this._shallow = options.shallow;
      window.history[method]({
        url,
        as,
        options,
        __N: true,
        idx: this._idx = method !== 'pushState' ? this._idx : this._idx + 1
      }, // Most browsers currently ignores this parameter, although they may use it in the future.
      // Passing the empty string here should be safe against future changes to the method.
      // https://developer.mozilla.org/en-US/docs/Web/API/History/replaceState
      '', as);
    }
  }

  async handleRouteInfoError(err, pathname, query, as, routeProps, loadErrorFail) {
    if (err.cancelled) {
      // bubble up cancellation errors
      throw err;
    }

    if ((0, _routeLoader.isAssetError)(err) || loadErrorFail) {
      Router.events.emit('routeChangeError', err, as, routeProps); // If we can't load the page it could be one of following reasons
      //  1. Page doesn't exists
      //  2. Page does exist in a different zone
      //  3. Internal error while loading the page
      // So, doing a hard reload is the proper way to deal with this.

      window.location.href = as; // Changing the URL doesn't block executing the current code path.
      // So let's throw a cancellation error stop the routing logic.

      throw buildCancellationError();
    }

    try {
      let Component;
      let styleSheets;
      let props;

      if (typeof Component === 'undefined' || typeof styleSheets === 'undefined') {
        ;
        ({
          page: Component,
          styleSheets
        } = await this.fetchComponent('/_error'));
      }

      const routeInfo = {
        props,
        Component,
        styleSheets,
        err,
        error: err
      };

      if (!routeInfo.props) {
        try {
          routeInfo.props = await this.getInitialProps(Component, {
            err,
            pathname,
            query
          });
        } catch (gipErr) {
          console.error('Error in error page `getInitialProps`: ', gipErr);
          routeInfo.props = {};
        }
      }

      return routeInfo;
    } catch (routeInfoErr) {
      return this.handleRouteInfoError(routeInfoErr, pathname, query, as, routeProps, true);
    }
  }

  async getRouteInfo(route, pathname, query, as, routeProps) {
    try {
      const existingRouteInfo = this.components[route];

      if (routeProps.shallow && existingRouteInfo && this.route === route) {
        return existingRouteInfo;
      }

      const cachedRouteInfo = existingRouteInfo && 'initial' in existingRouteInfo ? undefined : existingRouteInfo;
      const routeInfo = cachedRouteInfo ? cachedRouteInfo : await this.fetchComponent(route).then(res => ({
        Component: res.page,
        styleSheets: res.styleSheets,
        __N_SSG: res.mod.__N_SSG,
        __N_SSP: res.mod.__N_SSP
      }));
      const {
        Component,
        __N_SSG,
        __N_SSP
      } = routeInfo;

      if (true) {
        const {
          isValidElementType
        } = __webpack_require__(/*! react-is */ "react-is");

        if (!isValidElementType(Component)) {
          throw new Error(`The default export is not a React Component in page: "${pathname}"`);
        }
      }

      let dataHref;

      if (__N_SSG || __N_SSP) {
        dataHref = this.pageLoader.getDataHref((0, _utils.formatWithValidation)({
          pathname,
          query
        }), delBasePath(as), __N_SSG, this.locale);
      }

      const props = await this._getData(() => __N_SSG ? this._getStaticData(dataHref) : __N_SSP ? this._getServerData(dataHref) : this.getInitialProps(Component, // we provide AppTree later so this needs to be `any`
      {
        pathname,
        query,
        asPath: as
      }));
      routeInfo.props = props;
      this.components[route] = routeInfo;
      return routeInfo;
    } catch (err) {
      return this.handleRouteInfoError(err, pathname, query, as, routeProps);
    }
  }

  set(route, pathname, query, as, data, resetScroll) {
    this.isFallback = false;
    this.route = route;
    this.pathname = pathname;
    this.query = query;
    this.asPath = as;
    return this.notify(data, resetScroll);
  }
  /**
  * Callback to execute before replacing router state
  * @param cb callback to be executed
  */


  beforePopState(cb) {
    this._bps = cb;
  }

  onlyAHashChange(as) {
    if (!this.asPath) return false;
    const [oldUrlNoHash, oldHash] = this.asPath.split('#');
    const [newUrlNoHash, newHash] = as.split('#'); // Makes sure we scroll to the provided hash if the url/hash are the same

    if (newHash && oldUrlNoHash === newUrlNoHash && oldHash === newHash) {
      return true;
    } // If the urls are change, there's more than a hash change


    if (oldUrlNoHash !== newUrlNoHash) {
      return false;
    } // If the hash has changed, then it's a hash only change.
    // This check is necessary to handle both the enter and
    // leave hash === '' cases. The identity case falls through
    // and is treated as a next reload.


    return oldHash !== newHash;
  }

  scrollToHash(as) {
    const [, hash] = as.split('#'); // Scroll to top if the hash is just `#` with no value

    if (hash === '') {
      window.scrollTo(0, 0);
      return;
    } // First we check if the element by id is found


    const idEl = document.getElementById(hash);

    if (idEl) {
      idEl.scrollIntoView();
      return;
    } // If there's no element with the id, we check the `name` property
    // To mirror browsers


    const nameEl = document.getElementsByName(hash)[0];

    if (nameEl) {
      nameEl.scrollIntoView();
    }
  }

  urlIsNew(asPath) {
    return this.asPath !== asPath;
  }

  _resolveHref(parsedHref, pages, applyBasePath = true) {
    const {
      pathname
    } = parsedHref;
    const cleanPathname = (0, _normalizeTrailingSlash.removePathTrailingSlash)((0, _denormalizePagePath.denormalizePagePath)(applyBasePath ? delBasePath(pathname) : pathname));

    if (cleanPathname === '/404' || cleanPathname === '/_error') {
      return parsedHref;
    } // handle resolving href for dynamic routes


    if (!pages.includes(cleanPathname)) {
      // eslint-disable-next-line array-callback-return
      pages.some(page => {
        if ((0, _isDynamic.isDynamicRoute)(page) && (0, _routeRegex.getRouteRegex)(page).re.test(cleanPathname)) {
          parsedHref.pathname = applyBasePath ? addBasePath(page) : page;
          return true;
        }
      });
    }

    parsedHref.pathname = (0, _normalizeTrailingSlash.removePathTrailingSlash)(parsedHref.pathname);
    return parsedHref;
  }
  /**
  * Prefetch page code, you may wait for the data during page rendering.
  * This feature only works in production!
  * @param url the href of prefetched page
  * @param asPath the as path of the prefetched page
  */


  async prefetch(url, asPath = url, options = {}) {
    let parsed = (0, _parseRelativeUrl.parseRelativeUrl)(url);
    let {
      pathname
    } = parsed;

    if (false) {}

    const pages = await this.pageLoader.getPageList();
    parsed = this._resolveHref(parsed, pages, false);

    if (parsed.pathname !== pathname) {
      pathname = parsed.pathname;
      url = (0, _utils.formatWithValidation)(parsed);
    } // Prefetch is not supported in development mode because it would trigger on-demand-entries


    if (true) {
      return;
    }

    const route = (0, _normalizeTrailingSlash.removePathTrailingSlash)(pathname);
    await Promise.all([this.pageLoader._isSsg(url).then(isSsg => {
      return isSsg ? this._getStaticData(this.pageLoader.getDataHref(url, asPath, true, typeof options.locale !== 'undefined' ? options.locale : this.locale)) : false;
    }), this.pageLoader[options.priority ? 'loadPage' : 'prefetch'](route)]);
  }

  async fetchComponent(route) {
    let cancelled = false;

    const cancel = this.clc = () => {
      cancelled = true;
    };

    const componentResult = await this.pageLoader.loadPage(route);

    if (cancelled) {
      const error = new Error(`Abort fetching component for route: "${route}"`);
      error.cancelled = true;
      throw error;
    }

    if (cancel === this.clc) {
      this.clc = null;
    }

    return componentResult;
  }

  _getData(fn) {
    let cancelled = false;

    const cancel = () => {
      cancelled = true;
    };

    this.clc = cancel;
    return fn().then(data => {
      if (cancel === this.clc) {
        this.clc = null;
      }

      if (cancelled) {
        const err = new Error('Loading initial props cancelled');
        err.cancelled = true;
        throw err;
      }

      return data;
    });
  }

  _getStaticData(dataHref) {
    const {
      href: cacheKey
    } = new URL(dataHref, window.location.href);

    if (false) {}

    return fetchNextData(dataHref, this.isSsr).then(data => {
      this.sdc[cacheKey] = data;
      return data;
    });
  }

  _getServerData(dataHref) {
    return fetchNextData(dataHref, this.isSsr);
  }

  getInitialProps(Component, ctx) {
    const {
      Component: App
    } = this.components['/_app'];

    const AppTree = this._wrapApp(App);

    ctx.AppTree = AppTree;
    return (0, _utils.loadGetInitialProps)(App, {
      AppTree,
      Component,
      router: this,
      ctx
    });
  }

  abortComponentLoad(as, routeProps) {
    if (this.clc) {
      Router.events.emit('routeChangeError', buildCancellationError(), as, routeProps);
      this.clc();
      this.clc = null;
    }
  }

  notify(data, resetScroll) {
    return this.sub(data, this.components['/_app'].Component, resetScroll);
  }

}

exports.default = Router;
Router.events = (0, _mitt.default)();

/***/ }),

/***/ "./node_modules/next/dist/next-server/lib/router/utils/format-url.js":
/*!***************************************************************************!*\
  !*** ./node_modules/next/dist/next-server/lib/router/utils/format-url.js ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.formatUrl = formatUrl;

var querystring = _interopRequireWildcard(__webpack_require__(/*! ./querystring */ "./node_modules/next/dist/next-server/lib/router/utils/querystring.js"));

function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function () {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
} // Format function modified from nodejs
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.


const slashedProtocols = /https?|ftp|gopher|file/;

function formatUrl(urlObj) {
  let {
    auth,
    hostname
  } = urlObj;
  let protocol = urlObj.protocol || '';
  let pathname = urlObj.pathname || '';
  let hash = urlObj.hash || '';
  let query = urlObj.query || '';
  let host = false;
  auth = auth ? encodeURIComponent(auth).replace(/%3A/i, ':') + '@' : '';

  if (urlObj.host) {
    host = auth + urlObj.host;
  } else if (hostname) {
    host = auth + (~hostname.indexOf(':') ? `[${hostname}]` : hostname);

    if (urlObj.port) {
      host += ':' + urlObj.port;
    }
  }

  if (query && typeof query === 'object') {
    query = String(querystring.urlQueryToSearchParams(query));
  }

  let search = urlObj.search || query && `?${query}` || '';
  if (protocol && protocol.substr(-1) !== ':') protocol += ':';

  if (urlObj.slashes || (!protocol || slashedProtocols.test(protocol)) && host !== false) {
    host = '//' + (host || '');
    if (pathname && pathname[0] !== '/') pathname = '/' + pathname;
  } else if (!host) {
    host = '';
  }

  if (hash && hash[0] !== '#') hash = '#' + hash;
  if (search && search[0] !== '?') search = '?' + search;
  pathname = pathname.replace(/[?#]/g, encodeURIComponent);
  search = search.replace('#', '%23');
  return `${protocol}${host}${pathname}${search}${hash}`;
}

/***/ }),

/***/ "./node_modules/next/dist/next-server/lib/router/utils/is-dynamic.js":
/*!***************************************************************************!*\
  !*** ./node_modules/next/dist/next-server/lib/router/utils/is-dynamic.js ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.isDynamicRoute = isDynamicRoute; // Identify /[param]/ in route string

const TEST_ROUTE = /\/\[[^/]+?\](?=\/|$)/;

function isDynamicRoute(route) {
  return TEST_ROUTE.test(route);
}

/***/ }),

/***/ "./node_modules/next/dist/next-server/lib/router/utils/parse-relative-url.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/next/dist/next-server/lib/router/utils/parse-relative-url.js ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.parseRelativeUrl = parseRelativeUrl;

var _utils = __webpack_require__(/*! ../../utils */ "./node_modules/next/dist/next-server/lib/utils.js");

var _querystring = __webpack_require__(/*! ./querystring */ "./node_modules/next/dist/next-server/lib/router/utils/querystring.js");
/**
* Parses path-relative urls (e.g. `/hello/world?foo=bar`). If url isn't path-relative
* (e.g. `./hello`) then at least base must be.
* Absolute urls are rejected with one exception, in the browser, absolute urls that are on
* the current origin will be parsed as relative
*/


function parseRelativeUrl(url, base) {
  const globalBase = new URL(true ? 'http://n' : undefined);
  const resolvedBase = base ? new URL(base, globalBase) : globalBase;
  const {
    pathname,
    searchParams,
    search,
    hash,
    href,
    origin
  } = new URL(url, resolvedBase);

  if (origin !== globalBase.origin) {
    throw new Error(`invariant: invalid relative URL, router received ${url}`);
  }

  return {
    pathname,
    query: (0, _querystring.searchParamsToUrlQuery)(searchParams),
    search,
    hash,
    href: href.slice(globalBase.origin.length)
  };
}

/***/ }),

/***/ "./node_modules/next/dist/next-server/lib/router/utils/path-match.js":
/*!***************************************************************************!*\
  !*** ./node_modules/next/dist/next-server/lib/router/utils/path-match.js ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

exports.__esModule = true;
exports.pathToRegexp = exports.default = exports.customRouteMatcherOptions = exports.matcherOptions = void 0;

var pathToRegexp = _interopRequireWildcard(__webpack_require__(/*! next/dist/compiled/path-to-regexp */ "./node_modules/next/dist/compiled/path-to-regexp/index.js"));

exports.pathToRegexp = pathToRegexp;

function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function () {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

const matcherOptions = {
  sensitive: false,
  delimiter: '/'
};
exports.matcherOptions = matcherOptions;

const customRouteMatcherOptions = _objectSpread(_objectSpread({}, matcherOptions), {}, {
  strict: true
});

exports.customRouteMatcherOptions = customRouteMatcherOptions;

var _default = (customRoute = false) => {
  return path => {
    const keys = [];
    const matcherRegex = pathToRegexp.pathToRegexp(path, keys, customRoute ? customRouteMatcherOptions : matcherOptions);
    const matcher = pathToRegexp.regexpToFunction(matcherRegex, keys);
    return (pathname, params) => {
      const res = pathname == null ? false : matcher(pathname);

      if (!res) {
        return false;
      }

      if (customRoute) {
        for (const key of keys) {
          // unnamed params should be removed as they
          // are not allowed to be used in the destination
          if (typeof key.name === 'number') {
            delete res.params[key.name];
          }
        }
      }

      return _objectSpread(_objectSpread({}, params), res.params);
    };
  };
};

exports.default = _default;

/***/ }),

/***/ "./node_modules/next/dist/next-server/lib/router/utils/prepare-destination.js":
/*!************************************************************************************!*\
  !*** ./node_modules/next/dist/next-server/lib/router/utils/prepare-destination.js ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

exports.__esModule = true;
exports.compileNonPath = compileNonPath;
exports.default = prepareDestination;

var _querystring = __webpack_require__(/*! ./querystring */ "./node_modules/next/dist/next-server/lib/router/utils/querystring.js");

var _parseRelativeUrl = __webpack_require__(/*! ./parse-relative-url */ "./node_modules/next/dist/next-server/lib/router/utils/parse-relative-url.js");

var pathToRegexp = _interopRequireWildcard(__webpack_require__(/*! next/dist/compiled/path-to-regexp */ "./node_modules/next/dist/compiled/path-to-regexp/index.js"));

function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function () {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

function compileNonPath(value, params) {
  if (!value.includes(':')) {
    return value;
  }

  for (const key of Object.keys(params)) {
    if (value.includes(`:${key}`)) {
      value = value.replace(new RegExp(`:${key}\\*`, 'g'), `:${key}--ESCAPED_PARAM_ASTERISKS`).replace(new RegExp(`:${key}\\?`, 'g'), `:${key}--ESCAPED_PARAM_QUESTION`).replace(new RegExp(`:${key}\\+`, 'g'), `:${key}--ESCAPED_PARAM_PLUS`).replace(new RegExp(`:${key}(?!\\w)`, 'g'), `--ESCAPED_PARAM_COLON${key}`);
    }
  }

  value = value.replace(/(:|\*|\?|\+|\(|\)|\{|\})/g, '\\$1').replace(/--ESCAPED_PARAM_PLUS/g, '+').replace(/--ESCAPED_PARAM_COLON/g, ':').replace(/--ESCAPED_PARAM_QUESTION/g, '?').replace(/--ESCAPED_PARAM_ASTERISKS/g, '*'); // the value needs to start with a forward-slash to be compiled
  // correctly

  return pathToRegexp.compile(`/${value}`, {
    validate: false
  })(params).substr(1);
}

function prepareDestination(destination, params, query, appendParamsToQuery) {
  let parsedDestination = {}; // clone query so we don't modify the original

  query = Object.assign({}, query);
  const hadLocale = query.__nextLocale;
  delete query.__nextLocale;
  delete query.__nextDefaultLocale;

  if (destination.startsWith('/')) {
    parsedDestination = (0, _parseRelativeUrl.parseRelativeUrl)(destination);
  } else {
    const {
      pathname,
      searchParams,
      hash,
      hostname,
      port,
      protocol,
      search,
      href
    } = new URL(destination);
    parsedDestination = {
      pathname,
      query: (0, _querystring.searchParamsToUrlQuery)(searchParams),
      hash,
      protocol,
      hostname,
      port,
      search,
      href
    };
  }

  const destQuery = parsedDestination.query;
  const destPath = `${parsedDestination.pathname}${parsedDestination.hash || ''}`;
  const destPathParamKeys = [];
  pathToRegexp.pathToRegexp(destPath, destPathParamKeys);
  const destPathParams = destPathParamKeys.map(key => key.name);
  let destinationCompiler = pathToRegexp.compile(destPath, // we don't validate while compiling the destination since we should
  // have already validated before we got to this point and validating
  // breaks compiling destinations with named pattern params from the source
  // e.g. /something:hello(.*) -> /another/:hello is broken with validation
  // since compile validation is meant for reversing and not for inserting
  // params from a separate path-regex into another
  {
    validate: false
  });
  let newUrl; // update any params in query values

  for (const [key, strOrArray] of Object.entries(destQuery)) {
    let value = Array.isArray(strOrArray) ? strOrArray[0] : strOrArray;

    if (value) {
      // the value needs to start with a forward-slash to be compiled
      // correctly
      value = compileNonPath(value, params);
    }

    destQuery[key] = value;
  } // add path params to query if it's not a redirect and not
  // already defined in destination query or path


  let paramKeys = Object.keys(params); // remove internal param for i18n

  if (hadLocale) {
    paramKeys = paramKeys.filter(name => name !== 'nextInternalLocale');
  }

  if (appendParamsToQuery && !paramKeys.some(key => destPathParams.includes(key))) {
    for (const key of paramKeys) {
      if (!(key in destQuery)) {
        destQuery[key] = params[key];
      }
    }
  }

  try {
    newUrl = destinationCompiler(params);
    const [pathname, hash] = newUrl.split('#');
    parsedDestination.pathname = pathname;
    parsedDestination.hash = `${hash ? '#' : ''}${hash || ''}`;
    delete parsedDestination.search;
  } catch (err) {
    if (err.message.match(/Expected .*? to not repeat, but got an array/)) {
      throw new Error(`To use a multi-match in the destination you must add \`*\` at the end of the param name to signify it should repeat. https://err.sh/vercel/next.js/invalid-multi-match`);
    }

    throw err;
  } // Query merge order lowest priority to highest
  // 1. initial URL query values
  // 2. path segment values
  // 3. destination specified query values


  parsedDestination.query = _objectSpread(_objectSpread({}, query), parsedDestination.query);
  return {
    newUrl,
    parsedDestination
  };
}

/***/ }),

/***/ "./node_modules/next/dist/next-server/lib/router/utils/querystring.js":
/*!****************************************************************************!*\
  !*** ./node_modules/next/dist/next-server/lib/router/utils/querystring.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.searchParamsToUrlQuery = searchParamsToUrlQuery;
exports.urlQueryToSearchParams = urlQueryToSearchParams;
exports.assign = assign;

function searchParamsToUrlQuery(searchParams) {
  const query = {};
  searchParams.forEach((value, key) => {
    if (typeof query[key] === 'undefined') {
      query[key] = value;
    } else if (Array.isArray(query[key])) {
      ;
      query[key].push(value);
    } else {
      query[key] = [query[key], value];
    }
  });
  return query;
}

function stringifyUrlQueryParam(param) {
  if (typeof param === 'string' || typeof param === 'number' && !isNaN(param) || typeof param === 'boolean') {
    return String(param);
  } else {
    return '';
  }
}

function urlQueryToSearchParams(urlQuery) {
  const result = new URLSearchParams();
  Object.entries(urlQuery).forEach(([key, value]) => {
    if (Array.isArray(value)) {
      value.forEach(item => result.append(key, stringifyUrlQueryParam(item)));
    } else {
      result.set(key, stringifyUrlQueryParam(value));
    }
  });
  return result;
}

function assign(target, ...searchParamsList) {
  searchParamsList.forEach(searchParams => {
    Array.from(searchParams.keys()).forEach(key => target.delete(key));
    searchParams.forEach((value, key) => target.append(key, value));
  });
  return target;
}

/***/ }),

/***/ "./node_modules/next/dist/next-server/lib/router/utils/resolve-rewrites.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/next/dist/next-server/lib/router/utils/resolve-rewrites.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = resolveRewrites;

var _pathMatch = _interopRequireDefault(__webpack_require__(/*! ./path-match */ "./node_modules/next/dist/next-server/lib/router/utils/path-match.js"));

var _prepareDestination = _interopRequireDefault(__webpack_require__(/*! ./prepare-destination */ "./node_modules/next/dist/next-server/lib/router/utils/prepare-destination.js"));

var _normalizeTrailingSlash = __webpack_require__(/*! ../../../../client/normalize-trailing-slash */ "./node_modules/next/dist/client/normalize-trailing-slash.js");

var _normalizeLocalePath = __webpack_require__(/*! ../../i18n/normalize-locale-path */ "./node_modules/next/dist/next-server/lib/i18n/normalize-locale-path.js");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

const customRouteMatcher = (0, _pathMatch.default)(true);

function resolveRewrites(asPath, pages, rewrites, query, resolveHref, locales) {
  if (!pages.includes((0, _normalizeLocalePath.normalizeLocalePath)(asPath, locales).pathname)) {
    for (const rewrite of rewrites) {
      const matcher = customRouteMatcher(rewrite.source);
      const params = matcher(asPath);

      if (params) {
        if (!rewrite.destination) {
          // this is a proxied rewrite which isn't handled on the client
          break;
        }

        const destRes = (0, _prepareDestination.default)(rewrite.destination, params, query, true);
        asPath = destRes.parsedDestination.pathname;
        Object.assign(query, destRes.parsedDestination.query);
        const fsPathname = (0, _normalizeLocalePath.normalizeLocalePath)((0, _normalizeTrailingSlash.removePathTrailingSlash)(asPath), locales).pathname;

        if (pages.includes(fsPathname)) {
          asPath = fsPathname; // check if we now match a page as this means we are done
          // resolving the rewrites

          break;
        } // check if we match a dynamic-route, if so we break the rewrites chain


        const resolvedHref = resolveHref(fsPathname);

        if (resolvedHref !== asPath && pages.includes(resolvedHref)) {
          asPath = fsPathname;
          break;
        }
      }
    }
  }

  return asPath;
}

/***/ }),

/***/ "./node_modules/next/dist/next-server/lib/router/utils/route-matcher.js":
/*!******************************************************************************!*\
  !*** ./node_modules/next/dist/next-server/lib/router/utils/route-matcher.js ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.getRouteMatcher = getRouteMatcher;

function getRouteMatcher(routeRegex) {
  const {
    re,
    groups
  } = routeRegex;
  return pathname => {
    const routeMatch = re.exec(pathname);

    if (!routeMatch) {
      return false;
    }

    const decode = param => {
      try {
        return decodeURIComponent(param);
      } catch (_) {
        const err = new Error('failed to decode param');
        err.code = 'DECODE_FAILED';
        throw err;
      }
    };

    const params = {};
    Object.keys(groups).forEach(slugName => {
      const g = groups[slugName];
      const m = routeMatch[g.pos];

      if (m !== undefined) {
        params[slugName] = ~m.indexOf('/') ? m.split('/').map(entry => decode(entry)) : g.repeat ? [decode(m)] : decode(m);
      }
    });
    return params;
  };
}

/***/ }),

/***/ "./node_modules/next/dist/next-server/lib/router/utils/route-regex.js":
/*!****************************************************************************!*\
  !*** ./node_modules/next/dist/next-server/lib/router/utils/route-regex.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.getRouteRegex = getRouteRegex; // this isn't importing the escape-string-regex module
// to reduce bytes

function escapeRegex(str) {
  return str.replace(/[|\\{}()[\]^$+*?.-]/g, '\\$&');
}

function parseParameter(param) {
  const optional = param.startsWith('[') && param.endsWith(']');

  if (optional) {
    param = param.slice(1, -1);
  }

  const repeat = param.startsWith('...');

  if (repeat) {
    param = param.slice(3);
  }

  return {
    key: param,
    repeat,
    optional
  };
}

function getRouteRegex(normalizedRoute) {
  const segments = (normalizedRoute.replace(/\/$/, '') || '/').slice(1).split('/');
  const groups = {};
  let groupIndex = 1;
  const parameterizedRoute = segments.map(segment => {
    if (segment.startsWith('[') && segment.endsWith(']')) {
      const {
        key,
        optional,
        repeat
      } = parseParameter(segment.slice(1, -1));
      groups[key] = {
        pos: groupIndex++,
        repeat,
        optional
      };
      return repeat ? optional ? '(?:/(.+?))?' : '/(.+?)' : '/([^/]+?)';
    } else {
      return `/${escapeRegex(segment)}`;
    }
  }).join(''); // dead code eliminate for browser since it's only needed
  // while generating routes-manifest

  if (true) {
    let routeKeyCharCode = 97;
    let routeKeyCharLength = 1; // builds a minimal routeKey using only a-z and minimal number of characters

    const getSafeRouteKey = () => {
      let routeKey = '';

      for (let i = 0; i < routeKeyCharLength; i++) {
        routeKey += String.fromCharCode(routeKeyCharCode);
        routeKeyCharCode++;

        if (routeKeyCharCode > 122) {
          routeKeyCharLength++;
          routeKeyCharCode = 97;
        }
      }

      return routeKey;
    };

    const routeKeys = {};
    let namedParameterizedRoute = segments.map(segment => {
      if (segment.startsWith('[') && segment.endsWith(']')) {
        const {
          key,
          optional,
          repeat
        } = parseParameter(segment.slice(1, -1)); // replace any non-word characters since they can break
        // the named regex

        let cleanedKey = key.replace(/\W/g, '');
        let invalidKey = false; // check if the key is still invalid and fallback to using a known
        // safe key

        if (cleanedKey.length === 0 || cleanedKey.length > 30) {
          invalidKey = true;
        }

        if (!isNaN(parseInt(cleanedKey.substr(0, 1)))) {
          invalidKey = true;
        }

        if (invalidKey) {
          cleanedKey = getSafeRouteKey();
        }

        routeKeys[cleanedKey] = key;
        return repeat ? optional ? `(?:/(?<${cleanedKey}>.+?))?` : `/(?<${cleanedKey}>.+?)` : `/(?<${cleanedKey}>[^/]+?)`;
      } else {
        return `/${escapeRegex(segment)}`;
      }
    }).join('');
    return {
      re: new RegExp(`^${parameterizedRoute}(?:/)?$`),
      groups,
      routeKeys,
      namedRegex: `^${namedParameterizedRoute}(?:/)?$`
    };
  }

  return {
    re: new RegExp(`^${parameterizedRoute}(?:/)?$`),
    groups
  };
}

/***/ }),

/***/ "./node_modules/next/dist/next-server/lib/utils.js":
/*!*********************************************************!*\
  !*** ./node_modules/next/dist/next-server/lib/utils.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.execOnce = execOnce;
exports.getLocationOrigin = getLocationOrigin;
exports.getURL = getURL;
exports.getDisplayName = getDisplayName;
exports.isResSent = isResSent;
exports.loadGetInitialProps = loadGetInitialProps;
exports.formatWithValidation = formatWithValidation;
exports.ST = exports.SP = exports.urlObjectKeys = void 0;

var _formatUrl = __webpack_require__(/*! ./router/utils/format-url */ "./node_modules/next/dist/next-server/lib/router/utils/format-url.js");
/**
* Utils
*/


function execOnce(fn) {
  let used = false;
  let result;
  return (...args) => {
    if (!used) {
      used = true;
      result = fn(...args);
    }

    return result;
  };
}

function getLocationOrigin() {
  const {
    protocol,
    hostname,
    port
  } = window.location;
  return `${protocol}//${hostname}${port ? ':' + port : ''}`;
}

function getURL() {
  const {
    href
  } = window.location;
  const origin = getLocationOrigin();
  return href.substring(origin.length);
}

function getDisplayName(Component) {
  return typeof Component === 'string' ? Component : Component.displayName || Component.name || 'Unknown';
}

function isResSent(res) {
  return res.finished || res.headersSent;
}

async function loadGetInitialProps(App, ctx) {
  if (true) {
    var _App$prototype;

    if ((_App$prototype = App.prototype) != null && _App$prototype.getInitialProps) {
      const message = `"${getDisplayName(App)}.getInitialProps()" is defined as an instance method - visit https://err.sh/vercel/next.js/get-initial-props-as-an-instance-method for more information.`;
      throw new Error(message);
    }
  } // when called from _app `ctx` is nested in `ctx`


  const res = ctx.res || ctx.ctx && ctx.ctx.res;

  if (!App.getInitialProps) {
    if (ctx.ctx && ctx.Component) {
      // @ts-ignore pageProps default
      return {
        pageProps: await loadGetInitialProps(ctx.Component, ctx.ctx)
      };
    }

    return {};
  }

  const props = await App.getInitialProps(ctx);

  if (res && isResSent(res)) {
    return props;
  }

  if (!props) {
    const message = `"${getDisplayName(App)}.getInitialProps()" should resolve to an object. But found "${props}" instead.`;
    throw new Error(message);
  }

  if (true) {
    if (Object.keys(props).length === 0 && !ctx.ctx) {
      console.warn(`${getDisplayName(App)} returned an empty object from \`getInitialProps\`. This de-optimizes and prevents automatic static optimization. https://err.sh/vercel/next.js/empty-object-getInitialProps`);
    }
  }

  return props;
}

const urlObjectKeys = ['auth', 'hash', 'host', 'hostname', 'href', 'path', 'pathname', 'port', 'protocol', 'query', 'search', 'slashes'];
exports.urlObjectKeys = urlObjectKeys;

function formatWithValidation(url) {
  if (true) {
    if (url !== null && typeof url === 'object') {
      Object.keys(url).forEach(key => {
        if (urlObjectKeys.indexOf(key) === -1) {
          console.warn(`Unknown key passed via urlObject into url.format: ${key}`);
        }
      });
    }
  }

  return (0, _formatUrl.formatUrl)(url);
}

const SP = typeof performance !== 'undefined';
exports.SP = SP;
const ST = SP && typeof performance.mark === 'function' && typeof performance.measure === 'function';
exports.ST = ST;

/***/ }),

/***/ "./node_modules/next/dist/next-server/server/denormalize-page-path.js":
/*!****************************************************************************!*\
  !*** ./node_modules/next/dist/next-server/server/denormalize-page-path.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
exports.__esModule=true;exports.normalizePathSep=normalizePathSep;exports.denormalizePagePath=denormalizePagePath;function normalizePathSep(path){return path.replace(/\\/g,'/');}function denormalizePagePath(page){page=normalizePathSep(page);if(page.startsWith('/index/')){page=page.slice(6);}else if(page==='/index'){page='/';}return page;}
//# sourceMappingURL=denormalize-page-path.js.map

/***/ }),

/***/ "./node_modules/next/dist/pages/_app.js":
/*!**********************************************!*\
  !*** ./node_modules/next/dist/pages/_app.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");

exports.__esModule = true;
exports.Container = Container;
exports.createUrl = createUrl;
exports.default = void 0;

var _react = _interopRequireDefault(__webpack_require__(/*! react */ "react"));

var _utils = __webpack_require__(/*! ../next-server/lib/utils */ "../next-server/lib/utils");

exports.AppInitialProps = _utils.AppInitialProps;
exports.NextWebVitalsMetric = _utils.NextWebVitalsMetric;
/**
* `App` component is used for initialize of pages. It allows for overwriting and full control of the `page` initialization.
* This allows for keeping state between navigation, custom error handling, injecting additional data.
*/

async function appGetInitialProps({
  Component,
  ctx
}) {
  const pageProps = await (0, _utils.loadGetInitialProps)(Component, ctx);
  return {
    pageProps
  };
}

class App extends _react.default.Component {
  // Kept here for backwards compatibility.
  // When someone ended App they could call `super.componentDidCatch`.
  // @deprecated This method is no longer needed. Errors are caught at the top level
  componentDidCatch(error, _errorInfo) {
    throw error;
  }

  render() {
    const {
      router,
      Component,
      pageProps,
      __N_SSG,
      __N_SSP
    } = this.props;
    return /*#__PURE__*/_react.default.createElement(Component, Object.assign({}, pageProps, // we don't add the legacy URL prop if it's using non-legacy
    // methods like getStaticProps and getServerSideProps
    !(__N_SSG || __N_SSP) ? {
      url: createUrl(router)
    } : {}));
  }

}

exports.default = App;
App.origGetInitialProps = appGetInitialProps;
App.getInitialProps = appGetInitialProps;
let warnContainer;
let warnUrl;

if (true) {
  warnContainer = (0, _utils.execOnce)(() => {
    console.warn(`Warning: the \`Container\` in \`_app\` has been deprecated and should be removed. https://err.sh/vercel/next.js/app-container-deprecated`);
  });
  warnUrl = (0, _utils.execOnce)(() => {
    console.error(`Warning: the 'url' property is deprecated. https://err.sh/vercel/next.js/url-deprecated`);
  });
} // @deprecated noop for now until removal


function Container(p) {
  if (true) warnContainer();
  return p.children;
}

function createUrl(router) {
  // This is to make sure we don't references the router object at call time
  const {
    pathname,
    asPath,
    query
  } = router;
  return {
    get query() {
      if (true) warnUrl();
      return query;
    },

    get pathname() {
      if (true) warnUrl();
      return pathname;
    },

    get asPath() {
      if (true) warnUrl();
      return asPath;
    },

    back: () => {
      if (true) warnUrl();
      router.back();
    },
    push: (url, as) => {
      if (true) warnUrl();
      return router.push(url, as);
    },
    pushTo: (href, as) => {
      if (true) warnUrl();
      const pushRoute = as ? href : '';
      const pushUrl = as || href;
      return router.push(pushRoute, pushUrl);
    },
    replace: (url, as) => {
      if (true) warnUrl();
      return router.replace(url, as);
    },
    replaceTo: (href, as) => {
      if (true) warnUrl();
      const replaceRoute = as ? href : '';
      const replaceUrl = as || href;
      return router.replace(replaceRoute, replaceUrl);
    }
  };
}

/***/ }),

/***/ "./node_modules/next/link.js":
/*!***********************************!*\
  !*** ./node_modules/next/link.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! ./dist/client/link */ "./node_modules/next/dist/client/link.js")


/***/ }),

/***/ "./node_modules/rmc-picker/assets/index.css":
/*!**************************************************!*\
  !*** ./node_modules/rmc-picker/assets/index.css ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports) {



/***/ }),

/***/ "./pages/_app.js":
/*!***********************!*\
  !*** ./pages/_app.js ***!
  \***********************/
/*! exports provided: reportWebVitals, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "reportWebVitals", function() { return reportWebVitals; });
/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ "react/jsx-dev-runtime");
/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var next_app__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/app */ "./node_modules/next/app.js");
/* harmony import */ var next_app__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_app__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _layouts_default__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./_layouts/default */ "./pages/_layouts/default.jsx");
/* harmony import */ var react_jss__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react-jss */ "react-jss");
/* harmony import */ var react_jss__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(react_jss__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var bootstrap_dist_css_bootstrap_css__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! bootstrap/dist/css/bootstrap.css */ "./node_modules/bootstrap/dist/css/bootstrap.css");
/* harmony import */ var bootstrap_dist_css_bootstrap_css__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(bootstrap_dist_css_bootstrap_css__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! static/styles/jss/variables */ "./static/styles/jss/variables.js");
/* harmony import */ var react_redux__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! react-redux */ "react-redux");
/* harmony import */ var react_redux__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(react_redux__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var next_redux_wrapper__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! next-redux-wrapper */ "next-redux-wrapper");
/* harmony import */ var next_redux_wrapper__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(next_redux_wrapper__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var store_configureStore__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! store/configureStore */ "./store/configureStore.js");


var _jsxFileName = "C:\\Users\\arthu\\OneDrive\\Desktop\\Important\\daser\\next\\sexjobs\\pages\\_app.js";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }










const style = {
  '@global': {
    'a': {
      textDecoration: 'none !important'
    },
    'body': {
      '@media (hover: none)': {
        paddingRight: '0px !important'
      }
    },
    'body, *': {
      margin: '0px',
      boxSizing: 'border-box',
      fontFamily: 'Arial'
    },
    'main': {
      flex: '1 0 auto',
      paddingTop: '16px',
      paddingBottom: '16px'
    },
    '#__next': {
      backgroundColor: static_styles_jss_variables__WEBPACK_IMPORTED_MODULE_6__["default"].$bodyColor,
      height: '100vh',
      display: 'flex',
      flexDirection: 'column'
    }
  }
};

class Layout extends next_app__WEBPACK_IMPORTED_MODULE_2___default.a {
  static async getInitialProps({
    Component,
    ctx
  }) {
    let pageProps = {}; // Retrieving each page's props

    if (Component.getInitialProps) {
      pageProps = await Component.getInitialProps({
        ctx
      });
    }

    return {
      pageProps: pageProps
    };
  }

  componentDidMount() {
    const jssStyles = document.querySelector('#jss-server-side');

    if (jssStyles) {
      jssStyles.parentElement.removeChild(jssStyles);
    }
  }

  render() {
    const {
      Component,
      pageProps,
      store
    } = this.props;
    const Layout = Component.Layout || _layouts_default__WEBPACK_IMPORTED_MODULE_3__["default"];
    return /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["Fragment"], {
      children: /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])(react_redux__WEBPACK_IMPORTED_MODULE_7__["Provider"], {
        store: store,
        children: /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])(Layout, {
          children: /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])(Component, _objectSpread({}, pageProps), void 0, false, {
            fileName: _jsxFileName,
            lineNumber: 68,
            columnNumber: 25
          }, this)
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 67,
          columnNumber: 21
        }, this)
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 66,
        columnNumber: 17
      }, this)
    }, void 0, false);
  }

}

function reportWebVitals(metric) {
  console.log(metric);
}
/* harmony default export */ __webpack_exports__["default"] = (next_redux_wrapper__WEBPACK_IMPORTED_MODULE_8___default()(store_configureStore__WEBPACK_IMPORTED_MODULE_9__["default"])(react_jss__WEBPACK_IMPORTED_MODULE_4___default()(style)(Layout)));

/***/ }),

/***/ "./pages/_layouts/default.jsx":
/*!************************************!*\
  !*** ./pages/_layouts/default.jsx ***!
  \************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ "react/jsx-dev-runtime");
/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var Components_Shared_Header__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! Components/Shared/Header */ "./Components/Shared/Header/index.jsx");
/* harmony import */ var Components_Shared_Footer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! Components/Shared/Footer */ "./Components/Shared/Footer/index.jsx");


var _jsxFileName = "C:\\Users\\arthu\\OneDrive\\Desktop\\Important\\daser\\next\\sexjobs\\pages\\_layouts\\default.jsx";




const Default = ({
  children
}) => {
  return /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["Fragment"], {
    children: [/*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])(Components_Shared_Header__WEBPACK_IMPORTED_MODULE_2__["default"], {}, void 0, false, {
      fileName: _jsxFileName,
      lineNumber: 8,
      columnNumber: 13
    }, undefined), /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])("main", {
      className: "Content",
      children: children
    }, void 0, false, {
      fileName: _jsxFileName,
      lineNumber: 9,
      columnNumber: 13
    }, undefined), /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__["jsxDEV"])(Components_Shared_Footer__WEBPACK_IMPORTED_MODULE_3__["default"], {}, void 0, false, {
      fileName: _jsxFileName,
      lineNumber: 12,
      columnNumber: 13
    }, undefined)]
  }, void 0, true);
};

/* harmony default export */ __webpack_exports__["default"] = (/*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.memo(Default));

/***/ }),

/***/ "./static/styles/jss/mixins.js":
/*!*************************************!*\
  !*** ./static/styles/jss/mixins.js ***!
  \*************************************/
/*! exports provided: MediaQuery */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MediaQuery", function() { return MediaQuery; });
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const Breakpoints = {
  //Only max screens
  $screen_max_xs_s: 480,
  $screen_max_xs: 576,
  $screen_max_sm: 767,
  $screen_max_md: 991,
  $screen_max_lg: 1200,
  $screen_max_xl: 1400,
  //Only min screens
  $screen_min_xs_s: 481,
  $screen_min_xs: 577,
  $screen_min_sm: 768,
  $screen_min_md: 992,
  $screen_min_lg: 1201,
  $screen_min_xl: 1401
};
const MediaQuery = {
  up(content) {
    return {
      xss: {
        [`@media (min-width: ${Breakpoints.$screen_min_xs_s}px)`]: _objectSpread({}, content)
      },
      xs: {
        [`@media (min-width: ${Breakpoints.$screen_min_xs}px)`]: _objectSpread({}, content)
      },
      sm: {
        [`@media (min-width: ${Breakpoints.$screen_min_sm}px)`]: _objectSpread({}, content)
      },
      md: {
        [`@media (min-width: ${Breakpoints.$screen_min_md}px)`]: _objectSpread({}, content)
      },
      lg: {
        [`@media (min-width: ${Breakpoints.$screen_min_lg}px)`]: _objectSpread({}, content)
      },
      xl: {
        [`@media (min-width: ${Breakpoints.$screen_min_xl}px)`]: _objectSpread({}, content)
      }
    };
  },

  down(content) {
    return {
      xss: {
        [`@media (max-width: ${Breakpoints.$screen_max_xs_s}px)`]: _objectSpread({}, content)
      },
      xs: {
        [`@media (max-width: ${Breakpoints.$screen_max_xs}px)`]: _objectSpread({}, content)
      },
      sm: {
        [`@media (max-width: ${Breakpoints.$screen_max_sm}px)`]: _objectSpread({}, content)
      },
      md: {
        [`@media (max-width: ${Breakpoints.$screen_max_md}px)`]: _objectSpread({}, content)
      },
      lg: {
        [`@media (max-width: ${Breakpoints.$screen_max_lg}px)`]: _objectSpread({}, content)
      },
      xl: {
        [`@media (max-width: ${Breakpoints.$screen_max_xl}px)`]: _objectSpread({}, content)
      }
    };
  },

  between(content) {
    return {
      xss_xs: {
        [`@media (min-width: ${Breakpoints.$screen_min_xs_s}px) and (max-width: ${Breakpoints.$screen_max_xs}px)`]: _objectSpread({}, content)
      },
      xss_sm: {
        [`@media (min-width: ${Breakpoints.$screen_min_xs_s}px) and (max-width: ${Breakpoints.$screen_max_sm}px)`]: _objectSpread({}, content)
      },
      xss_md: {
        [`@media (min-width: ${Breakpoints.$screen_min_xs_s}px) and (max-width: ${Breakpoints.$screen_max_md}px)`]: _objectSpread({}, content)
      },
      xs_sm: {
        [`@media (min-width: ${Breakpoints.$screen_min_xs}px) and (max-width: ${Breakpoints.$screen_max_sm}px)`]: _objectSpread({}, content)
      },
      xs_md: {
        [`@media (min-width: ${Breakpoints.$screen_min_xs}px) and (max-width: ${Breakpoints.$screen_max_md}px)`]: _objectSpread({}, content)
      },
      xs_lg: {
        [`@media (min-width: ${Breakpoints.$screen_min_xs}px) and (max-width: ${Breakpoints.$screen_max_lg}px)`]: _objectSpread({}, content)
      },
      sm_md: {
        [`@media (min-width: ${Breakpoints.$screen_min_sm}px) and (max-width: ${Breakpoints.$screen_max_md}px)`]: _objectSpread({}, content)
      },
      sm_lg: {
        [`@media (min-width: ${Breakpoints.$screen_min_sm}px) and (max-width: ${Breakpoints.$screen_max_lg}px)`]: _objectSpread({}, content)
      },
      sm_xl: {
        [`@media (min-width: ${Breakpoints.$screen_min_sm}px) and (max-width: ${Breakpoints.$screen_max_xl}px)`]: _objectSpread({}, content)
      },
      md_lg: {
        [`@media (min-width: ${Breakpoints.$screen_min_md}px) and (max-width: ${Breakpoints.$screen_max_lg}px)`]: _objectSpread({}, content)
      },
      md_xl: {
        [`@media (min-width: ${Breakpoints.$screen_min_md}px) and (max-width: ${Breakpoints.$screen_max_xl}px)`]: _objectSpread({}, content)
      },
      lg_xl: {
        [`@media (min-width: ${Breakpoints.$screen_min_lg}px) and (max-width: ${Breakpoints.$screen_max_xl}px)`]: _objectSpread({}, content)
      }
    };
  }

};

/***/ }),

/***/ "./static/styles/jss/variables.js":
/*!****************************************!*\
  !*** ./static/styles/jss/variables.js ***!
  \****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ({
  $baseColor: '#153F8F',
  $danger: '#FB2A2A',
  $baseRed: '#ED1C24',
  $baseDark: '#0B0E2A',
  $iconActiveBG: '#0A2955',
  $lightBlue: '#104991',
  $bodyColor: '#003f8f',
  $darkOpacity50: '#00224D',
  $button: {
    $radius: '2px',
    $padding: '11px 15px',
    $cta: {
      $bg: 'linear-gradient(180deg, #7AD100 0%, #5C9E00 100%)',
      $color: '#fff',
      $border: 'none',
      $hover: {
        background: 'linear-gradient(180deg, #89e802 0%, #68af04 100%)'
      },
      $disabled: {
        opacity: 0.9,
        background: 'linear-gradient(180deg, #3F8945 0%, #307145 100%)'
      }
    },
    $primary: {
      $bg: '#3378D1',
      $color: '#fff',
      $border: 'none',
      $hover: {
        backgroundColor: '#5B92DA'
      },
      $disabled: {
        opacity: 0.6
      }
    },
    $default: {
      $bg: '#072955',
      $color: '#fff',
      $border: 'none',
      $hover: {
        backgroundColor: '#375276'
      },
      $disabled: {
        opacity: 0.6,
        background: '#072955'
      }
    },
    $alt: {
      $bg: 'transparent',
      $color: '#C3CBD5',
      $border: '2px solid #C3CBD5',
      $hover: {
        borderColor: '#fff',
        color: '#fff'
      },
      $disabled: {
        opacity: 0.6
      }
    },
    $whiteBG: {
      $bg: '#fff',
      $color: '#3378D1',
      $border: '2px solid #3378D1',
      $hover: {
        opacity: .9
      },
      $disabled: {
        opacity: 0.5
      }
    },
    $alert: {
      $bg: '#CD3A3A',
      $color: '#fff',
      $border: 'none',
      $hover: {
        backgroundColor: '#D66061'
      },
      $disabled: {
        opacity: 0.6
      }
    },
    $md: {
      $padding: '11.5px 15px'
    },
    $sm: {
      $padding: '7px 10px'
    },
    $xs: {
      $padding: '4.5px 7px'
    }
  },
  $input: {
    $readOnly: '#DDD9D9',
    $iconColor: '#62676D',
    $iconSize: 13,
    $marginBottom: '20px',
    $hover: {
      boxShadow: '0 0 1px 1px #C3CBD5'
    },
    $focus: {
      outline: 'none',
      boxShadow: '0px 0px 1px 2px #B0F2F1 inset !important'
    },
    $disabledColor: '#e7e7e7',
    $radius: '2px',
    $baseColor: '#37415c',
    $fontSize: 13,
    $padding: '13px 10px',
    $placeholderColor: '#C5C5C5',
    $md: {
      $fontSize: 13,
      $padding: '11.5px 10px'
    },
    $sm: {
      $padding: '10px',
      $fontSize: 12
    },
    $xsm: {
      $padding: '5px 10px',
      $fontSize: 11
    },
    $theme: {
      $light: '#fff',
      $dark: '#0A2955',
      $darkColor: '#C3CBD5'
    },
    $checkbox: {
      $borderColor: '#C5C5C5',
      $onLightBG: '#3378D1',
      $onDarkBG: '#B0F2F1'
    },
    $transparentInput: {
      $borderColor: '#B4B4B4',
      $errorDefaultHeight: 16
    }
  },
  $select: {
    $emptyTextColor: '#C7C7C7',
    $textColor: '#000',
    $borderColor: '#fff',
    $paddingItem: '12px',
    $selected: {
      $color: '#fff',
      $bgColor: '#3378D1'
    },
    $dropdown: {
      $listItem: {
        $iconColor: '#98A4B3',
        $md: {
          $padding: '0 10px',
          $margin: '12px 0',
          $iconRight: '8px',
          $size: '25px',
          $iconSize: '18px'
        },
        $sm: {
          $padding: '0 8px',
          $margin: '8px 0',
          $iconRight: '6px',
          $size: '20px',
          $iconSize: '14px'
        },
        $xsm: {
          $padding: '0 6px',
          $margin: '6px 0',
          $iconRight: '5px',
          $size: '15px',
          $iconSize: '10px'
        }
      }
    },
    $dark: {
      $selected: {
        $color: '#C3CBD5',
        $bgColor: '#0b0e2a'
      },
      $borderColor: '#1B509F',
      $textColor: '#C3CBD5',
      $emptyTextColor: '#fff7f773'
    }
  },
  $datepicker: {
    $iconColor: '#C7C7C7',
    $textColor: '#000',
    $actionsColor: '#3378D1',
    $weekColor: 'rgba(0,0,0,0.38)',
    $md: {
      $iconSize: '18px'
    },
    $sm: {
      $iconSize: '16px'
    },
    $xsm: {
      $iconSize: '14px'
    },
    $dark: {
      $weekColor: 'rgba(195,203,213,0.3)',
      $textColor: '#C3CBD5',
      $actionsColor: '#B0F2F1'
    }
  }
});

/***/ }),

/***/ "./store/actions/index.js":
/*!********************************!*\
  !*** ./store/actions/index.js ***!
  \********************************/
/*! exports provided: toggleCategoriesMenuMobile, setPageName */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "toggleCategoriesMenuMobile", function() { return toggleCategoriesMenuMobile; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setPageName", function() { return setPageName; });
/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../types */ "./store/types/index.js");

const toggleCategoriesMenuMobile = payload => {
  return {
    type: _types__WEBPACK_IMPORTED_MODULE_0__["default"].TOGGLE_CATEGORIES_MENU,
    payload
  };
};
const setPageName = payload => {
  return {
    type: _types__WEBPACK_IMPORTED_MODULE_0__["default"].SET_PAGE_NAME,
    payload
  };
};

/***/ }),

/***/ "./store/configureStore.js":
/*!*********************************!*\
  !*** ./store/configureStore.js ***!
  \*********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var redux__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! redux */ "redux");
/* harmony import */ var redux__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(redux__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var redux_saga__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! redux-saga */ "redux-saga");
/* harmony import */ var redux_saga__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(redux_saga__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var redux_injectors__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! redux-injectors */ "redux-injectors");
/* harmony import */ var redux_injectors__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(redux_injectors__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _rootReducer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./rootReducer */ "./store/rootReducer.js");
/* harmony import */ var _rootSaga__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./rootSaga */ "./store/rootSaga.js");






function configureStore(initialState) {
  const sagaMiddleware = redux_saga__WEBPACK_IMPORTED_MODULE_1___default()();
  const {
    run: runSaga
  } = sagaMiddleware;
  const enhancers = [Object(redux__WEBPACK_IMPORTED_MODULE_0__["applyMiddleware"])(sagaMiddleware), Object(redux_injectors__WEBPACK_IMPORTED_MODULE_2__["createInjectorsEnhancer"])({
    createReducer: _rootReducer__WEBPACK_IMPORTED_MODULE_3__["default"],
    runSaga
  })];
  const store = Object(redux__WEBPACK_IMPORTED_MODULE_0__["createStore"])(Object(_rootReducer__WEBPACK_IMPORTED_MODULE_3__["default"])(), initialState, Object(redux__WEBPACK_IMPORTED_MODULE_0__["compose"])(...enhancers));
  store.sagaTask = runSaga(_rootSaga__WEBPACK_IMPORTED_MODULE_4__["default"]);
  return store;
}

/* harmony default export */ __webpack_exports__["default"] = (configureStore);

/***/ }),

/***/ "./store/reducers/base.js":
/*!********************************!*\
  !*** ./store/reducers/base.js ***!
  \********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../types */ "./store/types/index.js");
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }


const initialState = {
  categoriesMobileToggle: false,
  pageName: ''
};

const reducer = (state = initialState, action) => {
  switch (action.type) {
    case _types__WEBPACK_IMPORTED_MODULE_0__["default"].SET_PAGE_NAME:
      return _objectSpread(_objectSpread({}, state), {}, {
        pageName: action.payload
      });

    case _types__WEBPACK_IMPORTED_MODULE_0__["default"].TOGGLE_CATEGORIES_MENU:
      return _objectSpread(_objectSpread({}, state), {}, {
        categoriesMobileToggle: action.payload
      });

    default:
      return state;
  }
};

/* harmony default export */ __webpack_exports__["default"] = (reducer);

/***/ }),

/***/ "./store/rootReducer.js":
/*!******************************!*\
  !*** ./store/rootReducer.js ***!
  \******************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return createReducer; });
/* harmony import */ var redux__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! redux */ "redux");
/* harmony import */ var redux__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(redux__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _reducers_base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./reducers/base */ "./store/reducers/base.js");
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }



function createReducer(injectedReducers = {}) {
  return Object(redux__WEBPACK_IMPORTED_MODULE_0__["combineReducers"])(_objectSpread(_objectSpread({}, injectedReducers), {}, {
    base: _reducers_base__WEBPACK_IMPORTED_MODULE_1__["default"]
  }));
}
;

/***/ }),

/***/ "./store/rootSaga.js":
/*!***************************!*\
  !*** ./store/rootSaga.js ***!
  \***************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return rootSaga; });
/* harmony import */ var redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! redux-saga/effects */ "redux-saga/effects");
/* harmony import */ var redux_saga_effects__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _sagas_base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./sagas/base */ "./store/sagas/base.js");


function* rootSaga() {
  yield Object(redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__["all"])([Object(redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__["fork"])(_sagas_base__WEBPACK_IMPORTED_MODULE_1__["default"])]);
}

/***/ }),

/***/ "./store/sagas/base.js":
/*!*****************************!*\
  !*** ./store/sagas/base.js ***!
  \*****************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return baseSaga; });
/* harmony import */ var redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! redux-saga/effects */ "redux-saga/effects");
/* harmony import */ var redux_saga_effects__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__);

function* baseSaga() {}

/***/ }),

/***/ "./store/types/index.js":
/*!******************************!*\
  !*** ./store/types/index.js ***!
  \******************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ({
  TOGGLE_CATEGORIES_MENU: Symbol('TOGGLE_CATEGORIES_MENU'),
  SET_PAGE_NAME: Symbol('SET_PAGE_NAME')
});

/***/ }),

/***/ "./utils/constants.js":
/*!****************************!*\
  !*** ./utils/constants.js ***!
  \****************************/
/*! exports provided: breakpoints, deviceChecking */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "breakpoints", function() { return breakpoints; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "deviceChecking", function() { return deviceChecking; });
const breakpoints = {
  keys: {
    xss: 480,
    xs: 576,
    sm: 767,
    md: 991,
    lg: 1200,
    xl: 1920
  }
};
const deviceChecking = {
  mobile: 767,
  tablet: [768, 991],
  desktop: 992
};


/***/ }),

/***/ "./utils/handlers.js":
/*!***************************!*\
  !*** ./utils/handlers.js ***!
  \***************************/
/*! exports provided: UiGenerateMargin, UIGetMarginLeftRight */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UiGenerateMargin", function() { return UiGenerateMargin; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UIGetMarginLeftRight", function() { return UIGetMarginLeftRight; });
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const UiGenerateMargin = (marginProp, directionProp) => {
  let margin = '';
  let direction;

  const marginDetect = () => {
    return marginProp.reduce((acc, item, index) => {
      acc += item + 'px ';
      return acc;
    }, '');
  };

  if (marginProp.constructor === Array || !isNaN(marginProp)) {
    margin = typeof marginProp === 'number' ? marginProp + 'px' : marginDetect() || '0px';
  } else margin = 0;

  if (directionProp) {
    direction = _objectSpread(_objectSpread({}, directionProp === 'center' ? {
      marginLeft: 'auto',
      marginRight: 'auto'
    } : {}), {}, {
      [directionProp === 'right' ? 'marginLeft' : 'marginRight']: 'auto'
    });
  }

  return _objectSpread({
    margin
  }, direction);
};

const UIGetMarginLeftRight = margin => {
  if (margin.constructor === Array) {
    if (margin.length === 1) return 2 * margin[0];
    return ((margin[1] || 0) + (margin[3] || 0)) * (margin[3] || margin[3] === 0 ? 1 : 2);
  } else if (typeof margin === 'number') return margin * 2;
};



/***/ }),

/***/ 0:
/*!****************************************!*\
  !*** multi private-next-pages/_app.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! private-next-pages/_app.js */"./pages/_app.js");


/***/ }),

/***/ "@date-io/date-fns":
/*!************************************!*\
  !*** external "@date-io/date-fns" ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("@date-io/date-fns");

/***/ }),

/***/ "@material-ui/core":
/*!************************************!*\
  !*** external "@material-ui/core" ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("@material-ui/core");

/***/ }),

/***/ "@material-ui/core/Dialog":
/*!*******************************************!*\
  !*** external "@material-ui/core/Dialog" ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("@material-ui/core/Dialog");

/***/ }),

/***/ "@material-ui/core/DialogActions":
/*!**************************************************!*\
  !*** external "@material-ui/core/DialogActions" ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("@material-ui/core/DialogActions");

/***/ }),

/***/ "@material-ui/core/DialogContent":
/*!**************************************************!*\
  !*** external "@material-ui/core/DialogContent" ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("@material-ui/core/DialogContent");

/***/ }),

/***/ "@material-ui/core/DialogTitle":
/*!************************************************!*\
  !*** external "@material-ui/core/DialogTitle" ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("@material-ui/core/DialogTitle");

/***/ }),

/***/ "@material-ui/core/FormControl":
/*!************************************************!*\
  !*** external "@material-ui/core/FormControl" ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("@material-ui/core/FormControl");

/***/ }),

/***/ "@material-ui/core/InputAdornment":
/*!***************************************************!*\
  !*** external "@material-ui/core/InputAdornment" ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("@material-ui/core/InputAdornment");

/***/ }),

/***/ "@material-ui/core/InputLabel":
/*!***********************************************!*\
  !*** external "@material-ui/core/InputLabel" ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("@material-ui/core/InputLabel");

/***/ }),

/***/ "@material-ui/core/ListItemIcon":
/*!*************************************************!*\
  !*** external "@material-ui/core/ListItemIcon" ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("@material-ui/core/ListItemIcon");

/***/ }),

/***/ "@material-ui/core/ListItemText":
/*!*************************************************!*\
  !*** external "@material-ui/core/ListItemText" ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("@material-ui/core/ListItemText");

/***/ }),

/***/ "@material-ui/core/Popover":
/*!********************************************!*\
  !*** external "@material-ui/core/Popover" ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("@material-ui/core/Popover");

/***/ }),

/***/ "@material-ui/core/Select":
/*!*******************************************!*\
  !*** external "@material-ui/core/Select" ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("@material-ui/core/Select");

/***/ }),

/***/ "@material-ui/core/Slider":
/*!*******************************************!*\
  !*** external "@material-ui/core/Slider" ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("@material-ui/core/Slider");

/***/ }),

/***/ "@material-ui/core/TextField":
/*!**********************************************!*\
  !*** external "@material-ui/core/TextField" ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("@material-ui/core/TextField");

/***/ }),

/***/ "@material-ui/core/styles":
/*!*******************************************!*\
  !*** external "@material-ui/core/styles" ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("@material-ui/core/styles");

/***/ }),

/***/ "@material-ui/lab/Autocomplete":
/*!************************************************!*\
  !*** external "@material-ui/lab/Autocomplete" ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("@material-ui/lab/Autocomplete");

/***/ }),

/***/ "@material-ui/pickers":
/*!***************************************!*\
  !*** external "@material-ui/pickers" ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("@material-ui/pickers");

/***/ }),

/***/ "date-fns":
/*!***************************!*\
  !*** external "date-fns" ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("date-fns");

/***/ }),

/***/ "next-redux-wrapper":
/*!*************************************!*\
  !*** external "next-redux-wrapper" ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("next-redux-wrapper");

/***/ }),

/***/ "next/router":
/*!******************************!*\
  !*** external "next/router" ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("next/router");

/***/ }),

/***/ "prop-types":
/*!*****************************!*\
  !*** external "prop-types" ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("prop-types");

/***/ }),

/***/ "react":
/*!************************!*\
  !*** external "react" ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("react");

/***/ }),

/***/ "react-dom":
/*!****************************!*\
  !*** external "react-dom" ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("react-dom");

/***/ }),

/***/ "react-input-mask":
/*!***********************************!*\
  !*** external "react-input-mask" ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("react-input-mask");

/***/ }),

/***/ "react-is":
/*!***************************!*\
  !*** external "react-is" ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("react-is");

/***/ }),

/***/ "react-jss":
/*!****************************!*\
  !*** external "react-jss" ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("react-jss");

/***/ }),

/***/ "react-redux":
/*!******************************!*\
  !*** external "react-redux" ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("react-redux");

/***/ }),

/***/ "react/jsx-dev-runtime":
/*!****************************************!*\
  !*** external "react/jsx-dev-runtime" ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("react/jsx-dev-runtime");

/***/ }),

/***/ "reactstrap":
/*!*****************************!*\
  !*** external "reactstrap" ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("reactstrap");

/***/ }),

/***/ "redux":
/*!************************!*\
  !*** external "redux" ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("redux");

/***/ }),

/***/ "redux-injectors":
/*!**********************************!*\
  !*** external "redux-injectors" ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("redux-injectors");

/***/ }),

/***/ "redux-saga":
/*!*****************************!*\
  !*** external "redux-saga" ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("redux-saga");

/***/ }),

/***/ "redux-saga/effects":
/*!*************************************!*\
  !*** external "redux-saga/effects" ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("redux-saga/effects");

/***/ }),

/***/ "reselect":
/*!***************************!*\
  !*** external "reselect" ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("reselect");

/***/ }),

/***/ "rmc-picker/lib/Picker":
/*!****************************************!*\
  !*** external "rmc-picker/lib/Picker" ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("rmc-picker/lib/Picker");

/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,