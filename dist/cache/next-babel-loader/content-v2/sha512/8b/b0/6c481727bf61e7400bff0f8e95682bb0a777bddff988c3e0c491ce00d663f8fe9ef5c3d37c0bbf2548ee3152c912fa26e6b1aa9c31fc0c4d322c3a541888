{"ast":null,"code":"import React, { useEffect, useState } from \"react\";\nimport { breakpoints, deviceChecking } from 'utils/constants';\n\nconst useWidth = width => {\n  const keys = Object.keys(breakpoints.keys).reverse();\n  const devices = keys.filter(key => width <= breakpoints.keys[key]);\n  return devices.pop();\n};\n\nexport default function useMediaDevice() {\n  const isSSR = false;\n  const {\n    0: deviceSize,\n    1: setDeviceSize\n  } = useState(useWidth(isSSR ? window.innerWidth : 1200));\n  const {\n    0: windowWidth,\n    1: setWindowWidth\n  } = useState(isSSR ? window.innerWidth : 1200);\n  const {\n    0: deviceType,\n    1: setDeviceType\n  } = useState('desktop');\n\n  function changeWindowSize() {\n    setWindowWidth(window.innerWidth);\n    setDeviceSize(useWidth(window.innerWidth));\n  }\n\n  useEffect(() => {\n    if (breakpoints.keys[deviceSize] <= deviceChecking.mobile) setDeviceType('mobile');else if (breakpoints.keys[deviceSize] >= deviceChecking.tablet[0] && breakpoints.keys[deviceSize] <= deviceChecking.tablet[1]) setDeviceType('tablet');else setDeviceType('desktop');\n  }, [deviceSize]);\n  React.useEffect(() => {\n    isSSR && window.addEventListener(\"resize\", changeWindowSize);\n    return () => {\n      isSSR && window.removeEventListener(\"resize\", changeWindowSize);\n    };\n  }, []);\n  return {\n    windowWidth,\n    deviceSize,\n    deviceType\n  };\n}","map":{"version":3,"sources":["C:/Users/arthu/OneDrive/Desktop/Important/daser/next/test/Hooks/use-media-device.js"],"names":["React","useEffect","useState","breakpoints","deviceChecking","useWidth","width","keys","Object","reverse","devices","filter","key","pop","useMediaDevice","isSSR","deviceSize","setDeviceSize","window","innerWidth","windowWidth","setWindowWidth","deviceType","setDeviceType","changeWindowSize","mobile","tablet","addEventListener","removeEventListener"],"mappings":"AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,SAAQC,WAAR,EAAqBC,cAArB,QAA0C,iBAA1C;;AAEA,MAAMC,QAAQ,GAAIC,KAAD,IAAW;AACxB,QAAMC,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAYJ,WAAW,CAACI,IAAxB,EAA8BE,OAA9B,EAAb;AACA,QAAMC,OAAO,GAAGH,IAAI,CAACI,MAAL,CAAYC,GAAG,IAAIN,KAAK,IAAIH,WAAW,CAACI,IAAZ,CAAiBK,GAAjB,CAA5B,CAAhB;AACA,SAAOF,OAAO,CAACG,GAAR,EAAP;AACH,CAJD;;AAMA,eAAe,SAASC,cAAT,GAA0B;AACrC,QAAMC,KAAK,QAAX;AACA,QAAM;AAAA,OAACC,UAAD;AAAA,OAAaC;AAAb,MAA8Bf,QAAQ,CAACG,QAAQ,CAACU,KAAK,GAAGG,MAAM,CAACC,UAAV,GAAuB,IAA7B,CAAT,CAA5C;AACA,QAAM;AAAA,OAACC,WAAD;AAAA,OAAcC;AAAd,MAAgCnB,QAAQ,CAACa,KAAK,GAAGG,MAAM,CAACC,UAAV,GAAuB,IAA7B,CAA9C;AACA,QAAM;AAAA,OAACG,UAAD;AAAA,OAAaC;AAAb,MAA8BrB,QAAQ,CAAC,SAAD,CAA5C;;AAEA,WAASsB,gBAAT,GAA4B;AACxBH,IAAAA,cAAc,CAACH,MAAM,CAACC,UAAR,CAAd;AACAF,IAAAA,aAAa,CAACZ,QAAQ,CAACa,MAAM,CAACC,UAAR,CAAT,CAAb;AACH;;AAEDlB,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIE,WAAW,CAACI,IAAZ,CAAiBS,UAAjB,KAAgCZ,cAAc,CAACqB,MAAnD,EAA2DF,aAAa,CAAC,QAAD,CAAb,CAA3D,KACK,IAAIpB,WAAW,CAACI,IAAZ,CAAiBS,UAAjB,KAAgCZ,cAAc,CAACsB,MAAf,CAAsB,CAAtB,CAAhC,IAA4DvB,WAAW,CAACI,IAAZ,CAAiBS,UAAjB,KAAgCZ,cAAc,CAACsB,MAAf,CAAsB,CAAtB,CAAhG,EAA0HH,aAAa,CAAC,QAAD,CAAb,CAA1H,KACAA,aAAa,CAAC,SAAD,CAAb;AACR,GAJQ,EAIN,CAACP,UAAD,CAJM,CAAT;AAMAhB,EAAAA,KAAK,CAACC,SAAN,CAAgB,MAAM;AAClBc,IAAAA,KAAK,IAAIG,MAAM,CAACS,gBAAP,CAAwB,QAAxB,EAAkCH,gBAAlC,CAAT;AAEA,WAAO,MAAM;AACTT,MAAAA,KAAK,IAAIG,MAAM,CAACU,mBAAP,CAA2B,QAA3B,EAAqCJ,gBAArC,CAAT;AACH,KAFD;AAGH,GAND,EAMG,EANH;AAQA,SAAO;AACHJ,IAAAA,WADG;AAEHJ,IAAAA,UAFG;AAGHM,IAAAA;AAHG,GAAP;AAKH","sourcesContent":["import React, {useEffect, useState} from \"react\";\r\nimport {breakpoints, deviceChecking} from 'utils/constants';\r\n\r\nconst useWidth = (width) => {\r\n    const keys = Object.keys(breakpoints.keys).reverse();\r\n    const devices = keys.filter(key => width <= breakpoints.keys[key])\r\n    return devices.pop();\r\n}\r\n\r\nexport default function useMediaDevice() {\r\n    const isSSR = typeof window !== \"undefined\";\r\n    const [deviceSize, setDeviceSize] = useState(useWidth(isSSR ? window.innerWidth : 1200));\r\n    const [windowWidth, setWindowWidth] = useState(isSSR ? window.innerWidth : 1200);\r\n    const [deviceType, setDeviceType] = useState('desktop');\r\n\r\n    function changeWindowSize() {\r\n        setWindowWidth(window.innerWidth);\r\n        setDeviceSize(useWidth(window.innerWidth));\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (breakpoints.keys[deviceSize] <= deviceChecking.mobile) setDeviceType('mobile');\r\n        else if (breakpoints.keys[deviceSize] >= deviceChecking.tablet[0] && breakpoints.keys[deviceSize] <= deviceChecking.tablet[1]) setDeviceType('tablet')\r\n        else setDeviceType('desktop')\r\n    }, [deviceSize]);\r\n\r\n    React.useEffect(() => {\r\n        isSSR && window.addEventListener(\"resize\", changeWindowSize);\r\n\r\n        return () => {\r\n            isSSR && window.removeEventListener(\"resize\", changeWindowSize);\r\n        };\r\n    }, []);\r\n\r\n    return {\r\n        windowWidth,\r\n        deviceSize,\r\n        deviceType,\r\n    };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}