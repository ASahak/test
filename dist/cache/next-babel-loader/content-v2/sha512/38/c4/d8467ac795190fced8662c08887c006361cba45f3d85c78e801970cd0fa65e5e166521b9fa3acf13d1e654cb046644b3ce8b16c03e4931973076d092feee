{"ast":null,"code":"var _s2 = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { breakpoints, deviceChecking } from 'utils/constants';\n\nvar useWidth = function useWidth(width) {\n  var keys = Object.keys(breakpoints.keys).reverse();\n  var devices = keys.filter(function (key) {\n    return width <= breakpoints.keys[key];\n  });\n  return devices.pop();\n};\n\nexport default function useMediaDevice() {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  var isSSR = true;\n\n  var _useState = useState(useWidth(isSSR ? window.innerWidth : 1200)),\n      deviceSize = _useState[0],\n      setDeviceSize = _useState[1];\n\n  var _useState2 = useState(isSSR ? window.innerWidth : 1200),\n      windowWidth = _useState2[0],\n      setWindowWidth = _useState2[1];\n\n  var _useState3 = useState('desktop'),\n      deviceType = _useState3[0],\n      setDeviceType = _useState3[1];\n\n  function changeWindowSize() {\n    _s();\n\n    setWindowWidth(window.innerWidth);\n    setDeviceSize(useWidth(window.innerWidth));\n  }\n\n  _s(changeWindowSize, \"Z3X0ZOrlXWKLsoL+mu7/3NfURHo=\", false, function () {\n    return [useWidth];\n  });\n\n  useEffect(function () {\n    if (breakpoints.keys[deviceSize] <= deviceChecking.mobile) setDeviceType('mobile');else if (breakpoints.keys[deviceSize] >= deviceChecking.tablet[0] && breakpoints.keys[deviceSize] <= deviceChecking.tablet[1]) setDeviceType('tablet');else setDeviceType('desktop');\n  }, [deviceSize]);\n  React.useEffect(function () {\n    isSSR && window.addEventListener(\"resize\", changeWindowSize);\n    return function () {\n      isSSR && window.removeEventListener(\"resize\", changeWindowSize);\n    };\n  }, []);\n  return {\n    windowWidth: windowWidth,\n    deviceSize: deviceSize,\n    deviceType: deviceType\n  };\n}\n\n_s2(useMediaDevice, \"t+rgVuQWGFa7/Uff9Vcz9aplODA=\", false, function () {\n  return [useWidth];\n});","map":{"version":3,"sources":["C:/Users/arthu/OneDrive/Desktop/Important/daser/next/test/Hooks/use-media-device.js"],"names":["React","useEffect","useState","breakpoints","deviceChecking","useWidth","width","keys","Object","reverse","devices","filter","key","pop","useMediaDevice","isSSR","window","innerWidth","deviceSize","setDeviceSize","windowWidth","setWindowWidth","deviceType","setDeviceType","changeWindowSize","mobile","tablet","addEventListener","removeEventListener"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,SAAQC,WAAR,EAAqBC,cAArB,QAA0C,iBAA1C;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,KAAD,EAAW;AACxB,MAAMC,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAYJ,WAAW,CAACI,IAAxB,EAA8BE,OAA9B,EAAb;AACA,MAAMC,OAAO,GAAGH,IAAI,CAACI,MAAL,CAAY,UAAAC,GAAG;AAAA,WAAIN,KAAK,IAAIH,WAAW,CAACI,IAAZ,CAAiBK,GAAjB,CAAb;AAAA,GAAf,CAAhB;AACA,SAAOF,OAAO,CAACG,GAAR,EAAP;AACH,CAJD;;AAMA,eAAe,SAASC,cAAT,GAA0B;AAAA;;AAAA;;AACrC,MAAMC,KAAK,OAAX;;AADqC,kBAEDb,QAAQ,CAACG,QAAQ,CAACU,KAAK,GAAGC,MAAM,CAACC,UAAV,GAAuB,IAA7B,CAAT,CAFP;AAAA,MAE9BC,UAF8B;AAAA,MAElBC,aAFkB;;AAAA,mBAGCjB,QAAQ,CAACa,KAAK,GAAGC,MAAM,CAACC,UAAV,GAAuB,IAA7B,CAHT;AAAA,MAG9BG,WAH8B;AAAA,MAGjBC,cAHiB;;AAAA,mBAIDnB,QAAQ,CAAC,SAAD,CAJP;AAAA,MAI9BoB,UAJ8B;AAAA,MAIlBC,aAJkB;;AAMrC,WAASC,gBAAT,GAA4B;AAAA;;AACxBH,IAAAA,cAAc,CAACL,MAAM,CAACC,UAAR,CAAd;AACAE,IAAAA,aAAa,CAACd,QAAQ,CAACW,MAAM,CAACC,UAAR,CAAT,CAAb;AACH;;AAToC,KAM5BO,gBAN4B;AAAA,YAQnBnB,QARmB;AAAA;;AAWrCJ,EAAAA,SAAS,CAAC,YAAM;AACZ,QAAIE,WAAW,CAACI,IAAZ,CAAiBW,UAAjB,KAAgCd,cAAc,CAACqB,MAAnD,EAA2DF,aAAa,CAAC,QAAD,CAAb,CAA3D,KACK,IAAIpB,WAAW,CAACI,IAAZ,CAAiBW,UAAjB,KAAgCd,cAAc,CAACsB,MAAf,CAAsB,CAAtB,CAAhC,IAA4DvB,WAAW,CAACI,IAAZ,CAAiBW,UAAjB,KAAgCd,cAAc,CAACsB,MAAf,CAAsB,CAAtB,CAAhG,EAA0HH,aAAa,CAAC,QAAD,CAAb,CAA1H,KACAA,aAAa,CAAC,SAAD,CAAb;AACR,GAJQ,EAIN,CAACL,UAAD,CAJM,CAAT;AAMAlB,EAAAA,KAAK,CAACC,SAAN,CAAgB,YAAM;AAClBc,IAAAA,KAAK,IAAIC,MAAM,CAACW,gBAAP,CAAwB,QAAxB,EAAkCH,gBAAlC,CAAT;AAEA,WAAO,YAAM;AACTT,MAAAA,KAAK,IAAIC,MAAM,CAACY,mBAAP,CAA2B,QAA3B,EAAqCJ,gBAArC,CAAT;AACH,KAFD;AAGH,GAND,EAMG,EANH;AAQA,SAAO;AACHJ,IAAAA,WAAW,EAAXA,WADG;AAEHF,IAAAA,UAAU,EAAVA,UAFG;AAGHI,IAAAA,UAAU,EAAVA;AAHG,GAAP;AAKH;;IA9BuBR,c;UAEyBT,Q","sourcesContent":["import React, {useEffect, useState} from \"react\";\r\nimport {breakpoints, deviceChecking} from 'utils/constants';\r\n\r\nconst useWidth = (width) => {\r\n    const keys = Object.keys(breakpoints.keys).reverse();\r\n    const devices = keys.filter(key => width <= breakpoints.keys[key])\r\n    return devices.pop();\r\n}\r\n\r\nexport default function useMediaDevice() {\r\n    const isSSR = typeof window !== \"undefined\";\r\n    const [deviceSize, setDeviceSize] = useState(useWidth(isSSR ? window.innerWidth : 1200));\r\n    const [windowWidth, setWindowWidth] = useState(isSSR ? window.innerWidth : 1200);\r\n    const [deviceType, setDeviceType] = useState('desktop');\r\n\r\n    function changeWindowSize() {\r\n        setWindowWidth(window.innerWidth);\r\n        setDeviceSize(useWidth(window.innerWidth));\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (breakpoints.keys[deviceSize] <= deviceChecking.mobile) setDeviceType('mobile');\r\n        else if (breakpoints.keys[deviceSize] >= deviceChecking.tablet[0] && breakpoints.keys[deviceSize] <= deviceChecking.tablet[1]) setDeviceType('tablet')\r\n        else setDeviceType('desktop')\r\n    }, [deviceSize]);\r\n\r\n    React.useEffect(() => {\r\n        isSSR && window.addEventListener(\"resize\", changeWindowSize);\r\n\r\n        return () => {\r\n            isSSR && window.removeEventListener(\"resize\", changeWindowSize);\r\n        };\r\n    }, []);\r\n\r\n    return {\r\n        windowWidth,\r\n        deviceSize,\r\n        deviceType,\r\n    };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}