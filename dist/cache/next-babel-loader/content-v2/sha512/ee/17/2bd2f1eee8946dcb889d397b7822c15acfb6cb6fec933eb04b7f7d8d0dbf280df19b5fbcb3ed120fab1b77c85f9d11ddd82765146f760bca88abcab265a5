{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\arthu\\\\OneDrive\\\\Desktop\\\\Important\\\\daser\\\\next\\\\test\\\\Components\\\\UI\\\\Image\\\\index.jsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport useImage from \"hooks/use-image\";\nimport PropTypes from 'prop-types';\n\nvar Image = function Image(_ref) {\n  _s();\n\n  var src = _ref.src,\n      _ref$alt = _ref.alt,\n      alt = _ref$alt === void 0 ? \"\" : _ref$alt,\n      defaultSrc = _ref.defaultSrc;\n\n  var _useImage = useImage({\n    src: src || defaultSrc\n  }),\n      loaded = _useImage.loaded,\n      error = _useImage.error;\n\n  var _useState = useState(null),\n      srcAvatar = _useState[0],\n      setSrcAvatar = _useState[1];\n\n  var _useState2 = useState(false),\n      srcDefault = _useState2[0],\n      setSrcDefault = _useState2[1];\n\n  useEffect(function () {\n    if (loaded) {\n      if (!src) setSrcDefault(true);\n      setSrcAvatar(src || defaultSrc);\n    }\n\n    if (error) {\n      setSrcAvatar('/images/notFound.png');\n    }\n  }, [loaded, src, error]);\n  return /*#__PURE__*/_jsxDEV(\"img\", {\n    className: \"\".concat(!loaded && !error ? 'till-loading' : '', \" \").concat(error ? 'not-found' : '', \" \").concat(srcDefault ? 'default-avatar' : ''),\n    src: srcAvatar || '/images/loading.gif',\n    alt: alt || 'dynamic-image-hok'\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 9\n  }, _this);\n};\n\n_s(Image, \"mb5uH4QH7hdLpivbHjjgkr6Pqi4=\", false, function () {\n  return [useImage];\n});\n\n_c = Image;\nImage.propTypes = {\n  src: PropTypes.string.isRequired,\n  alt: PropTypes.string,\n  defaultSrc: PropTypes.string\n};\nexport default _c2 = /*#__PURE__*/React.memo(Image);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Image\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["C:/Users/arthu/OneDrive/Desktop/Important/daser/next/test/Components/UI/Image/index.jsx"],"names":["React","useState","useEffect","useImage","PropTypes","Image","src","alt","defaultSrc","loaded","error","srcAvatar","setSrcAvatar","srcDefault","setSrcDefault","propTypes","string","isRequired","memo"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,OAAOC,QAAP,MAAqB,iBAArB;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAEA,IAAMC,KAAK,GAAG,SAARA,KAAQ,OAAmC;AAAA;;AAAA,MAAhCC,GAAgC,QAAhCA,GAAgC;AAAA,sBAA3BC,GAA2B;AAAA,MAA3BA,GAA2B,yBAArB,EAAqB;AAAA,MAAjBC,UAAiB,QAAjBA,UAAiB;;AAAA,kBACnBL,QAAQ,CAAC;AAAEG,IAAAA,GAAG,EAAEA,GAAG,IAAIE;AAAd,GAAD,CADW;AAAA,MACrCC,MADqC,aACrCA,MADqC;AAAA,MAC7BC,KAD6B,aAC7BA,KAD6B;;AAAA,kBAEXT,QAAQ,CAAC,IAAD,CAFG;AAAA,MAEtCU,SAFsC;AAAA,MAE3BC,YAF2B;;AAAA,mBAGTX,QAAQ,CAAC,KAAD,CAHC;AAAA,MAGtCY,UAHsC;AAAA,MAG1BC,aAH0B;;AAI7CZ,EAAAA,SAAS,CAAC,YAAM;AACZ,QAAIO,MAAJ,EAAY;AACR,UAAI,CAACH,GAAL,EAAUQ,aAAa,CAAC,IAAD,CAAb;AACVF,MAAAA,YAAY,CAACN,GAAG,IAAIE,UAAR,CAAZ;AACH;;AACD,QAAIE,KAAJ,EAAW;AACPE,MAAAA,YAAY,CAAC,sBAAD,CAAZ;AACH;AACJ,GARQ,EAQN,CAACH,MAAD,EAASH,GAAT,EAAcI,KAAd,CARM,CAAT;AAUA,sBACI;AACI,IAAA,SAAS,YAAM,CAACD,MAAD,IAAW,CAACC,KAAb,GAAsB,cAAtB,GAAuC,EAA5C,cAAkDA,KAAK,GAAG,WAAH,GAAgB,EAAvE,cAA6EG,UAAU,GAAG,gBAAH,GAAsB,EAA7G,CADb;AAEI,IAAA,GAAG,EAAEF,SAAS,IAAI,qBAFtB;AAE6C,IAAA,GAAG,EAAEJ,GAAG,IAAI;AAFzD;AAAA;AAAA;AAAA;AAAA,WADJ;AAKH,CAnBD;;GAAMF,K;UACwBF,Q;;;KADxBE,K;AAoBNA,KAAK,CAACU,SAAN,GAAkB;AACdT,EAAAA,GAAG,EAAEF,SAAS,CAACY,MAAV,CAAiBC,UADR;AAEdV,EAAAA,GAAG,EAAEH,SAAS,CAACY,MAFD;AAGdR,EAAAA,UAAU,EAAEJ,SAAS,CAACY;AAHR,CAAlB;AAKA,kCAAehB,KAAK,CAACkB,IAAN,CAAWb,KAAX,CAAf","sourcesContent":["import React, {useState, useEffect} from 'react';\r\nimport useImage from \"hooks/use-image\";\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Image = ({ src, alt = \"\", defaultSrc }) => {\r\n    const { loaded, error } = useImage({ src: src || defaultSrc });\r\n    const [srcAvatar, setSrcAvatar] = useState(null);\r\n    const [srcDefault, setSrcDefault] = useState(false);\r\n    useEffect(() => {\r\n        if (loaded) {\r\n            if (!src) setSrcDefault(true);\r\n            setSrcAvatar(src || defaultSrc);\r\n        }\r\n        if (error) {\r\n            setSrcAvatar('/images/notFound.png')\r\n        }\r\n    }, [loaded, src, error]);\r\n\r\n    return (\r\n        <img\r\n            className={`${(!loaded && !error) ? 'till-loading' : ''} ${error ? 'not-found': ''} ${srcDefault ? 'default-avatar' : ''}`}\r\n            src={srcAvatar || '/images/loading.gif'} alt={alt || 'dynamic-image-hok'} />\r\n    )\r\n};\r\nImage.propTypes = {\r\n    src: PropTypes.string.isRequired,\r\n    alt: PropTypes.string,\r\n    defaultSrc: PropTypes.string,\r\n};\r\nexport default React.memo(Image);\r\n"]},"metadata":{},"sourceType":"module"}