{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\arthu\\\\OneDrive\\\\Desktop\\\\Important\\\\daser\\\\next\\\\test\\\\Components\\\\UI\\\\Select\\\\index.jsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useMemo, useState, useCallback, useRef, useEffect } from \"react\";\nimport Select from '@material-ui/core/Select';\nimport variables from 'static/styles/jss/variables';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport FormControl from '@material-ui/core/FormControl';\nimport PropTypes from \"prop-types\";\nimport UseStyles from './styles';\nimport { UiGenerateMargin, UIGetMarginLeftRight } from 'utils/handlers';\nimport ListItem from './elements/ListItem';\nimport { MenuItem } from \"@material-ui/core\";\nimport { useFormControlStyles, usePopoverStyles, useSelectStyles, useLabelStyles, useAutoCompleteStyles, useItemStyles } from '../makeStylesUI';\n\nconst BrandSelect = props => {\n  const {\n    0: selectOpen,\n    1: setSelectOpen\n  } = useState(false);\n  const {\n    0: marginBottom,\n    1: setMarginBottom\n  } = useState('0px');\n  const errorRef = useRef();\n  const bottomWrapRef = useRef();\n  const styles = UseStyles();\n  const {\n    options,\n    label,\n    value,\n    placeholder,\n    id,\n    handleChange,\n    helperText,\n    required,\n    errors,\n    size,\n    disabled,\n    autocomplete,\n    multiple,\n    withIcon,\n    withAvatar\n  } = props;\n  const sharedPropsOfClasses = useMemo(() => {\n    const backgroundColor = props.theme === 'dark' ? variables.$input.$theme.$dark : variables.$input.$theme.$light;\n    const boxShadow = props.theme === 'dark' ? variables.$select.$dark.$borderColor + ' 0px 0px 0px 1px' : 'none';\n    return {\n      backgroundColor,\n      boxShadow,\n      marginBottom: marginBottom,\n      isOpened: selectOpen,\n      isDark: props.theme === 'dark',\n      listItemColor: props.theme === 'dark' ? variables.$select.$dark.$textColor : variables.$select.$textColor,\n      selectedItemColor: props.theme === 'dark' ? variables.$select.$dark.$selected.$color : variables.$select.$selected.$color,\n      selectedItemBG: props.theme === 'dark' ? variables.$select.$dark.$selected.$bgColor : variables.$select.$selected.$bgColor,\n      placeholderColor: props.theme === 'dark' ? variables.$select.$dark.$emptyTextColor : variables.$select.$emptyTextColor,\n      paperMarginTop: props.paperMarginTop,\n      size: props.size\n    };\n  }, [props.size, props.theme, selectOpen, marginBottom, props.paperMarginTop]);\n  const convertNaturalSize = useCallback((prop, what) => {\n    if (isNaN(+prop)) return prop;else return prop + what;\n  }, [props.width]);\n\n  const togglePopover = val => {\n    if (props.onOpen || props.onClose) {\n      props[val ? 'onOpen' : 'onClose'](val);\n    }\n\n    setSelectOpen(val);\n  };\n\n  const classesLabel = useLabelStyles({\n    color: label && label.color || '#fff'\n  });\n  const classesMenuItem = useItemStyles({\n    avatarBG: sharedPropsOfClasses.isDark ? '#fff' : '#0B0E2A',\n    avatarColor: sharedPropsOfClasses.isDark ? variables.$input.$theme.$dark : '#fff',\n    size: props.size,\n    iconColor: variables.$select.$dropdown.$listItem.$iconColor\n  });\n  const classesFormControl = useFormControlStyles(_objectSpread(_objectSpread({}, sharedPropsOfClasses), {}, {\n    width: props.fullWidth ? `calc(100% - ${UIGetMarginLeftRight(props.margin)}px)` : convertNaturalSize(props.width, 'px'),\n    size: props.size\n  }));\n  const classesPopover = usePopoverStyles(_objectSpread(_objectSpread({}, sharedPropsOfClasses), {}, {\n    marginLeft: sharedPropsOfClasses.isDark ? '0px' : '0px'\n  }));\n  const classesAutoComplete = useAutoCompleteStyles(_objectSpread(_objectSpread({}, sharedPropsOfClasses), {}, {\n    textColor: sharedPropsOfClasses.isDark ? variables.$select.$dark.$textColor : variables.$select.$textColor,\n    iconColor: sharedPropsOfClasses.isDark ? variables.$input.$theme.$darkColor : '#000'\n  }));\n  const classesSelect = useSelectStyles(_objectSpread(_objectSpread({}, sharedPropsOfClasses), {}, {\n    iconColor: sharedPropsOfClasses.isDark ? variables.$input.$theme.$darkColor : '#000',\n    textColor: sharedPropsOfClasses.isDark ? variables.$select.$dark.$textColor : variables.$select.$textColor\n  }));\n  useEffect(() => {\n    // Calculate Margin Bottom\n    const bottomElementHeight = errorRef.current ? errorRef.current.offsetHeight + 2 : bottomWrapRef.current ? bottomWrapRef.current.offsetHeight + 2 : 0;\n    setMarginBottom(bottomElementHeight\n    /*marginTopBottom*/\n    + 'px');\n  }, [required, errors, errorRef.current, helperText, bottomWrapRef.current]); // Get position of main Wrapper\n\n  const generateMarginDiv = useCallback(() => UiGenerateMargin(props.margin, props.direction), [props.direction, props.margin]);\n  const LabelProps = useMemo(() => _objectSpread({\n    disableAnimation: true,\n    variant: 'filled',\n    focused: false,\n    shrink: false\n  }, errors && {\n    error: errors\n  }), [props]);\n  const SelectProps = useMemo(() => _objectSpread({\n    disabled,\n    value: value || '',\n    displayEmpty: !!(!value && placeholder),\n    renderValue: e => {\n      if (placeholder && !value) {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"default-value-empty\",\n          children: placeholder\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 24\n        }, this);\n      }\n\n      const currentValue = options.find(_e => _e.value === e);\n\n      if (currentValue) {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: currentValue.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 24\n        }, this);\n      }\n    }\n  }, id && {\n    id\n  }), [props, options]);\n  const SelectOptions = useMemo(() => {\n    return options.map(item => /*#__PURE__*/_jsxDEV(MenuItem, {\n      value: item.value,\n      classes: classesMenuItem,\n      children: /*#__PURE__*/_jsxDEV(ListItem, {\n        itemField: item,\n        withAvatar: withAvatar,\n        withIcon: withIcon\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 13\n      }, this)\n    }, item.value, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 36\n    }, this));\n  }, [options, size, withAvatar, withIcon]);\n  const bottomWrap = useMemo(() => {\n    if ((helperText || required) && !errors) {\n      const text = helperText || (required ? 'Required *' : '');\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles['bottom-wrap'],\n        ref: bottomWrapRef,\n        children: text && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"helper-text\",\n          children: text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 30\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 17\n      }, this);\n    } else if (errors) return /*#__PURE__*/_jsxDEV(\"span\", {\n      ref: errorRef,\n      className: styles['error-line'],\n      children: errors\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 13\n    }, this);\n  }, [helperText, errors, errorRef, required]);\n  const generateClassNameParent = useMemo(() => {\n    return `${disabled ? 'disable-select-wrapper' : ''} ${props.className} ${selectOpen ? 'select-opened' : ''}`;\n  }, [disabled, props.className, selectOpen]);\n  return /*#__PURE__*/_jsxDEV(FormControl, {\n    classes: {\n      root: classesFormControl.root\n    },\n    disabled: disabled,\n    className: generateClassNameParent,\n    style: _objectSpread({}, generateMarginDiv()),\n    children: [label && /*#__PURE__*/_jsxDEV(InputLabel, _objectSpread(_objectSpread({\n      classes: classesLabel\n    }, LabelProps), {}, {\n      children: label.title + (props.required ? ' *' : '')\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 23\n    }, this), autocomplete ? /*#__PURE__*/_jsxDEV(Autocomplete, {\n      disabled: disabled,\n      multiple: multiple,\n      className: multiple ? 'MuiMultiple_Autocomplete_field' : '',\n      disableCloseOnSelect: true,\n      disableListWrap: false,\n      classes: classesAutoComplete,\n      options: options,\n      getOptionSelected: (option, value) => option.title === value.title,\n      renderOption: option => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: option.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 43\n      }, this),\n      getOptionLabel: option => option.title,\n      onOpen: () => togglePopover(true),\n      onClose: () => togglePopover(false),\n      onChange: handleChange,\n      renderInput: params => /*#__PURE__*/_jsxDEV(TextField, _objectSpread(_objectSpread({}, params), {}, {\n        variant: \"filled\",\n        focused: false,\n        placeholder: placeholder\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 42\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 29\n    }, this) : /*#__PURE__*/_jsxDEV(Select, _objectSpread(_objectSpread({\n      MenuProps: {\n        anchorOrigin: {\n          vertical: \"bottom\",\n          horizontal: \"left\"\n        },\n        transformOrigin: {\n          vertical: \"top\",\n          horizontal: \"left\"\n        },\n        getContentAnchorEl: null,\n        classes: {\n          paper: classesPopover.paper\n        }\n      },\n      onOpen: () => togglePopover(true),\n      onClose: () => togglePopover(false)\n    }, SelectProps), {}, {\n      className: classesSelect.select,\n      inputProps: {\n        classes: {\n          root: classesSelect.root,\n          icon: classesSelect.icon\n        }\n      },\n      onChange: handleChange,\n      children: SelectOptions\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 18\n    }, this), bottomWrap]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 170,\n    columnNumber: 9\n  }, this);\n};\n\nBrandSelect.defaultProps = {\n  options: [],\n  theme: 'light',\n  size: 'md',\n  margin: 0,\n  multiple: false,\n  withAvatar: false,\n  withIcon: false,\n  className: '',\n  paperMarginTop: 0\n};\nBrandSelect.propTypes = {\n  className: PropTypes.string,\n  withAvatar: PropTypes.bool,\n  withIcon: PropTypes.bool,\n  multiple: PropTypes.bool,\n  autocomplete: PropTypes.bool,\n  theme: PropTypes.string,\n  readonly: PropTypes.bool,\n  helperText: PropTypes.string,\n  direction: PropTypes.string,\n  required: PropTypes.bool,\n  fullWidth: PropTypes.bool,\n  size: PropTypes.string,\n  refBind: PropTypes.any,\n  name: PropTypes.string,\n  label: PropTypes.object,\n  width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  errors: PropTypes.string,\n  disabled: PropTypes.bool,\n  margin: PropTypes.oneOfType([PropTypes.array, PropTypes.number]),\n  handleChange: PropTypes.func,\n  onOpen: PropTypes.func,\n  onClose: PropTypes.func,\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  placeholder: PropTypes.string,\n  paperMarginTop: PropTypes.number\n};\nexport default /*#__PURE__*/React.memo(BrandSelect);","map":{"version":3,"sources":["C:/Users/arthu/OneDrive/Desktop/Important/daser/next/test/Components/UI/Select/index.jsx"],"names":["React","useMemo","useState","useCallback","useRef","useEffect","Select","variables","InputLabel","TextField","Autocomplete","FormControl","PropTypes","UseStyles","UiGenerateMargin","UIGetMarginLeftRight","ListItem","MenuItem","useFormControlStyles","usePopoverStyles","useSelectStyles","useLabelStyles","useAutoCompleteStyles","useItemStyles","BrandSelect","props","selectOpen","setSelectOpen","marginBottom","setMarginBottom","errorRef","bottomWrapRef","styles","options","label","value","placeholder","id","handleChange","helperText","required","errors","size","disabled","autocomplete","multiple","withIcon","withAvatar","sharedPropsOfClasses","backgroundColor","theme","$input","$theme","$dark","$light","boxShadow","$select","$borderColor","isOpened","isDark","listItemColor","$textColor","selectedItemColor","$selected","$color","selectedItemBG","$bgColor","placeholderColor","$emptyTextColor","paperMarginTop","convertNaturalSize","prop","what","isNaN","width","togglePopover","val","onOpen","onClose","classesLabel","color","classesMenuItem","avatarBG","avatarColor","iconColor","$dropdown","$listItem","$iconColor","classesFormControl","fullWidth","margin","classesPopover","marginLeft","classesAutoComplete","textColor","$darkColor","classesSelect","bottomElementHeight","current","offsetHeight","generateMarginDiv","direction","LabelProps","disableAnimation","variant","focused","shrink","error","SelectProps","displayEmpty","renderValue","e","currentValue","find","_e","title","SelectOptions","map","item","bottomWrap","text","generateClassNameParent","className","root","option","params","anchorOrigin","vertical","horizontal","transformOrigin","getContentAnchorEl","classes","paper","select","icon","defaultProps","propTypes","string","bool","readonly","refBind","any","name","object","oneOfType","number","array","func","memo"],"mappings":"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","sourcesContent":["import React, {useMemo, useState, useCallback, useRef, useEffect} from \"react\";\r\nimport Select from '@material-ui/core/Select';\r\nimport variables from 'static/styles/jss/variables';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport PropTypes from \"prop-types\";\r\nimport UseStyles from './styles';\r\nimport {UiGenerateMargin, UIGetMarginLeftRight} from 'utils/handlers';\r\nimport ListItem from './elements/ListItem';\r\nimport {MenuItem} from \"@material-ui/core\";\r\nimport {\r\n    useFormControlStyles,\r\n    usePopoverStyles,\r\n    useSelectStyles,\r\n    useLabelStyles,\r\n    useAutoCompleteStyles,\r\n    useItemStyles,\r\n} from '../makeStylesUI';\r\n\r\nconst BrandSelect = (props) => {\r\n    const [selectOpen, setSelectOpen] = useState(false);\r\n    const [marginBottom, setMarginBottom] = useState('0px');\r\n    const errorRef = useRef();\r\n    const bottomWrapRef = useRef();\r\n    const styles = UseStyles();\r\n    const {\r\n        options,\r\n        label,\r\n        value,\r\n        placeholder,\r\n        id,\r\n        handleChange,\r\n        helperText,\r\n        required,\r\n        errors,\r\n        size,\r\n        disabled,\r\n        autocomplete,\r\n        multiple,\r\n        withIcon,\r\n        withAvatar,\r\n    } = props;\r\n\r\n    const sharedPropsOfClasses = useMemo(() => {\r\n        const backgroundColor = props.theme === 'dark' ? variables.$input.$theme.$dark : variables.$input.$theme.$light;\r\n        const boxShadow = props.theme === 'dark' ? variables.$select.$dark.$borderColor + ' 0px 0px 0px 1px' : 'none';\r\n        return {\r\n            backgroundColor,\r\n            boxShadow,\r\n            marginBottom: marginBottom,\r\n            isOpened: selectOpen,\r\n            isDark: props.theme === 'dark',\r\n            listItemColor: props.theme === 'dark' ? variables.$select.$dark.$textColor : variables.$select.$textColor,\r\n            selectedItemColor: props.theme === 'dark' ? variables.$select.$dark.$selected.$color : variables.$select.$selected.$color,\r\n            selectedItemBG: props.theme === 'dark' ? variables.$select.$dark.$selected.$bgColor : variables.$select.$selected.$bgColor,\r\n            placeholderColor: props.theme === 'dark' ? variables.$select.$dark.$emptyTextColor : variables.$select.$emptyTextColor,\r\n            paperMarginTop: props.paperMarginTop,\r\n            size: props.size,\r\n        }\r\n    }, [props.size, props.theme, selectOpen, marginBottom, props.paperMarginTop]);\r\n\r\n    const convertNaturalSize = useCallback((prop, what) => {\r\n        if (isNaN(+prop)) return prop;\r\n        else return prop + what;\r\n    }, [props.width]);\r\n\r\n    const togglePopover = (val) => {\r\n        if (props.onOpen || props.onClose) {\r\n            props[val ? 'onOpen' : 'onClose'](val);\r\n        }\r\n        setSelectOpen(val)\r\n    }\r\n    const classesLabel = useLabelStyles({\r\n        color: (label && label.color) || '#fff',\r\n    });\r\n\r\n    const classesMenuItem = useItemStyles({\r\n        avatarBG: sharedPropsOfClasses.isDark ? '#fff' : '#0B0E2A',\r\n        avatarColor: sharedPropsOfClasses.isDark ? variables.$input.$theme.$dark : '#fff',\r\n        size: props.size,\r\n        iconColor: variables.$select.$dropdown.$listItem.$iconColor,\r\n    });\r\n\r\n    const classesFormControl = useFormControlStyles({\r\n        ...sharedPropsOfClasses,\r\n        width: props.fullWidth ? `calc(100% - ${UIGetMarginLeftRight(props.margin)}px)` : convertNaturalSize(props.width, 'px'),\r\n        size: props.size,\r\n    });\r\n\r\n    const classesPopover = usePopoverStyles({\r\n        ...sharedPropsOfClasses,\r\n        marginLeft: sharedPropsOfClasses.isDark ? '0px' : '0px',\r\n    });\r\n\r\n    const classesAutoComplete = useAutoCompleteStyles({\r\n        ...sharedPropsOfClasses,\r\n        textColor: sharedPropsOfClasses.isDark ? variables.$select.$dark.$textColor : variables.$select.$textColor,\r\n        iconColor: sharedPropsOfClasses.isDark ? variables.$input.$theme.$darkColor : '#000',\r\n    });\r\n\r\n    const classesSelect = useSelectStyles({\r\n        ...sharedPropsOfClasses,\r\n        iconColor: sharedPropsOfClasses.isDark ? variables.$input.$theme.$darkColor : '#000',\r\n        textColor: sharedPropsOfClasses.isDark ? variables.$select.$dark.$textColor : variables.$select.$textColor,\r\n    });\r\n\r\n    useEffect(() => { // Calculate Margin Bottom\r\n        const bottomElementHeight = errorRef.current ? errorRef.current.offsetHeight + 2 :\r\n            bottomWrapRef.current ? bottomWrapRef.current.offsetHeight + 2 : 0;\r\n        setMarginBottom(bottomElementHeight /*marginTopBottom*/ + 'px');\r\n    }, [required, errors, errorRef.current, helperText, bottomWrapRef.current]);\r\n\r\n\r\n    // Get position of main Wrapper\r\n    const generateMarginDiv = useCallback(() => UiGenerateMargin(props.margin, props.direction), [props.direction, props.margin]);\r\n\r\n    const LabelProps = useMemo(() => ({\r\n        disableAnimation: true,\r\n        variant: 'filled',\r\n        focused: false,\r\n        shrink: false,\r\n        ...(errors && {error: errors})\r\n    }), [props]);\r\n\r\n    const SelectProps = useMemo(() => ({\r\n        disabled,\r\n        value: value || '',\r\n        displayEmpty: !!(!value && placeholder),\r\n        renderValue: (e) => {\r\n            if ((placeholder && !value)) {\r\n                return <div className=\"default-value-empty\">{placeholder}</div>\r\n            }\r\n            const currentValue = options.find(_e => _e.value === e);\r\n            if (currentValue) {\r\n                return <div>{currentValue.title}</div>\r\n            }\r\n        },\r\n        ...(id && {id}),\r\n    }), [props, options]);\r\n\r\n    const SelectOptions = useMemo(() => {\r\n        return options.map(item => <MenuItem value={item.value} key={item.value} classes={classesMenuItem}>\r\n            <ListItem\r\n                itemField={item}\r\n                withAvatar={withAvatar}\r\n                withIcon={withIcon}\r\n            /></MenuItem>)\r\n    }, [options, size, withAvatar, withIcon])\r\n\r\n    const bottomWrap = useMemo(() => {\r\n        if ((helperText || required) && !errors) {\r\n            const text = helperText || (required ? 'Required *' : '');\r\n            return (\r\n                <div className={styles['bottom-wrap']} ref={bottomWrapRef}>\r\n                    {text && <p className=\"helper-text\">{text}</p>}\r\n                </div>\r\n            )\r\n        } else if (errors) return (\r\n            <span ref={errorRef} className={styles['error-line']}>{errors}</span>\r\n        )\r\n    }, [helperText, errors, errorRef, required]);\r\n\r\n    const generateClassNameParent = useMemo(() => {\r\n        return `${disabled ? 'disable-select-wrapper' : ''} ${props.className} ${selectOpen ? 'select-opened' : ''}`\r\n    }, [disabled, props.className, selectOpen]);\r\n\r\n    return (\r\n        <FormControl classes={{root: classesFormControl.root}} disabled={disabled} className={generateClassNameParent} style={{...generateMarginDiv()}}>\r\n            {label && <InputLabel\r\n                classes={classesLabel}\r\n                {...LabelProps}\r\n            >{label.title + (props.required ? ' *' : '')}</InputLabel>}\r\n            {autocomplete ? <Autocomplete\r\n                disabled={disabled}\r\n                multiple={multiple}\r\n                className={multiple ? 'MuiMultiple_Autocomplete_field' : ''}\r\n                disableCloseOnSelect={true}\r\n                disableListWrap={false}\r\n                classes={classesAutoComplete}\r\n                options={options}\r\n                getOptionSelected={(option, value) => option.title === value.title}\r\n                renderOption={(option) => <div>{option.title}</div>}\r\n                getOptionLabel={(option) => option.title}\r\n                onOpen={() => togglePopover(true)}\r\n                onClose={() => togglePopover(false)}\r\n                onChange={handleChange}\r\n                renderInput={(params) => <TextField {...params} variant=\"filled\" focused={false} placeholder={placeholder}/>}\r\n            /> : <Select\r\n                MenuProps={{\r\n                    anchorOrigin: {\r\n                        vertical: \"bottom\",\r\n                        horizontal: \"left\"\r\n                    },\r\n                    transformOrigin: {\r\n                        vertical: \"top\",\r\n                        horizontal: \"left\"\r\n                    },\r\n                    getContentAnchorEl: null,\r\n                    classes: {\r\n                        paper: classesPopover.paper,\r\n                    }\r\n                }}\r\n                onOpen={() => togglePopover(true)}\r\n                onClose={() => togglePopover(false)}\r\n                {...SelectProps}\r\n                className={classesSelect.select}\r\n                inputProps={{\r\n                    classes: {\r\n                        root: classesSelect.root,\r\n                        icon: classesSelect.icon,\r\n                    },\r\n                }}\r\n                onChange={handleChange}\r\n            >\r\n                {SelectOptions}\r\n            </Select>}\r\n            {bottomWrap}\r\n        </FormControl>\r\n    );\r\n};\r\nBrandSelect.defaultProps = {\r\n    options: [],\r\n    theme: 'light',\r\n    size: 'md',\r\n    margin: 0,\r\n    multiple: false,\r\n    withAvatar: false,\r\n    withIcon: false,\r\n    className: '',\r\n    paperMarginTop: 0,\r\n};\r\n\r\nBrandSelect.propTypes = {\r\n    className: PropTypes.string,\r\n    withAvatar: PropTypes.bool,\r\n    withIcon: PropTypes.bool,\r\n    multiple: PropTypes.bool,\r\n    autocomplete: PropTypes.bool,\r\n    theme: PropTypes.string,\r\n    readonly: PropTypes.bool,\r\n    helperText: PropTypes.string,\r\n    direction: PropTypes.string,\r\n    required: PropTypes.bool,\r\n    fullWidth: PropTypes.bool,\r\n    size: PropTypes.string,\r\n    refBind: PropTypes.any,\r\n    name: PropTypes.string,\r\n    label: PropTypes.object,\r\n    width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n    errors: PropTypes.string,\r\n    disabled: PropTypes.bool,\r\n    margin: PropTypes.oneOfType([PropTypes.array, PropTypes.number]),\r\n    handleChange: PropTypes.func,\r\n    onOpen: PropTypes.func,\r\n    onClose: PropTypes.func,\r\n    value: PropTypes.oneOfType([\r\n        PropTypes.string,\r\n        PropTypes.number\r\n    ]),\r\n    placeholder: PropTypes.string,\r\n    paperMarginTop: PropTypes.number,\r\n}\r\nexport default React.memo(BrandSelect);"]},"metadata":{},"sourceType":"module"}